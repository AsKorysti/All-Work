
Перем ПустоеЗначениеОтбора Экспорт;
Перем ТипыЗначенийЭлементов;
Перем ФайлXML, мТипXMLБиблиотеки;
//Перем ГлубинаВыгрузкиДанных, СрокХраненияДанных;
Перем оПользовательАвтообмена;
Перем ВидОперации, ЗаписьВЖурнал;
Перем КоличествоОбъектов;
Перем КонфУТ11, гОтладка;
Перем СоединениеНомер, СеансПользователь, СеансНомер;

Перем КаталогОтправкиФТП, КаталогПриемаФТП, ВременныйКаталогФТП;
Перем ХТТПСоединение, ХТТПЗапрос;

//****************************************
Функция СуществуетФайл(ИмяФайла)
	ВыбФайл = Новый Файл(ИмяФайла);
	Если ВыбФайл.Существует()  Тогда  
    	Возврат Истина;
 	КонецЕсли;  
	Возврат Ложь;
КонецФункции

Функция СоздатьНесуществующиеПодкаталоги(пПутьКФайлу)
	
	лПутьКФайлу	= пПутьКФайлу;
	чКаталогов = СтрЧислоВхождений(лПутьКФайлу, "\"); 
	Если чКаталогов > 0 Тогда
		лПутьКФайлу	= СтрЗаменить(лПутьКФайлу, "\", Символы.ПС);
		р = 1;
		Каталог = "";
		Пока р <= чКаталогов Цикл
			Попытка
				Каталог = Каталог + (СтрПолучитьСтроку(лПутьКФайлу,р)) + ?(р = чКаталогов,"","\");
			Исключение
				Возврат 0;
			КонецПопытки;
			р = р + 1;
		КонецЦикла;
		СоздатьКаталог(Каталог);
	КонецЕсли;	
	
	Возврат 1;
	
КонецФункции	//СоздатьНесуществующиеПодкаталоги()


//****************************************
Функция ЭтоПустойСписок(сп)
	Если сп.Количество()=1 Тогда
		Если сп.Получить(0).Значение=ПустоеЗначениеОтбора Тогда
			Возврат Истина;
		КонецЕсли;
	ИначеЕсли сп.Количество()=0 Тогда
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

Процедура СообщитьПодробно(лСообщение, лВажность, лЛог, лЖурнал)
	//#Если Клиент Тогда
		Сообщить(лСообщение,лВажность);
	//#Иначе
		Если лЖурнал Тогда
			ЗаписьЖурналаРегистрации("Автообмен.НаСервере", УровеньЖурналаРегистрации.Информация, , , лСообщение);
		КонецЕсли;
	//#КонецЕсли
	Если лЛог Тогда
		КаталогЛога = КаталогОбмена + "reports\";
		Если НЕ СуществуетФайл(КаталогЛога) тогда
			СоздатьНесуществующиеПодкаталоги(КаталогЛога);	
		КонецЕсли;
		
		лПрефикс = ""+ТекущаяДата()+" ["+Формат(СоединениеНомер,"ЧГ=0")+"] ["+СеансПользователь+"] ["+Формат(СеансНомер,"ЧГ=0")+"] -- ";
		
		Если ВидОперации = "Выгрузка" Тогда
			ИмяФайла = КаталогЛога + СокрЛП(Формат(ТекущаяДата(), "ДФ=yyyy-MM-dd")) + "_ToMBC" + ".txt";
			Текст = Новый ЗаписьТекста(ИмяФайла, КодировкаТекста.ANSI,,истина);
			Текст.ЗаписатьСтроку(лПрефикс + лСообщение);
			Текст.Закрыть();       
		ИначеЕсли ВидОперации = "Загрузка" Тогда
			ИмяФайла = КаталогЛога +  СокрЛП(Формат(ТекущаяДата(), "ДФ=yyyy-MM-dd")) + "_FromMBC" + ".txt";
			Текст = Новый ЗаписьТекста(ИмяФайла, КодировкаТекста.ANSI,,истина);
			Текст.ЗаписатьСтроку(лПрефикс + лСообщение);
			Текст.Закрыть(); 
		Иначе
			лФайл = Новый Файл(ИспользуемоеИмяФайла);
			КаталогЛога = лФайл.Путь + "reports\";
			Если НЕ СуществуетФайл(КаталогЛога) Тогда
				СоздатьНесуществующиеПодкаталоги(КаталогЛога);	
			КонецЕсли;
			
			ИмяФайла = КаталогЛога +  СокрЛП(Формат(ТекущаяДата(), "ДФ=yyyy-MM-dd")) + ".txt";
			Текст = Новый ЗаписьТекста(ИмяФайла, КодировкаТекста.ANSI,,истина);
			Текст.ЗаписатьСтроку(лПрефикс + лСообщение);
			Текст.Закрыть(); 
		КонецЕсли;    		
	КонецЕсли;
КонецПроцедуры

Функция РазложитьСтрокуВМассивПодстрок(Знач Стр, Разделитель = ",")
	
	МассивСтрок = Новый Массив();
	Если Разделитель = " " Тогда
		Стр = СокрЛП(Стр);
		Пока Истина Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз-1));
			Стр = СокрЛ(Сред(Стр,Поз));
		КонецЦикла;
	Иначе
		ДлинаРазделителя = СтрДлина(Разделитель);
		Пока Истина Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз-1));
			Стр = Сред(Стр,Поз+ДлинаРазделителя);
		КонецЦикла;
	КонецЕсли;
	
КонецФункции


//****************************************
Функция ПодключитьФТП()
	Попытка
		//Если ПроксиИспользовать Тогда
		//	Прокси = Новый ИнтернетПрокси;
		//	Прокси.Установить("ftp",ПроксиСервер,ПроксиПорт);
		//	Прокси.Пользователь = ПроксиПользователь;
		//	Прокси.Пароль       = ПроксиПароль;
		//	FTPСоед = Новый FTPСоединение(СокрЛП(ФТПСервер), СокрЛП(ФТППорт), СокрЛП(ФТППользователь), СокрЛП(ФТППароль),Прокси,Истина);
		//Иначе
			FTPСоед = Новый FTPСоединение(СокрЛП(ФТПСервер), СокрЛП(ФТППорт), СокрЛП(ФТППользователь), СокрЛП(ФТППароль),,Истина, ФТПТаймаут);
		//КонецЕсли;
	Исключение
		FTPСоед = Неопределено;
		СообщитьПодробно(ОписаниеОшибки(), СтатусСообщения.Важное, Истина, ЗаписьВЖурнал);
	КонецПопытки;
	Возврат FTPСоед;
КонецФункции

Функция ПроверкаФТП(лСообщать=Истина) Экспорт
	ОК = Истина;
	FTPСоед = ПодключитьФТП();
	Если FTPСоед=Неопределено Тогда
		Если лСообщать Тогда
			СообщитьПодробно("Нет соединения с ФТП", СтатусСообщения.Важное, Истина, ЗаписьВЖурнал);
		КонецЕсли;
		ОК = Ложь;
	Иначе
		Если лСообщать Тогда
			СообщитьПодробно("Есть соединение с ФТП", СтатусСообщения.Обычное, Истина, ЗаписьВЖурнал);
		КонецЕсли;
	КонецЕсли;
	
	СписокКаталогов = Новый Массив;
 	СписокКаталогов.Добавить("in");
	СписокКаталогов.Добавить("out");
	СписокКаталогов.Добавить("tmp");
	лСозданоКаталогов = 0;
	Для Каждого лКаталог Из СписокКаталогов Цикл
		Попытка
			Если ОК И ((FTPСоед.НайтиФайлы(, лКаталог).Количество() = 0)) Тогда
				лСозданоКаталогов = лСозданоКаталогов + 1;
				FTPСоед.СоздатьКаталог(лКаталог);
			КонецЕсли;
		Исключение
			СообщитьПодробно(ОписаниеОшибки(), СтатусСообщения.Важное, Истина, ЗаписьВЖурнал);
			ОК = Ложь;
			Прервать;
		КонецПопытки;
	КонецЦикла;
	
	Если лСообщать И лСозданоКаталогов>0 Тогда
		Если ОК Тогда
			СообщитьПодробно("Каталоги на ФТП созданы", СтатусСообщения.Обычное, Истина, ЗаписьВЖурнал);
		Иначе
			СообщитьПодробно("Нет каталогов на ФТП", СтатусСообщения.Важное, Истина, ЗаписьВЖурнал);
		КонецЕсли;
	КонецЕсли;
	
	Если ОК И лСозданоКаталогов=0 Тогда // каталоги уже были, выполняем тест записи
		Если лСообщать Тогда
			СообщитьПодробно("Проверяем доступ на запись", СтатусСообщения.Обычное, Истина, ЗаписьВЖурнал);
		КонецЕсли;
		лИмяФайла = КаталогВременныхФайлов()+"mobicom"+Формат(ТекущаяДата(),"ДФ=yyyyMMddHHmmss")+".ftp";
		ОК = ЗначениеВФайл(лИмяФайла, лИмяФайла);
		Если ОК Тогда
			Попытка
				FTPСоед.УстановитьТекущийКаталог(ВременныйКаталогФТП);
				ОК = ?(FTPСоед.ТекущийКаталог() = ВременныйКаталогФТП, Истина, Ложь);
				FTPСоед.Записать(лИмяФайла, "test.ftp");
				Если лСообщать Тогда
					СообщитьПодробно("Проверка записи пройдена", СтатусСообщения.Обычное, Истина, ЗаписьВЖурнал);
				КонецЕсли;
				УдалитьФайлы(лИмяФайла);
			    FTPСоед.Удалить(ВременныйКаталогФТП + "test.ftp");
			Исключение
				Если лСообщать Тогда
					СообщитьПодробно(ОписаниеОшибки(), СтатусСообщения.Важное, Истина, ЗаписьВЖурнал);
				КонецЕсли;
				ОК = Ложь;
			КонецПопытки;
		ИначеЕсли лСообщать Тогда
			СообщитьПодробно("Ошибка подготовки временного файла", СтатусСообщения.Важное, Истина, ЗаписьВЖурнал);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОК;
КонецФункции	

Функция ОтправитьФТП(лОбработаноОбъектов=0) Экспорт
	
	ц = 1;
	Пока ц <= 3 Цикл
		FTPСоед = ПодключитьФТП();
		Если FTPСоед=Неопределено Тогда
			ОК = Ложь;
		Иначе
			ОК = Истина; 
		КонецЕсли;
		
		Если ОК Тогда
			Прервать;
		КонецЕсли;	
		ц = ц + 1;
	КонецЦикла;
	
	Если (НЕ ОК) Тогда
		СообщитьПодробно("Нет соединения с ФТП !", СтатусСообщения.Важное, Истина, ЗаписьВЖурнал);
	    Возврат Ложь;
	КонецЕсли;
	
	КаталогОтправки = КаталогОбмена + "client\";
	
	ОК = СуществуетФайл(КаталогОтправки);
	
	Если ОК Тогда
		Попытка
			FTPСоед.УстановитьТекущийКаталог(ВременныйКаталогФТП);
			ОК = ?(FTPСоед.ТекущийКаталог() = ВременныйКаталогФТП, Истина, Ложь);
		Исключение
			СообщитьПодробно(ОписаниеОшибки(), СтатусСообщения.Важное, Истина, ЗаписьВЖурнал);
			ОК = Ложь;
		КонецПопытки
	КонецЕсли;	
		
	темпКаталог = КаталогВременныхФайлов();
	Если ОК Тогда
		МассивФайлов = НайтиФайлы(КаталогОтправки, "*.xml");
		
		Для Каждого Файл Из МассивФайлов Цикл
			КопироватьФайл(Файл.ПолноеИмя, темпКаталог + Файл.Имя);
			ЗипФайл = СжатьФайл(Файл.Имя, темпКаталог);
			
			Если ЗипФайл = "" Тогда
			Иначе	
				лОК = Истина;
				Попытка
					FTPСоед.Записать(ЗипФайл, СтрЗаменить(Файл.Имя,".xml",".1c")); // СтрЗаменить(СтрЗаменить(Файл.ПолноеИмя,".xml",".zip"), "\", "/")
					FTPСоед.Переместить(СтрЗаменить(Файл.Имя,".xml",".1c"), КаталогОтправкиФТП + СтрЗаменить(Файл.Имя,".xml",".xml.zip"));
					УдалитьФайлы(ЗипФайл);
				Исключение
					СообщитьПодробно(ОписаниеОшибки(), СтатусСообщения.Внимание, Истина, ЗаписьВЖурнал);
					лОК = Ложь;
				КонецПопытки;
				Если лОК Тогда
					Попытка
						//ПереместитьФайл(Файл.ПолноеИмя, Файл.ПолноеИмя+".old");
						УдалитьФайлы(Файл.ПолноеИмя);
						СообщитьПодробно(Файл.Имя + " отправлен на ФТП", СтатусСообщения.Обычное, Истина, ЗаписьВЖурнал);
					Исключение
						СообщитьПодробно(ОписаниеОшибки(), СтатусСообщения.Важное, Истина, ЗаписьВЖурнал);
					КонецПопытки;
				КонецЕсли;	
			КонецЕсли;	
		КонецЦикла;
		//Если МассивФайлов.Количество()>0 И лОбработаноОбъектов>0 Тогда
		//	УведомитьОблако();
		//КонецЕсли;
        Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции	

Функция ПолучитьФТП() Экспорт
	
	ц = 1;
	Пока ц <= 3 Цикл
		FTPСоед = ПодключитьФТП();
		Если FTPСоед=Неопределено Тогда
			ОК = Ложь;
		Иначе
			ОК = Истина; 
		КонецЕсли;
		
		Если ОК Тогда
			Прервать;
		КонецЕсли;	
		ц = ц + 1;
	КонецЦикла;
	
	Если (НЕ ОК) Тогда
		СообщитьПодробно("Нет соединения с ФТП !", СтатусСообщения.Важное, Истина, ЗаписьВЖурнал);
	    Возврат Ложь;
	КонецЕсли;
	
	КаталогПриема = КаталогОбмена + "server\";
	СоздатьНесуществующиеПодкаталоги(КаталогПриема);
	ОК = СуществуетФайл(КаталогПриема);
	
	Если ОК Тогда
		Попытка
			FTPСоед.УстановитьТекущийКаталог(ВременныйКаталогФТП);
			ОК = ?(FTPСоед.ТекущийКаталог() = ВременныйКаталогФТП, Истина, Ложь);
		Исключение
			СообщитьПодробно(ОписаниеОшибки(), СтатусСообщения.Важное, Истина, ЗаписьВЖурнал);
			ОК = Ложь;
		КонецПопытки;
	КонецЕсли;	
		
	темпКаталог = КаталогВременныхФайлов();
	Если ОК Тогда
		
		Попытка
			МассивФайлов = FTPСоед.НайтиФайлы(КаталогПриемаФТП, "*.zip");
		Исключение
			СообщитьПодробно(ОписаниеОшибки(), СтатусСообщения.Важное, Истина, ЗаписьВЖурнал);
			МассивФайлов = Новый Массив;
		КонецПопытки;
			
		Для Каждого Файл Из МассивФайлов Цикл
			лОК = Истина;
			Попытка
				FTPСоед.Переместить(КаталогПриемаФТП + Файл.Имя, СтрЗаменить(Файл.Имя,".zip",".1c"));
				FTPСоед.Получить(СтрЗаменить(Файл.Имя,".zip",".1c"), темпКаталог + Файл.Имя); // СтрЗаменить(КаталогПриема, "\", "/") + "/" + Файл.Имя
				РазжатьФайл(темпКаталог + Файл.Имя, темпКаталог); // СтрЗаменить(КаталогПриема, "\", "/") + "/" + Файл.Имя
				ПереместитьФайл(темпКаталог + СтрЗаменить(Файл.Имя,".zip",""), КаталогПриема + СтрЗаменить(Файл.Имя,".zip",""));
			Исключение
				СообщитьПодробно(ОписаниеОшибки(), СтатусСообщения.Важное, Истина, ЗаписьВЖурнал);
				лОК = Ложь;
			КонецПопытки;
			Если лОК Тогда
				Попытка
					лФайл = СтрЗаменить(Файл.Имя,".xml.zip",".xml");
				    FTPСоед.Удалить(ВременныйКаталогФТП + СтрЗаменить(Файл.Имя,".zip",".1c"));
					СообщитьПодробно(лФайл + " принят с ФТП", СтатусСообщения.Обычное, Истина, ЗаписьВЖурнал);
				Исключение
					СообщитьПодробно(ОписаниеОшибки(), СтатусСообщения.Важное, Истина, ЗаписьВЖурнал);
				КонецПопытки;
			КонецЕсли;	
		КонецЦикла;	
        Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;	

КонецФункции	

Функция СжатьФайл(пИмяФайла, пПуть)
	
	СообщитьПодробно("Сжатие файла """+пИмяФайла+""""+"...", СтатусСообщения.Обычное, Ложь, Ложь);
	флОК = 1;
	
	Попытка
		ВремяНачалаСжатия = ТекущаяДата();
		ПолноеИмяФайла = пПуть + ?(Прав(пПуть, 1) = "\", "", "\") + пИмяФайла;
		ИмяZipФайла       = ?(Прав(пИмяФайла, 4)=".xml",Сред(пИмяФайла,1,СтрДлина(пИмяФайла)-4),пИмяФайла)+".zip";
		ПолноеИмяZipФайла = пПуть + ?(Прав(пПуть, 1) = "\", "", "\") + ИмяZipФайла;
		
		ZipФайл = Новый ЗаписьZipФайла(ПолноеИмяZipФайла,,,
			МетодСжатияZIP.Сжатие,УровеньСжатияZIP.Максимальный,МетодШифрованияZIP.AES256);
		ZipФайл.Добавить(ПолноеИмяФайла, РежимСохраненияПутейZIP.НеСохранятьПути,РежимОбработкиПодкаталоговZIP.НеОбрабатывать);
		ZipФайл.Записать();
		
		УдалитьФайлы(ПолноеИмяФайла);
		
		СообщитьПодробно("Завершено сжатие файла в ZIP-архив = """+ИмяZipФайла+""""+" "+Строка(ТекущаяДата()-ВремяНачалаСжатия)+"с.", СтатусСообщения.Обычное, Ложь, Ложь);
		//Сообщить ("Завершено сжатие файла в ZIP-архив = """+ИмяZipФайла+""""+" "+Строка(ТекущаяДата()-ВремяНачалаСжатия)+"с.");
	Исключение
		флОК = 0;
		СообщитьПодробно("Ошибка сжатия файла: " + пИмяФайла, СтатусСообщения.Важное, Истина, ЗаписьВЖурнал);
		СообщитьПодробно(ОписаниеОшибки(), СтатусСообщения.Важное, Истина, ЗаписьВЖурнал);
	КонецПопытки;
	
	Если флОК = 1 Тогда
		Возврат ПолноеИмяZipФайла;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции // СжатьФайл()

Функция РазжатьФайл(пИмяФайла, пПуть)
	
	ИмяZipФайла = пИмяФайла;
	АдресОбмена = пПуть;
	
	флОК = 1;
	
	Попытка
		ВремяНачалаСжатия = ТекущаяДата();
		
		ZipФайл = Новый ЧтениеZipФайла(ИмяZipФайла);
		ZipФайл.ИзвлечьВсе(АдресОбмена,РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
		ZipФайл.Закрыть();
		УдалитьФайлы(ИмяZipФайла);

		СообщитьПодробно("Завершена распаковка ZIP-файла = """+ИмяZipФайла+""""+" "+Строка(ТекущаяДата()-ВремяНачалаСжатия)+"с.", СтатусСообщения.Обычное, Ложь, Ложь);
	Исключение
		флОК = 0;
		СообщитьПодробно("Ошибка распаковки файла: " + ИмяZipФайла, СтатусСообщения.Важное, Истина, ЗаписьВЖурнал);
		СообщитьПодробно(ОписаниеОшибки(), СтатусСообщения.Важное, Истина, ЗаписьВЖурнал);
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;

КонецФункции // РазжатьФайл()

Функция XMLЗначение_(Тип_, Строка_)
	Если Тип_=Тип("Дата") Тогда
		// отрезаем таймзону
		лЗначение = XMLЗначение(Тип_, Сред(Строка_, 1, 19));
	Иначе
		лЗначение = XMLЗначение(Тип_, Строка_);
	КонецЕсли;
	Возврат лЗначение;
КонецФункции


//****************************************
Функция УстановитьБлокировку() Экспорт
	Если АвтообменПользователь.Пустая() Тогда
		Сообщить("Укажите пользователя для автоматического обмена", СтатусСообщения.Внимание);
		Возврат Ложь;
	Иначе
		оПользовательАвтообмена = АвтообменПользователь.ПолучитьОбъект();
		Попытка
			оПользовательАвтообмена.Заблокировать();
			Возврат Истина;
		Исключение
			СообщитьПодробно("Обработка запущена в другом сеансе", СтатусСообщения.Внимание, Истина, Ложь);
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
КонецФункции

Функция СнятьБлокировку() Экспорт
	Если НЕ АвтообменПользователь.Пустая() Тогда
		оПользовательАвтообмена = АвтообменПользователь.ПолучитьОбъект();
		оПользовательАвтообмена.Разблокировать();
	Иначе
		Сообщить("Вы не должны видеть это сообщение [СнятьБлокировку, ПользовательАвтообмена.Пустая()]");
	КонецЕсли;
	Возврат Истина;
КонецФункции


//****************************************
Функция ПолучитьТипXMLБиблиотеки() 
	лТипXMLБиблиотеки = "";
	лСЗнТипыXML	= Новый СписокЗначений();
	лСЗнТипыXML.Добавить("MSXML2.DOMDocument.4.0");
	лСЗнТипыXML.Добавить("MSXML2.DOMDocument");
	
	Для Каждого лТипXMLБиблиотеки Из лСЗнТипыXML Цикл
		Попытка
			пФайлXML	= ПолучитьCOMОбъект("", лТипXMLБиблиотеки);
			node = пФайлXML.CreateProcessingInstruction("xml", "version='1.0' encoding='utf-8'");
			пФайлXML.preserveWhiteSpace = 1;
			пФайлXML.AppendChild(node);
		Исключение
			Продолжить;
		КонецПопытки;
		Прервать;
	КонецЦикла;
	
	Возврат лТипXMLБиблиотеки;
КонецФункции

Функция ДобавитьРаздел(лРаздел, лИмя, лПолный, лКоммент)
  	object	= ФайлXML.CreateElement(лРаздел);  
	object.setAttribute("name", лИмя);
	object.setAttribute("complete", лПолный);
	object.setAttribute("comment", лКоммент);
	Возврат object;
КонецФункции

Функция ДобавитьОбъект() 
	//мКолвоОбъектов	= мКолвоОбъектов + 1;
	object	= ФайлXML.CreateElement("object");
	КоличествоОбъектов = КоличествоОбъектов+1;
	Возврат object;
КонецФункции

Процедура ДобавитьСвойство(лЭлемент, лИмя, лЗначение)
	
	Если (лЗначение=0 И ТипЗнч(лЗначение)=Тип("Число")) ИЛИ лЗначение=Дата(1,1,1) Тогда
	//Если лЗначение=0 ИЛИ лЗначение=Дата(1,1,1) Тогда
		лЗначение = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(лИмя) И (лЗначение=Неопределено ИЛИ лЗначение=NULL ИЛИ ЗначениеЗаполнено(лЗначение)) Тогда
		лСвойство = ФайлXML.CreateElement("property");
		лСвойство.setAttribute("name", XMLСтрока(лИмя));
		Если ТипЗнч(лЗначение) = Тип("Булево") Тогда
			лТип = "boolean";
		ИначеЕсли ТипЗнч(лЗначение) = Тип("Число") Тогда
			лТип = "float";
		ИначеЕсли ТипЗнч(лЗначение) = Тип("Дата") Тогда
			лТип = "datetime";
		ИначеЕсли ТипЗнч(лЗначение) = Тип("Строка") Тогда
			лТип = "string";
		ИначеЕсли лЗначение=Неопределено ИЛИ лЗначение=NULL Тогда
			лТип = "null";
		Иначе
			лТип = "string";
		КонецЕсли;	
		лСсылка = ФайлXML.CreateElement(лТип);
		Если лТип <> "null" Тогда
			лСсылка.text = XMLСтрока(лЗначение);
		КонецЕсли;
		лСвойство.AppendChild(лСсылка);
		лЭлемент.AppendChild(лСвойство);
	КонецЕсли;	

КонецПроцедуры	

Процедура ДобавитьСпрСвойство(лРодитель, лСвИмя, лСсИмя, лЗначение)
	
	Если ЗначениеЗаполнено(лСвИмя) И ЗначениеЗаполнено(лЗначение) И ЗначениеЗаполнено(лСсИмя) Тогда
		лСвойство = ФайлXML.CreateElement("property");
	    лСвойство.setAttribute("name", XMLСтрока(лСвИмя));
	 	лСсылка = ФайлXML.CreateElement("link");
	 	лСсылка.setAttribute("reference", XMLСтрока(лСсИмя));
	   	лСсылка.setAttribute("sid", XMLСтрока(лЗначение));
		лСвойство.AppendChild(лСсылка);
		лРодитель.AppendChild(лСвойство);
	КонецЕсли;	

КонецПроцедуры

Функция ПолучитьДопАтрибут(лХМЛ, object, sid, attribute, лТип, БандлОбработанныеОбъекты)
	//// пример использования
	//лАтрибут = ПолучитьДопАтрибут(ДокXML, лИмяРаздела, sid, "ВетСправка", ТипЗнч(лОбъект.НужнаВетСправка), БандлОбработанныеОбъекты);
	//Если НЕ лАтрибут=Неопределено Тогда
	//	лОбъект.НужнаВетСправка = лАтрибут;
	//КонецЕсли;
	
	ХМЛВыражение = "//reference[@name='ref_attributevalues']/object[property[@name='object' and link[@reference='"+object+"' and @sid='"+sid+"']] and property[@name='attribute' and link[@reference='ref_attributes' and @did='"+attribute+"']]]/property[@name='value']";
	node = лХМЛ.documentElement.selectSingleNode(ХМЛВыражение);
	Если node=Неопределено Тогда
		лЗначение = Неопределено;
	Иначе
		Если node.firstChild.nodeName="link" Тогда
			psid = node.firstChild.getAttribute("did");
			//pref = node.firstChild.getAttribute("reference");
			//элТЗЭ = ТипыЗначенийЭлементов.НайтиПоЗначению(pref);
			лЗначение = XMLЗначение_(лТип, psid);
		ИначеЕсли node.firstChild.nodeName="null" Тогда
			//пустой реквизит
			лЗначение = Неопределено;
		Иначе
			лЗначение = XMLЗначение_(лТип, СокрЛП(node.firstChild.text));
		КонецЕсли;
		ЗаписатьОбъектБандла("ref_attributevalues", node.parentNode.getAttribute("sid"), БандлОбработанныеОбъекты);
	КонецЕсли;
	Возврат лЗначение;
КонецФункции


//****************************************
Функция ПодобратьМакет()
	// ищем клиентские настройки
	Для каждого лМакет из ЭтотОбъект.Метаданные().Макеты Цикл
		Если лМакет.Синоним = "Текущий" Тогда
			Возврат лМакет.Имя;
		КонецЕсли;
	КонецЦикла;
	
	// ищем макет под текущую конфигурацию
	лИмяМакета = Неопределено;
	Для каждого лМакет из ЭтотОбъект.Метаданные().Макеты Цикл
		Если лМакет.Синоним = Метаданные.КраткаяИнформация или "Управление производственным предприятием, редакция 1.3" = лМакет.Синоним Тогда
			лИмяМакета = лМакет.Имя;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат лИмяМакета;
КонецФункции

Функция ПолучитьТипОбъекта(лТипОбъекта)
	лЗначение = "Х";
	Если лТипОбъекта="С" Тогда
		лЗначение = "СправочникСсылка";
	ИначеЕсли лТипОбъекта="Д" Тогда
		лЗначение = "ДокументСсылка";
	ИначеЕсли лТипОбъекта="Р" Тогда
		лЗначение = "РегистрСведенийМенеджер";
	ИначеЕсли лТипОбъекта="Х" Тогда
		лЗначение = "ПланВидовХарактеристикСсылка";
	КонецЕсли;
	
	Возврат лЗначение;
КонецФункции

Функция СобратьТипыЗначенийЭлементов()
	ТипыЗначенийЭлементов = Новый СписокЗначений;
	
	// ищем макет с настройками
	лИмяМакета = ПодобратьМакет();
	Если лИмяМакета=Неопределено Тогда
		Сообщить("Не удалось определить макет с настройками");
		Возврат ТипыЗначенийЭлементов;
	КонецЕсли;
	лТаблица	= ПолучитьМакет(лИмяМакета);
	
	лОбласть	= лТаблица.ПолучитьОбласть("ОбъектыВыгрузки");
	лВысота		= лОбласть.ВысотаТаблицы;
	Для р = 1 По лВысота Цикл
		лИмяРаздела	= СокрЛП(лОбласть.Область(р, 1, р, 1).Текст);
		лНаименование	= СокрЛП(лОбласть.Область(р, 2, р, 2).Текст);
		лОтключено	= СокрЛП(лОбласть.Область(р, 3, р, 3).Текст);
		лЗамещение	= СокрЛП(лОбласть.Область(р, 4, р, 4).Текст);
		лТабЧасть	= СокрЛП(лОбласть.Область(р, 5, р, 5).Текст);
		лТЧСвязка	= СокрЛП(лОбласть.Область(р, 6, р, 6).Текст);
		лВидЗначения	= СокрЛП(лОбласть.Область(р, 7, р, 7).Текст);
		лТипОбъекта	= СокрЛП(лОбласть.Область(р, 8, р, 8).Текст); // Д/С/Р/Х
		
		Если ТипыЗначенийЭлементов.НайтиПоЗначению(лИмяРаздела)=Неопределено И лВидЗначения<>"" Тогда
			Если Сред(лВидЗначения,1,1)="*" Тогда
				лВидЗначения_ = Сред(лВидЗначения,2);
			Иначе
				лВидЗначения_ = лВидЗначения;
			КонецЕсли;
			ТипыЗначенийЭлементов.Добавить(лИмяРаздела, ПолучитьТипОбъекта(лТипОбъекта)+"."+лВидЗначения_);
		КонецЕсли;
	КонецЦикла;
	
	лОбласть	= лТаблица.ПолучитьОбласть("ОбъектыЗагрузки");
	лВысота		= лОбласть.ВысотаТаблицы;
	Для р = 1 По лВысота Цикл
		лИмяРаздела	= СокрЛП(лОбласть.Область(р, 1, р, 1).Текст);
		лНаименование	= СокрЛП(лОбласть.Область(р, 2, р, 2).Текст);
		лОтключено	= СокрЛП(лОбласть.Область(р, 3, р, 3).Текст);
		лЗамещение	= СокрЛП(лОбласть.Область(р, 4, р, 4).Текст);
		лТабЧасть	= СокрЛП(лОбласть.Область(р, 5, р, 5).Текст);
		лТЧСвязка	= СокрЛП(лОбласть.Область(р, 6, р, 6).Текст);
		лВидЗначения	= СокрЛП(лОбласть.Область(р, 7, р, 7).Текст);
		лТипОбъекта	= СокрЛП(лОбласть.Область(р, 8, р, 8).Текст); // Д/С/Р/Х
		
		Если ТипыЗначенийЭлементов.НайтиПоЗначению(лИмяРаздела)=Неопределено И лВидЗначения<>"" Тогда
			Если Сред(лВидЗначения,1,1)="*" Тогда
				лВидЗначения_ = Сред(лВидЗначения,2);
			Иначе
				лВидЗначения_ = лВидЗначения;
			КонецЕсли;
			ТипыЗначенийЭлементов.Добавить(лИмяРаздела, ПолучитьТипОбъекта(лТипОбъекта)+"."+лВидЗначения_);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТипыЗначенийЭлементов;
КонецФункции

Процедура ПолучитьДанныеСеанса()
	СоединениеНомер = НомерСоединенияИнформационнойБазы();
	//СеансПользователь = "---";
	//СеансНомер = -1;
	Попытка
		Для Каждого Сеанс Из ПолучитьСеансыИнформационнойБазы() Цикл
			Если Сеанс.НомерСоединения=СоединениеНомер Тогда
				СеансПользователь = Сеанс.Пользователь.Имя;
				СеансНомер = Сеанс.НомерСеанса;
			КонецЕсли;
		КонецЦикла;
	Исключение
		СообщитьПодробно(ОписаниеОшибки(), СтатусСообщения.Внимание, Истина, ЗаписьВЖурнал);
	КонецПопытки;
	//Сообщить("["+Формат(СоединениеНомер,"ЧГ=0")+"] ["+СеансПользователь+"] ["+Формат(СеансНомер,"ЧГ=0")+"]");
КонецПроцедуры

Процедура НастройкиЗагрузить(ОбъектыВыгрузки, ОбъектыЗагрузки, Заголовок) Экспорт
	// определяем файл настроек
	лПолноеИмяОбработки = ИспользуемоеИмяФайла;
	//лПолноеИмяОбработки = "\\server\mobicom\mobicom82.epf";
	
	лФайл = Новый Файл(лПолноеИмяОбработки);
	лПуть = лФайл.Путь;
	//лПолноеИмяНастроек = лПуть + "Settings.dat";
	темпКаталог = КаталогВременныхФайлов();
	
	Если Найти(лПолноеИмяОбработки,темпКаталог)=0 И НЕ ЭтоАдресВременногоХранилища(СтрЗаменить(лПолноеИмяОбработки,"\","/")) Тогда
		лПолноеИмяНастроек = лПуть + "Settings.dat";
	Иначе
		лПуть = ХранилищеОбщихНастроек.Загрузить("КаталогФайловОбменаМТ", "КаталогФайловОбменаМТ", "");
		//Сообщить(лПуть);
		Если ЗначениеЗаполнено(КаталогОбмена) Тогда
			// интерактивно изменен каталог
			лПолноеИмяНастроек = КаталогОбмена + "Settings.dat";
		ИначеЕсли ЗначениеЗаполнено(лПуть) Тогда
			лПолноеИмяНастроек = лПуть + "Settings.dat";
		Иначе
			Сообщить("Путь к настройкам не определен");
			лПолноеИмяНастроек = "#";
		//	Возврат;
		КонецЕсли;
	КонецЕсли;
	Сообщить(лПолноеИмяНастроек);
	
	// считываем настройки
	лФайл = Новый Файл(лПолноеИмяНастроек);
	Если лФайл.Существует() Тогда
		лНастройки = ЗначениеИзФайла(лПолноеИмяНастроек);
	Иначе
		// возможно не до конца прошло переименование файла
		лПолноеИмяНастроек = лПолноеИмяНастроек+".tmp";
		лФайл = Новый Файл(лПолноеИмяНастроек);
		Если лФайл.Существует() Тогда
			Сообщить("Восстанавливаем настройки из временного файла");
			лНастройки = ЗначениеИзФайла(лПолноеИмяНастроек);
		Иначе
			Если ЗначениеЗаполнено(КаталогОбмена) Тогда
				// интерактивно изменен каталог. не сбрасываем настройки, если файла нет
				Возврат;
			КонецЕсли;
			лНастройки = Новый Структура();
		КонецЕсли;
	КонецЕсли;
	
	// заполняем основные реквизиты
	Если НЕ лНастройки.Свойство("ФТПИспользовать",ФТПИспользовать) Тогда
		ФТПИспользовать = Ложь;
	КонецЕсли;
	Если НЕ лНастройки.Свойство("ФТПСервер",ФТПСервер) Тогда
		ФТПСервер = "ftp.st-mobi.com";
	КонецЕсли;
	Если НЕ лНастройки.Свойство("ФТППорт",ФТППорт) Тогда
		ФТППорт = 21;
	КонецЕсли;
	Если НЕ лНастройки.Свойство("ФТПТаймаут",ФТПТаймаут) Тогда
		ФТПТаймаут = 30;
	КонецЕсли;
	Если НЕ лНастройки.Свойство("ФТППользователь",ФТППользователь) Тогда
		ФТППользователь = "укажите имя пользователя";
	КонецЕсли;
	Если НЕ лНастройки.Свойство("ФТППароль",ФТППароль) Тогда
		ФТППароль = "укажите пароль пользователя";
	КонецЕсли;
	
	Если НЕ лНастройки.Свойство("ПроксиИспользовать",ПроксиИспользовать) Тогда
		ПроксиИспользовать = Ложь;
	КонецЕсли;
	Если НЕ лНастройки.Свойство("ПроксиСервер",ПроксиСервер) Тогда
		ПроксиСервер = "proxy.server";
	КонецЕсли;
	Если НЕ лНастройки.Свойство("ПроксиПорт",ПроксиПорт) Тогда
		ПроксиПорт = 3180;
	КонецЕсли;
	Если НЕ лНастройки.Свойство("ПроксиПользователь",ПроксиПользователь) Тогда
		ПроксиПользователь = "укажите имя пользователя";
	КонецЕсли;
	Если НЕ лНастройки.Свойство("ПроксиПароль",ПроксиПароль) Тогда
		ПроксиПароль = "укажите пароль пользователя";
	КонецЕсли;
	
	Если НЕ лНастройки.Свойство("АвтообменПользователь",АвтообменПользователь) Тогда
		//ПользовательАвтообмена = Неопределено;
	КонецЕсли;
	Если НЕ лНастройки.Свойство("АвтообменИспользовать",АвтообменИспользовать) Тогда
		АвтообменИспользовать = Ложь;
	КонецЕсли;
	Если НЕ лНастройки.Свойство("АвтообменПериод",АвтообменПериод) Тогда
		АвтообменПериод = 300;
	КонецЕсли;
	
	Если НЕ лНастройки.Свойство("ГлубинаВыгрузкиДанных",ГлубинаВыгрузкиДанных) Тогда
		ГлубинаВыгрузкиДанных = 30;
	КонецЕсли;
	Если НЕ лНастройки.Свойство("СрокХраненияДанных",СрокХраненияДанных) Тогда
		СрокХраненияДанных = 10;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(КаталогОбмена) Тогда
		// считываем только первый раз при открытии обработки
		Если НЕ лНастройки.Свойство("КаталогОбмена",КаталогОбмена) Тогда
			КаталогОбмена = лПуть;
		КонецЕсли;
	КонецЕсли;
	Если НЕ Прав(КаталогОбмена,1)="\" Тогда
		КаталогОбмена = КаталогОбмена+"\";
	КонецЕсли;
	ХранилищеОбщихНастроек.Сохранить("КаталогФайловОбменаМТ", "КаталогФайловОбменаМТ", КаталогОбмена);
	
	лНастройки.Свойство("ДП01_Описание",ДП01_Описание);
	лНастройки.Свойство("ДП01_Значение",ДП01_Значение);
	лНастройки.Свойство("ДП02_Описание",ДП02_Описание);
	лНастройки.Свойство("ДП02_Значение",ДП02_Значение);
	лНастройки.Свойство("ДП03_Описание",ДП03_Описание);
	лНастройки.Свойство("ДП03_Значение",ДП03_Значение);
	лНастройки.Свойство("ДП04_Описание",ДП04_Описание);
	лНастройки.Свойство("ДП04_Значение",ДП04_Значение);
	лНастройки.Свойство("ДП05_Описание",ДП05_Описание);
	лНастройки.Свойство("ДП05_Значение",ДП05_Значение);
	лНастройки.Свойство("ДП06_Описание",ДП06_Описание);
	лНастройки.Свойство("ДП06_Значение",ДП06_Значение);
	Если НЕ ЗначениеЗаполнено(ДП01_Описание) Тогда ДП01_Описание=""; КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ДП02_Описание) Тогда ДП02_Описание=""; КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ДП03_Описание) Тогда ДП03_Описание=""; КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ДП04_Описание) Тогда ДП04_Описание=""; КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ДП05_Описание) Тогда ДП05_Описание=""; КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ДП06_Описание) Тогда ДП06_Описание=""; КонецЕсли;
	
	// ищем макет с настройками
	лИмяМакета = ПодобратьМакет();
	Если лИмяМакета=Неопределено Тогда
		Сообщить("Не удалось определить макет с настройками");
		Возврат;
	КонецЕсли;
	// заполняем объекты
	лТаблица	= ПолучитьМакет(лИмяМакета);
	
	лОбласть	= лТаблица.ПолучитьОбласть("Версия");
	лВысота		= лОбласть.ВысотаТаблицы;
	лВерсия = Новый Структура;
	Для р = 1 По лВысота Цикл
		лВерсия.Вставить(лОбласть.Область(р, 1, р, 1).Текст, лОбласть.Область(р, 2, р, 2).Текст);
	КонецЦикла;
	Заголовок = ""+лВерсия.Дистрибьютор+" ["+лВерсия.Компания+"] v"+лВерсия.Версия;
	
	лОбласть	= лТаблица.ПолучитьОбласть("ОбъектыВыгрузки");
	лВысота		= лОбласть.ВысотаТаблицы;
	ОбъектыВыгрузки.Очистить();
	Для р = 1 По лВысота Цикл
		лИмяРаздела	= СокрЛП(лОбласть.Область(р, 1, р, 1).Текст);
		лНаименование	= СокрЛП(лОбласть.Область(р, 2, р, 2).Текст);
		лОтключено	= СокрЛП(лОбласть.Область(р, 3, р, 3).Текст);
		лЗамещение	= СокрЛП(лОбласть.Область(р, 4, р, 4).Текст);
		лТабЧасть	= СокрЛП(лОбласть.Область(р, 5, р, 5).Текст);
		лТЧСвязка	= СокрЛП(лОбласть.Область(р, 6, р, 6).Текст);
		лВидЗначения	= СокрЛП(лОбласть.Область(р, 7, р, 7).Текст);
		лТипОбъекта	= СокрЛП(лОбласть.Область(р, 8, р, 8).Текст); // Д/С/Р
		
		Если НЕ лОтключено="" Тогда
			Продолжить;
		КонецЕсли;
		
		стр = ОбъектыВыгрузки.Добавить();
		
		Если НЕ лНастройки.Свойство("out_"+лИмяРаздела+"_Использовать",стр.Использовать) Тогда
			стр.Использовать = Истина;
		КонецЕсли;
		стр.ИмяРаздела	= лИмяРаздела;
		стр.Наименование	= лНаименование;
		стр.Замещение	= лЗамещение;
		стр.ТабЧасть	= лТабЧасть;
		стр.ТЧСвязка	= лТЧСвязка;
		стр.ВидЗначения	= лВидЗначения;
		Если стр.ВидЗначения="" ИЛИ Лев(стр.ВидЗначения,1)="*" Тогда
			стр.Отбор.Добавить("Х");
			стр.Исключение.Добавить("Х");
		Иначе
			Если НЕ лНастройки.Свойство("out_"+лИмяРаздела+"_Отбор",стр.Отбор) Тогда
				стр.Отбор.Добавить(ПустоеЗначениеОтбора);
			КонецЕсли;
			Если стр.Отбор.Количество()=0 Тогда
				стр.Отбор.Добавить(ПустоеЗначениеОтбора);
			КонецЕсли;
			Если НЕ лНастройки.Свойство("out_"+лИмяРаздела+"_Исключение",стр.Исключение) Тогда
				стр.Исключение.Добавить(ПустоеЗначениеОтбора);
			КонецЕсли;
			Если стр.Исключение.Количество()=0 Тогда
				стр.Исключение.Добавить(ПустоеЗначениеОтбора);
			КонецЕсли;
		КонецЕсли;
		Если НЕ лНастройки.Свойство("out_"+лИмяРаздела+"_Периодичность",стр.Периодичность) Тогда
			стр.Периодичность = 3600;
		КонецЕсли;
		Если НЕ лНастройки.Свойство("out_"+лИмяРаздела+"_ПоследнийОбмен",стр.ПоследнийОбмен) Тогда
			стр.ПоследнийОбмен = ТекущаяДата()-100;
		КонецЕсли;
	КонецЦикла;
	
	лОбласть	= лТаблица.ПолучитьОбласть("ОбъектыЗагрузки");
	лВысота		= лОбласть.ВысотаТаблицы;
	ОбъектыЗагрузки.Очистить();
	Для р = 1 По лВысота Цикл
		лИмяРаздела	= СокрЛП(лОбласть.Область(р, 1, р, 1).Текст);
		лНаименование	= СокрЛП(лОбласть.Область(р, 2, р, 2).Текст);
		лОтключено	= СокрЛП(лОбласть.Область(р, 3, р, 3).Текст);
		лЗамещение	= СокрЛП(лОбласть.Область(р, 4, р, 4).Текст);
		лТабЧасть	= СокрЛП(лОбласть.Область(р, 5, р, 5).Текст);
		лТЧСвязка	= СокрЛП(лОбласть.Область(р, 6, р, 6).Текст);
		лВидЗначения	= СокрЛП(лОбласть.Область(р, 7, р, 7).Текст);
		лТипОбъекта	= СокрЛП(лОбласть.Область(р, 8, р, 8).Текст); // Д/С/Р
		
		Если НЕ лОтключено="" Тогда
			Продолжить;
		КонецЕсли;
		
		стр = ОбъектыЗагрузки.Добавить();
		
		Если НЕ лНастройки.Свойство("in_"+лИмяРаздела+"_Использовать",стр.Использовать) Тогда
			стр.Использовать = Истина;
		КонецЕсли;
		стр.ИмяРаздела	= лИмяРаздела;
		стр.Наименование	= лНаименование;
		//стр.Замещение	= лЗамещение;
		стр.ТабЧасть	= лТабЧасть;
		стр.ТЧСвязка	= лТЧСвязка;
		стр.ВидЗначения	= лВидЗначения;
		//Если стр.ВидЗначения="" ИЛИ Лев(стр.ВидЗначения,1)="*" Тогда
		//	стр.Отбор.Добавить("Х");
		//Иначе
		//	Если НЕ лНастройки.Свойство("in_"+лИмяРаздела+"_Отбор",стр.Отбор) Тогда
		//		стр.Отбор.Добавить(ПустоеЗначениеОтбора);
		//	КонецЕсли;
		//КонецЕсли;
		стр.ТипОбъекта	= лТипОбъекта;
		Если НЕ лНастройки.Свойство("in_"+лИмяРаздела+"_Периодичность",стр.Периодичность) Тогда
			стр.Периодичность = 300;
		КонецЕсли;
		Если НЕ лНастройки.Свойство("in_"+лИмяРаздела+"_ПоследнийОбмен",стр.ПоследнийОбмен) Тогда
			стр.ПоследнийОбмен = ТекущаяДата()-100;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура НастройкиСохранить(ОбъектыВыгрузки, ОбъектыЗагрузки) Экспорт
	// определяем файл настроек
	лПолноеИмяОбработки = ИспользуемоеИмяФайла;
	//лПолноеИмяОбработки = "\\server\mobicom\mobicom82.epf";
	
	лФайл = Новый Файл(лПолноеИмяОбработки);
	лПуть = лФайл.Путь;
	//лПолноеИмяНастроек = лПуть + "Settings.dat";
	темпКаталог = КаталогВременныхФайлов();
	
	Если Найти(лПолноеИмяОбработки,темпКаталог)=0 И НЕ ЭтоАдресВременногоХранилища(СтрЗаменить(лПолноеИмяОбработки,"\","/")) Тогда
		лПолноеИмяНастроек = лПуть + "Settings.dat";
	Иначе
		лПуть = ХранилищеОбщихНастроек.Загрузить("КаталогФайловОбменаМТ", "КаталогФайловОбменаМТ", "");
		//Сообщить(лПуть);
		Если ЗначениеЗаполнено(КаталогОбмена) Тогда
			лПолноеИмяНастроек = КаталогОбмена + "Settings.dat";
		ИначеЕсли ЗначениеЗаполнено(лПуть) Тогда
			лПолноеИмяНастроек = лПуть + "Settings.dat";
		Иначе
			Сообщить("Путь к настройкам не определен");
			лПолноеИмяНастроек = "#";
			Возврат;
		КонецЕсли;
	КонецЕсли;
	Сообщить(лПолноеИмяНастроек);
	
	// заполняем структуру сохраняемых объектов
	лНастройки = Новый Структура();
	
	// основные реквизиты
	лНастройки.Вставить("ФТПИспользовать",ФТПИспользовать);
	лНастройки.Вставить("ФТПСервер",ФТПСервер);
	лНастройки.Вставить("ФТППорт",ФТППорт);
	лНастройки.Вставить("ФТПТаймаут",ФТПТаймаут);
	лНастройки.Вставить("ФТППользователь",ФТППользователь);
	лНастройки.Вставить("ФТППароль",ФТППароль);
	
	лНастройки.Вставить("ПроксиИспользовать",ПроксиИспользовать);
	лНастройки.Вставить("ПроксиСервер",ПроксиСервер);
	лНастройки.Вставить("ПроксиПорт",ПроксиПорт);
	лНастройки.Вставить("ПроксиПользователь",ПроксиПользователь);
	лНастройки.Вставить("ПроксиПароль",ПроксиПароль);
	
	лНастройки.Вставить("АвтообменПользователь",АвтообменПользователь);
	лНастройки.Вставить("АвтообменИспользовать",АвтообменИспользовать);
	лНастройки.Вставить("АвтообменПериод",АвтообменПериод);
	
	лНастройки.Вставить("ГлубинаВыгрузкиДанных",ГлубинаВыгрузкиДанных);
	лНастройки.Вставить("СрокХраненияДанных",СрокХраненияДанных);
	
	лНастройки.Вставить("КаталогОбмена",КаталогОбмена);
	ХранилищеОбщихНастроек.Сохранить("КаталогФайловОбменаМТ", "КаталогФайловОбменаМТ", КаталогОбмена);
	
	лНастройки.Вставить("ДП01_Описание",ДП01_Описание);
	лНастройки.Вставить("ДП01_Значение",ДП01_Значение);
	лНастройки.Вставить("ДП02_Описание",ДП02_Описание);
	лНастройки.Вставить("ДП02_Значение",ДП02_Значение);
	лНастройки.Вставить("ДП03_Описание",ДП03_Описание);
	лНастройки.Вставить("ДП03_Значение",ДП03_Значение);
	лНастройки.Вставить("ДП04_Описание",ДП04_Описание);
	лНастройки.Вставить("ДП04_Значение",ДП04_Значение);
	лНастройки.Вставить("ДП05_Описание",ДП05_Описание);
	лНастройки.Вставить("ДП05_Значение",ДП05_Значение);
	лНастройки.Вставить("ДП06_Описание",ДП06_Описание);
	лНастройки.Вставить("ДП06_Значение",ДП06_Значение);
	
	// объекты
	Для Каждого стр Из ОбъектыВыгрузки Цикл
		лНастройки.Вставить("out_"+стр.ИмяРаздела+"_Использовать",стр.Использовать);
		//сп = стр.Отбор;
		Если ЭтоПустойСписок(стр.Отбор) Тогда
			лНастройки.Вставить("out_"+стр.ИмяРаздела+"_Отбор",Новый СписокЗначений);
		Иначе
			лНастройки.Вставить("out_"+стр.ИмяРаздела+"_Отбор",стр.Отбор);
		КонецЕсли;
		Если ЭтоПустойСписок(стр.Исключение) Тогда
			лНастройки.Вставить("out_"+стр.ИмяРаздела+"_Исключение",Новый СписокЗначений);
		Иначе
			лНастройки.Вставить("out_"+стр.ИмяРаздела+"_Исключение",стр.Исключение);
		КонецЕсли;
		лНастройки.Вставить("out_"+стр.ИмяРаздела+"_Периодичность",стр.Периодичность);
		лНастройки.Вставить("out_"+стр.ИмяРаздела+"_ПоследнийОбмен",стр.ПоследнийОбмен);
	КонецЦикла;
	
	Для Каждого стр Из ОбъектыЗагрузки Цикл
		лНастройки.Вставить("in_"+стр.ИмяРаздела+"_Использовать",стр.Использовать);
		//сп = стр.Отбор;
		//Если ЭтоПустойСписок(стр.Отбор) Тогда
		//	лНастройки.Вставить("in_"+стр.ИмяРаздела+"_Отбор",Новый СписокЗначений);
		//Иначе
		//	лНастройки.Вставить("in_"+стр.ИмяРаздела+"_Отбор",стр.Отбор);
		//КонецЕсли;
		лНастройки.Вставить("in_"+стр.ИмяРаздела+"_Периодичность",стр.Периодичность);
		лНастройки.Вставить("in_"+стр.ИмяРаздела+"_ПоследнийОбмен",стр.ПоследнийОбмен);
	КонецЦикла;
	
	Для Инд=1 По 3 Цикл
		Попытка
			// сохраняем настройки
			Если НЕ ЗначениеВФайл(лПолноеИмяНастроек+".tmp", лНастройки) Тогда
				СообщитьПодробно("Не удалось сохранить настройки", СтатусСообщения.Внимание, Истина, ЗаписьВЖурнал);
				Продолжить;
			КонецЕсли;
			
			// проверяем что сохранение успешно
			тмпНастройки = ЗначениеИзФайла(лПолноеИмяНастроек+".tmp");
			ПереместитьФайл(лПолноеИмяНастроек+".tmp", лПолноеИмяНастроек);
			Прервать;
		Исключение
			СообщитьПодробно("Ошибка проверки сохраненных настроек", СтатусСообщения.Внимание, Истина, ЗаписьВЖурнал);
			СообщитьПодробно(ОписаниеОшибки(), СтатусСообщения.Внимание, Истина, ЗаписьВЖурнал);
		КонецПопытки;
	КонецЦикла
КонецПроцедуры


//****************************************
Функция ЗагрузитьПринятыеОбъекты(лИмяФайла="ObjectsIn.xml")
	лДокИмя = КаталогОбмена + лИмяФайла;
	
	лХМЛ = Новый COMОбъект(мТипXMLБиблиотеки);
	
	лДокументы=Новый ТаблицаЗначений();
	лДокументы.Колонки.Добавить("sid"); // id 1С
	лДокументы.Колонки.Добавить("did"); // id облака
	лДокументы.Колонки.Добавить("type");
	лДокументы.Колонки.Добавить("date");
	
    Попытка
		лХМЛ.Load(лДокИмя);
	Исключение
		СообщитьПодробно("Невозможно прочитать Файл " + лДокИмя, СтатусСообщения.Важное, Истина, ЗаписьВЖурнал);
		СообщитьПодробно(ОписаниеОшибки(), СтатусСообщения.Важное, Истина, ЗаписьВЖурнал);
		Возврат лДокументы;
	КонецПопытки;
	
	objects = лХМЛ.selectNodes("//object");
	Для Каждого object Из objects Цикл
		стр = лДокументы.Добавить();
		стр.sid = object.getAttribute("sid");
		стр.did = object.getAttribute("did");
		стр.type = object.getAttribute("type");
		стр.date = XMLЗначение_(Тип("Дата"),object.getAttribute("date"));
	КонецЦикла;
	
	Возврат лДокументы;
КонецФункции

Функция СохранитьПринятыеОбъекты(лДокументы)
	лДокИмя = КаталогОбмена + "ObjectsIn.xml";
	
	лХМЛ = Новый COMОбъект(мТипXMLБиблиотеки);
	node = лХМЛ.CreateProcessingInstruction("xml", "version='1.0' encoding='utf-8'");
	лХМЛ.preserveWhiteSpace = 1;
	лХМЛ.AppendChild(node);
	objects = лХМЛ.CreateElement("objects");
	
	лДата = ТекущаяДата();
	лКоличество = 0;
	Для Каждого стр Из лДокументы Цикл
		Если лДата-стр.date>СрокХраненияДанных*86400 Тогда Продолжить; КонецЕсли;
		object = лХМЛ.CreateElement("object");
		object.setAttribute("sid", стр.sid);
		object.setAttribute("did", стр.did);
		object.setAttribute("type", стр.type);
		object.setAttribute("date", XMLСтрока(стр.date));
		objects.AppendChild(object);
		лКоличество = лКоличество+1;
	КонецЦикла;
	
	// сохраняем файл
	лХМЛ.AppendChild(objects);
	Для лИнд=1 По 3 Цикл
		лХМЛ.Save(лДокИмя+".tmp");
		тмпДокументы = ЗагрузитьПринятыеОбъекты("ObjectsIn.xml.tmp");
		Если тмпДокументы.Количество()=лКоличество Тогда
			ПереместитьФайл(лДокИмя+".tmp", лДокИмя);
			Возврат тмпДокументы;
		Иначе
			СообщитьПодробно("Ошибка при сохранении списка принятых объектов. Прочитано "+тмпДокументы.Количество()+". Ожидается "+лКоличество, СтатусСообщения.Важное, Истина, ЗаписьВЖурнал);
		КонецЕсли;
	КонецЦикла;
	
	//лДокументы.Очистить();
	Возврат лДокументы;
КонецФункции

Функция УдалитьСтарыеФайлы(лВидОперации)
	Если лВидОперации="Загрузка" Тогда
		МассивФайлов = НайтиФайлы(КаталогОбмена + "server\", "*.old");
		лДатаКонтроля = Формат(ТекущаяДата()-СрокХраненияДанных*86400, "ДФ=yyyyMMdd");
		лКоличество = 0;
		Для Каждого лДок Из МассивФайлов Цикл
			лДатаФайла = Сред(лДок.Имя,1,8);
			Если лДатаФайла<лДатаКонтроля Тогда
				Попытка
					УдалитьФайлы(лДок.ПолноеИмя);
					лКоличество = лКоличество+1;
				Исключение
					СообщитьПодробно(ОписаниеОшибки(), СтатусСообщения.Важное, Истина, ЗаписьВЖурнал);
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
		СообщитьПодробно("Удалено файлов по виду "+лВидОперации+": "+лКоличество, СтатусСообщения.Информация, Истина, ЗаписьВЖурнал);
	КонецЕсли;
КонецФункции


//****************************************//
//    Дополнительные функции (НАЧАЛО)     //
//****************************************//

Функция ПолучитьЕдиницуТовара_10(стр, пОКЕИ)
	пТовар = стр.Номенклатура;
	пКоэффициент = стр.Коэффициент;
	
	Если НЕ ЗначениеЗаполнено(пТовар) Тогда
		Возврат "";
	КонецЕсли;
	
	лЕдиница	= "";
	лСпр		= Справочники.ЕдиницыИзмерения.Выбрать(, пТовар);
	Пока лСпр.Следующий() Цикл
		Если лСпр.ПометкаУдаления Тогда
			Продолжить;
		КонецЕсли;
		
		Если лСпр.ЕдиницаПоКлассификатору.Код <> пОКЕИ.Код Тогда
			Продолжить;
		КонецЕсли;
		
		Если лСпр.ЕдиницаПоКлассификатору.Код = пТовар.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору.Код Тогда
			Если лСпр.Коэффициент <> 1 Тогда
				Продолжить; // с такими данными МТ работать корректно не будет
			КонецЕсли;
		КонецЕсли;
		
		Если лСпр.Коэффициент <> пКоэффициент Тогда
			Продолжить;
		КонецЕсли;
		
		лЕдиница	= лСпр.Ссылка;
		Прервать;
	КонецЦикла;
	
	// случай, когда единицу измерения не удалось определить - по невысяненым причинам
	Если лЕдиница = "" Тогда
		// еще раз пробегаем по справочнику и берем базовую, но уже без ограничения по коэффициенту
		лСпр		= Справочники.ЕдиницыИзмерения.Выбрать(, пТовар);
		Пока лСпр.Следующий() Цикл
			Если лСпр.ПометкаУдаления Тогда
				Продолжить;
			КонецЕсли;
			
			Если лСпр.ЕдиницаПоКлассификатору.Код = пТовар.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору.Код Тогда
				лЕдиница	= лСпр.Ссылка;
				
				Если лЕдиница.Коэффициент = 1 Тогда
					Прервать;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;	
	
	Возврат лЕдиница;
	
КонецФункции	//ПолучитьЕдиницуТовара()

Процедура ПолучитьСписокДляВыбораУпаковок_11(Номенклатура, ДанныеВыбора, ДобавлятьПустуюУпаковку, Конф="11.1")

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СпрНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ПРЕДСТАВЛЕНИЕ(СпрНоменклатура.ЕдиницаИзмерения) КАК ЕдиницаИзмеренияПредставление,
	|	ЕСТЬNULL(СпрУпаковки.Ссылка, НЕОПРЕДЕЛЕНО) КАК Упаковка,
	|	ПРЕДСТАВЛЕНИЕ(СпрУпаковки.Ссылка) КАК УпаковкаПредставление,
	|	ЕСТЬNULL(СпрУпаковки.ЕдиницаИзмерения, НЕОПРЕДЕЛЕНО) КАК ЕдиницаИзмеренияУпаковки,
	|	ЕСТЬNULL(СпрУпаковки.ЕдиницаИзмерения.Представление, """") КАК ЕдиницаИзмеренияУпаковкиПредставление,
	|	ЕСТЬNULL(СпрУпаковки.Коэффициент, 0) КАК Коэффициент
	|ИЗ
	|	Справочник.Номенклатура КАК СпрНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиНоменклатуры КАК СпрУпаковки
	|		ПО (СпрУпаковки.Владелец = ВЫБОР
	|				КОГДА СпрНоменклатура.НаборУпаковок = ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры)
	|					ТОГДА СпрНоменклатура.Ссылка
	|				КОГДА СпрНоменклатура.НаборУпаковок <> ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ПустаяСсылка)
	|					ТОГДА СпрНоменклатура.НаборУпаковок
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ)
	|   		И НЕ СпрУпаковки.ПометкаУдаления
	|
	|ГДЕ
	|	СпрНоменклатура.Ссылка = &Номенклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	Коэффициент,
	|	ЕдиницаИзмеренияУпаковкиПредставление";
	
	Если Конф="11.2" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СпрУпаковки.Коэффициент", "СпрУпаковки.Числитель / СпрУпаковки.Знаменатель");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Справочник.УпаковкиНоменклатуры", "Справочник.УпаковкиЕдиницыИзмерения");
	КонецЕсли;

	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);

	Выборка = Запрос.Выполнить().Выбрать();
	
	ЕстьУпаковкаХранения = Ложь;
	ЕдиницаХраненияПредставление = "";
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Коэффициент = 1
			И Выборка.ЕдиницаИзмеренияУпаковки = Выборка.ЕдиницаИзмерения Тогда
			ЕстьУпаковкаХранения = Истина;
		КонецЕсли;
		
		ЕдиницаХраненияПредставление = Выборка.ЕдиницаИзмеренияПредставление; 
		
		Если Выборка.Упаковка <> Неопределено Тогда
			ДанныеВыбора.Добавить(Выборка.Упаковка, Выборка.УпаковкаПредставление);
		КонецЕсли;
		
	КонецЦикла;

	Если ДобавлятьПустуюУпаковку
		И Не ЕстьУпаковкаХранения Тогда
		лКоманда = СтрЗаменить("ДанныеВыбора.Вставить(0,Справочники.УпаковкиНоменклатуры.ПустаяСсылка(), ЕдиницаХраненияПредставление);",
			"Справочники.УпаковкиНоменклатуры",
			?(Конф="11.2", "Справочники.УпаковкиЕдиницыИзмерения", "Справочники.УпаковкиНоменклатуры"));
		Выполнить(лКоманда);
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьЕдиницуТовара_11(стр, пОКЕИ, пКоэффициент, Конф="11.1")
	пТовар = стр.Номенклатура;
	// получаем список всех упаковок товара
	ДанныеВыбора = Новый СписокЗначений;
	ПолучитьСписокДляВыбораУпаковок_11(пТовар, ДанныеВыбора, Истина, Конф);
	
	//лЕдиница = Справочники.УпаковкиНоменклатуры.ПустаяСсылка();
	// ищем упаковку по переданному ОКЕИ
	Для сч = 0 По ДанныеВыбора.Количество()-1 Цикл
		лЕдиница = ДанныеВыбора.Получить(сч);
		Если лЕдиница.Значение.ЕдиницаИзмерения = пОКЕИ Тогда
			Возврат лЕдиница.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДанныеВыбора[0];
КонецФункции

Функция ПолучитьОснованиеДляПКО(кодДокОсн, ссылкаДосОсн="", ТипыЗначенийЭлементов="")
	лДокОснование = "";
	
	Если ЗначениеЗаполнено(ссылкаДосОсн) Тогда
		psid = ссылкаДосОсн;
		pref = "doc_invoices";
		элТЗЭ = ТипыЗначенийЭлементов.НайтиПоЗначению(pref);
		Если элТЗЭ=Неопределено Тогда
			СообщитьПодробно("Неопределен тип для ["+pref+"]", СтатусСообщения.Внимание, Истина, ЗаписьВЖурнал);
		Иначе
			Попытка
				лДокОснование = XMLЗначение_(Тип(элТЗЭ.Представление), psid);
				Если НЕ ЗначениеЗаполнено(лДокОснование.Дата) Тогда
					лДокОснование = Неопределено;
				КонецЕсли;
			Исключение
				СообщитьПодробно(ОписаниеОшибки(), СтатусСообщения.Внимание, Истина, ЗаписьВЖурнал);
			КонецПопытки;
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(кодДокОсн) Тогда
		ИмяМета = "";
		НомерДока = "";
		ДатаДока = "";
		
		лНомСимДок = Найти(кодДокОсн, " №"); 
		лДатСимДок = Найти(кодДокОсн, " от "); 
		
		Если лНомСимДок > 0 тогда
			ИмяМета = Лев(кодДокОсн, лНомСимДок - 1);  
		КонецЕсли;
		
		Если лДатСимДок > 0 тогда
			НомерДока = Сред(кодДокОсн, лНомСимДок +2, лДатСимДок - лНомСимДок-2 );  
			ДатаДока = Прав(кодДокОсн, СтрДлина(кодДокОсн) - лДатСимДок - 3);
		КонецЕсли;
		Попытка
			лДокОснование = Документы[ИмяМета].НайтиПоНомеру(НомерДока, Дата(ДатаДока));
		Исключение
			СообщитьПодробно(ОписаниеОшибки(), СтатусСообщения.Внимание, Истина, ЗаписьВЖурнал);
		КонецПопытки;
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(лДокОснование) Тогда
		лДокОснование = "";
	КонецЕсли;
	
	Возврат	лДокОснование;
КонецФункции

Процедура ОбработатьПодчиненныхПартнеров_11(тРодители, тДети, лПоискТТ, лКонтрагент)
	мстр = тДети.НайтиСтроки(лПоискТТ);
	Если мстр.Количество()=0 Тогда Возврат; КонецЕсли;
	Для Каждого стрПартнерПотомок Из мстр Цикл
		//стрПартнерПотомок.ВладелецТТ = лВладелецТТ;
		стр = тРодители.Добавить();
		ЗаполнитьЗначенияСвойств(стр,стрПартнерПотомок); //,"Ссылка,Адрес,Телефон"
		стр.Покупатель = лКонтрагент;
		
		лПоискТТ_ = лПоискТТ;
		лПоискТТ_.Вставить("Родитель", стр.Ссылка);
		ОбработатьПодчиненныхПартнеров_11(тРодители, тДети, лПоискТТ_, лКонтрагент)
	КонецЦикла;
КонецПроцедуры

Функция ПолучитьКассу(лОрганизация)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Кассы.Ссылка
	|ИЗ
	|	Справочник.Кассы КАК Кассы
	|ГДЕ
	|	Кассы.Владелец = &Владелец";
	Запрос.УстановитьПараметр("Владелец",лОрганизация);
	тз = Запрос.Выполнить().Выгрузить();
	Если тз.Количество()=0 Тогда
		Возврат Справочники.Кассы.ПустаяСсылка();
	Иначе
		Возврат тз[0].Ссылка;
	КонецЕсли;
КонецФункции

Функция ПолучитьСотрудника(лФизЛицо)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Пользователи.Ссылка
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.ФизическоеЛицо = &ФизическоеЛицо";
	Запрос.УстановитьПараметр("ФизическоеЛицо",лФизЛицо);
	тз = Запрос.Выполнить().Выгрузить();
	Если тз.Количество()=0 Тогда
		Возврат Справочники.Пользователи.ПустаяСсылка();
	Иначе
		Возврат тз[0].Ссылка;
	КонецЕсли;
КонецФункции

Функция ВыгрузитьФото(лХранилище, лИдентификатор)
	Если ХТТПЗапрос=Неопределено Тогда // для 1С 8.1
		лХранилище.Получить().ПолучитьДвоичныеДанные().Записать(КаталогОбмена+"images\"+лИдентификатор);
		Возврат 1;
	КонецЕсли;
	
	ХТТПЗапрос.АдресРесурса="/api/image/"+лИдентификатор;
	лДанные = лХранилище.Получить();
	Если ТипЗнч(лДанные)=Тип("Картинка") Тогда
		лДанные = лДанные.ПолучитьДвоичныеДанные();
	ИначеЕсли ТипЗнч(лДанные)=Тип("ДвоичныеДанные") Тогда
	Иначе
		Возврат 0;
	КонецЕсли;
	лРазмер = лДанные.Размер();
	ХТТПЗапрос.УстановитьТелоИзДвоичныхДанных(лДанные);
	
	Попытка
		лОтвет = ХТТПСоединение.Записать(ХТТПЗапрос); //PUT, Перезаписать фотографию
	Исключение
		СообщитьПодробно(ОписаниеОшибки(), СтатусСообщения.Важное, Истина, Ложь);
		Возврат 0;
	КонецПопытки;
	лРезультат = 0;
	Если лОтвет.КодСостояния=200 Тогда // конфликтов нет и сохранение прошло успешно
		лРезультат = лРазмер;
		СообщитьПодробно("Обновлено фото "+лИдентификатор, СтатусСообщения.Обычное, Истина, Ложь);
	ИначеЕсли лОтвет.КодСостояния=404 Тогда // перезаписываемый файл не существует
		лОтвет = ХТТПСоединение.ОтправитьДляОбработки(ХТТПЗапрос); // POST, Сохранить фотографию
		Если лОтвет.КодСостояния=201 Тогда // конфликтов нет и сохранение прошло успешно
			лРезультат = лРазмер*2;
			СообщитьПодробно("Выгружено фото "+лИдентификатор, СтатусСообщения.Обычное, Истина, Ложь);
		ИначеЕсли лОтвет.КодСостояния=409 Тогда // файл с таким именем уже существует и отличается от сохраняемого
			// быть такого не должно
			СообщитьПодробно("WTF?? POST Ошибка "+лОтвет.КодСостояния+" выгрузки фотографии "+лИдентификатор, СтатусСообщения.ОченьВажное, Истина, Ложь);
			СообщитьПодробно(лОтвет.ПолучитьТелоКакСтроку(), СтатусСообщения.Важное, Истина, Ложь);
		ИначеЕсли лОтвет.КодСостояния=500 Тогда // внутренняя ошибка сервера
			СообщитьПодробно("POST Ошибка "+лОтвет.КодСостояния+" выгрузки фотографии "+лИдентификатор, СтатусСообщения.Важное, Истина, Ложь);
			//СообщитьПодробно(лОтвет.ПолучитьТелоКакСтроку(), СтатусСообщения.Важное, Истина, Ложь);
		КонецЕсли;
	ИначеЕсли лОтвет.КодСостояния=409 Тогда // перезаписываемый файл идентичен
		лРезультат = лРазмер;
		СообщитьПодробно("Идентичное фото "+лИдентификатор, СтатусСообщения.Обычное, Истина, Ложь);
	Иначе
		СообщитьПодробно("PUT Ошибка "+лОтвет.КодСостояния+" выгрузки фотографии "+лИдентификатор, СтатусСообщения.Важное, Истина, Ложь);
		//СообщитьПодробно(лОтвет.ПолучитьТелоКакСтроку(), СтатусСообщения.Важное, Истина, Ложь);
	КонецЕсли;
		
	Возврат лРезультат;
КонецФункции

Функция ПоследниеРеквизитыДоставкиИзЗаданий_11(Получатель = Неопределено, Перевозчик = Неопределено)
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЗаданиеНаПеревозкуРаспоряжения.НомерСтроки,
		|	ЗаданиеНаПеревозкуРаспоряжения.Ссылка.Дата,
		|	ЗаданиеНаПеревозкуРаспоряжения.КлючСвязи,
		|	ЗаданиеНаПеревозкуРаспоряжения.ВремяС,
		|	ЗаданиеНаПеревозкуРаспоряжения.ВремяПо,
		|	ЗаданиеНаПеревозкуРаспоряжения.ДополнительнаяИнформация,
		|	ЗаданиеНаПеревозкуМаршрут.АдресДоставки,
		|	ЗаданиеНаПеревозкуМаршрут.АдресДоставкиЗначенияПолей
		|ПОМЕСТИТЬ ВТ_ЗаданиеНаПеревозкуСтроки
		|ИЗ
		|	Документ.ЗаданиеНаПеревозку.Распоряжения КАК ЗаданиеНаПеревозкуРаспоряжения
		|		ВНУТРЕННеЕ СОЕДИНеНИЕ Документ.ЗаданиеНаПеревозку.Маршрут КАК ЗаданиеНаПеревозкуМаршрут
		|		ПО (ЗаданиеНаПеревозкуМаршрут.КлючСвязи = ЗаданиеНаПеревозкуРаспоряжения.КлючСвязи)
		|ГДЕ
		|	ЗаданиеНаПеревозкуРаспоряжения.Ссылка.Проведен
		|	И (ЗаданиеНаПеревозкуРаспоряжения.Получатель = &Получатель
		|			Или &Получатель = НеОПРЕДЕЛЕНО)
		|	И (ЗаданиеНаПеревозкуРаспоряжения.Перевозчик = &Перевозчик
		|			Или &Перевозчик = НеОПРЕДЕЛЕНО
		|				И ЗаданиеНаПеревозкуРаспоряжения.Перевозчик = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 3
		|	ВТ_ЗаданиеНаПеревозкуСтроки.АдресДоставки КАК АдресДоставки,
		|	МАКСИМУМ(ВТ_ЗаданиеНаПеревозкуСтроки.Дата) КАК Дата
		|ПОМЕСТИТЬ ВТ_ПоследниеАдреса
		|ИЗ
		|	ВТ_ЗаданиеНаПеревозкуСтроки КАК ВТ_ЗаданиеНаПеревозкуСтроки
		|ГДЕ
		|	ВТ_ЗаданиеНаПеревозкуСтроки.АдресДоставки <> """"
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ЗаданиеНаПеревозкуСтроки.АдресДоставки
		|
		|УПОРЯДОЧИТЬ ПО
		|	МАКСИМУМ(ВТ_ЗаданиеНаПеревозкуСтроки.Дата) УБЫВ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ПоследниеАдреса.АдресДоставки,
		|	ЗаданиеНаПеревозкуМаршрут.ЗонаДоставки,
		|	ЗаданиеНаПеревозкуМаршрут.Ссылка.Дата
		|ПОМЕСТИТЬ ВТ_МаршрутыСНужнымиАдресами
		|ИЗ
		|	ВТ_ПоследниеАдреса КАК ВТ_ПоследниеАдреса
		|		ВНУТРЕННеЕ СОЕДИНеНИЕ Документ.ЗаданиеНаПеревозку.Маршрут КАК ЗаданиеНаПеревозкуМаршрут
		|		ПО ВТ_ПоследниеАдреса.АдресДоставки = ЗаданиеНаПеревозкуМаршрут.АдресДоставки
		|ГДЕ
		|	ЗаданиеНаПеревозкуМаршрут.Ссылка.Проведен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ПоследниеАдреса.АдресДоставки,
		|	МАКСИМУМ(ВТ_МаршрутыСНужнымиАдресами.Дата) КАК Дата
		|ПОМЕСТИТЬ ВТ_ДатыПоследнихЗонПоАдресам
		|ИЗ
		|	ВТ_ПоследниеАдреса КАК ВТ_ПоследниеАдреса
		|		ВНУТРЕННеЕ СОЕДИНеНИЕ ВТ_МаршрутыСНужнымиАдресами КАК ВТ_МаршрутыСНужнымиАдресами
		|		ПО ВТ_ПоследниеАдреса.АдресДоставки = ВТ_МаршрутыСНужнымиАдресами.АдресДоставки
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ПоследниеАдреса.АдресДоставки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ВТ_МаршрутыСНужнымиАдресами.ЗонаДоставки) КАК ЗонаДоставки,
		|	ВТ_ДатыПоследнихЗонПоАдресам.АдресДоставки
		|ПОМЕСТИТЬ ВТ_ПоследниеЗоныПоАдресам
		|ИЗ
		|	ВТ_МаршрутыСНужнымиАдресами КАК ВТ_МаршрутыСНужнымиАдресами
		|		ВНУТРЕННеЕ СОЕДИНеНИЕ ВТ_ДатыПоследнихЗонПоАдресам КАК ВТ_ДатыПоследнихЗонПоАдресам
		|		ПО (ВТ_ДатыПоследнихЗонПоАдресам.АдресДоставки = ВТ_МаршрутыСНужнымиАдресами.АдресДоставки)
		|			И (ВТ_ДатыПоследнихЗонПоАдресам.Дата = ВТ_МаршрутыСНужнымиАдресами.Дата)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ДатыПоследнихЗонПоАдресам.АдресДоставки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ПоследниеАдреса.АдресДоставки,
		|	МАКСИМУМ(ВТ_ЗаданиеНаПеревозкуСтроки.КлючСвязи) КАК КлючСвязи
		|ПОМЕСТИТЬ ВТ_ПоследниеАдресаКлючиСвязи
		|ИЗ
		|	ВТ_ПоследниеАдреса КАК ВТ_ПоследниеАдреса
		|		ВНУТРЕННеЕ СОЕДИНеНИЕ ВТ_ЗаданиеНаПеревозкуСтроки КАК ВТ_ЗаданиеНаПеревозкуСтроки
		|		ПО (ВТ_ЗаданиеНаПеревозкуСтроки.АдресДоставки = ВТ_ПоследниеАдреса.АдресДоставки)
		|			И (ВТ_ЗаданиеНаПеревозкуСтроки.Дата = ВТ_ПоследниеАдреса.Дата)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ПоследниеАдреса.АдресДоставки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ПоследниеАдресаКлючиСвязи.КлючСвязи,
		|	МАКСИМУМ(ВТ_ЗаданиеНаПеревозкуСтроки.НомерСтроки) КАК НомерСтроки
		|ПОМЕСТИТЬ ВТ_ПоследниеАдресаКлючиСвязиНомераСтрок
		|ИЗ
		|	ВТ_ПоследниеАдресаКлючиСвязи КАК ВТ_ПоследниеАдресаКлючиСвязи
		|		ВНУТРЕННеЕ СОЕДИНеНИЕ ВТ_ЗаданиеНаПеревозкуСтроки КАК ВТ_ЗаданиеНаПеревозкуСтроки
		|		ПО (ВТ_ЗаданиеНаПеревозкуСтроки.КлючСвязи = ВТ_ПоследниеАдресаКлючиСвязи.КлючСвязи)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ПоследниеАдресаКлючиСвязи.АдресДоставки,
		|	ВТ_ПоследниеАдресаКлючиСвязи.КлючСвязи
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ЗаданиеНаПеревозкуСтроки.АдресДоставки,
		|	ВТ_ЗаданиеНаПеревозкуСтроки.АдресДоставкиЗначенияПолей,
		|	ВТ_ПоследниеЗоныПоАдресам.ЗонаДоставки,
		|	ВТ_ЗаданиеНаПеревозкуСтроки.ВремяС КАК ВремяДоставкиС,
		|	ВТ_ЗаданиеНаПеревозкуСтроки.ВремяПо КАК ВремяДоставкиПо,
		|	ВТ_ЗаданиеНаПеревозкуСтроки.ДополнительнаяИнформация КАК ДополнительнаяИнформацияПоДоставке
		|ИЗ
		|	ВТ_ЗаданиеНаПеревозкуСтроки КАК ВТ_ЗаданиеНаПеревозкуСтроки
		|		ВНУТРЕННеЕ СОЕДИНеНИЕ ВТ_ПоследниеАдресаКлючиСвязиНомераСтрок КАК ВТ_ПоследниеАдресаКлючиСвязиНомераСтрок
		|		ПО ВТ_ЗаданиеНаПеревозкуСтроки.КлючСвязи = ВТ_ПоследниеАдресаКлючиСвязиНомераСтрок.КлючСвязи
		|			И ВТ_ЗаданиеНаПеревозкуСтроки.НомерСтроки = ВТ_ПоследниеАдресаКлючиСвязиНомераСтрок.НомерСтроки
		|		ВНУТРЕННеЕ СОЕДИНеНИЕ ВТ_ПоследниеЗоныПоАдресам КАК ВТ_ПоследниеЗоныПоАдресам
		|		ПО (ВТ_ПоследниеЗоныПоАдресам.АдресДоставки = ВТ_ЗаданиеНаПеревозкуСтроки.АдресДоставки)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВТ_ЗаданиеНаПеревозкуСтроки.Дата УБЫВ");
	Запрос.УстановитьПараметр("Получатель", Получатель);
	Запрос.УстановитьПараметр("Перевозчик", Перевозчик);
	Результат = Новый ТаблицаЗначений;
	Выполнить("
		|УстановитьПривилегированныйРежим(Истина);
		|Результат = Запрос.Выполнить().Выгрузить();
		|УстановитьПривилегированныйРежим(Ложь);
		|"); // для 1С 8.1
	Возврат Результат;
КонецФункции

Функция ПолучитьОсновноеПодразделение(лПользователь)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиПользователей.Значение
	|ИЗ
	|	РегистрСведений.НастройкиПользователей КАК НастройкиПользователей
	|ГДЕ
	|	НастройкиПользователей.Пользователь = &Пользователь
	|	И НастройкиПользователей.Настройка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НастройкиПользователей.ОсновноеПодразделение)";
	Запрос.УстановитьПараметр("Пользователь",лПользователь);
	тз = Запрос.Выполнить().Выгрузить();
	Если тз.Количество()=0 Тогда
		Возврат Справочники.Подразделения.ПустаяСсылка();
	Иначе
		Возврат тз[0].Значение;
	КонецЕсли;
КонецФункции

Функция ПолучитьКИ_10(лКонтрагент, лВидАдреса)
	лЗапрос = Новый Запрос;
	лЗапрос.Текст = 
	"ВЫБРАТЬ
	|	КонтактнаяИнформация.Представление
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Вид = &Вид
	|	И КонтактнаяИнформация.Объект = &Объект";
	лЗапрос.УстановитьПараметр("Объект", лКонтрагент);
	лЗапрос.УстановитьПараметр("Вид", лВидАдреса);
	лВыборка = лЗапрос.Выполнить().Выбрать();
	лАдрес = "";
	Если лВыборка.Следующий() Тогда
		лАдрес = лВыборка.Представление;
	КонецЕсли;
	Возврат лАдрес;
КонецФункции

Функция ПолучитьИспользованиеНДС_10(лОрганизация)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА УчетнаяПолитикаОрганизацийСрезПоследних.СистемаНалогообложения = ЗНАЧЕНИЕ(Перечисление.СистемыНалогообложения.Общая)
	|			ТОГДА НЕ УчетнаяПолитикаОрганизацийСрезПоследних.СложныйУчетНДС
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ИспользованиеНДС
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаОрганизаций.СрезПоследних(&ТекущаяДата, Организация = &Организация) КАК УчетнаяПолитикаОрганизацийСрезПоследних";
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Запрос.УстановитьПараметр("Организация", лОрганизация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ИспользованиеНДС = ЛОЖЬ;
	Если Выборка.Следующий() Тогда
		ИспользованиеНДС = Выборка.ИспользованиеНДС;
	КонецЕсли;
	
	Возврат ИспользованиеНДС;
КонецФункции

Функция ПолучитьТекущуюСтрокуСтруктурой_11(ТекущаяСтрока,СтруктураДействий)
// ОбработкаТабличнойЧастиКлиент.ПолучитьТекущуюСтрокуСтруктурой
	Перем СтруктураПараметровДействия;

	СтруктураПолейТЧ = Новый Структура;

	Если СтруктураДействий.Свойство("ПроверитьХарактеристикуПоВладельцу") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("ХарактеристикиИспользуются");
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПроверитьЗаполнитьУпаковкуПоВладельцу") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Упаковка");
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПроверитьСтатьюАналитикуРасходов") Тогда
		СтруктураПолейТЧ.Вставить("ТипНоменклатуры");
		СтруктураПолейТЧ.Вставить("СтатьяРасходов");
		СтруктураПолейТЧ.Вставить("АналитикаРасходов");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоЕдиниц")
		Или СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковок") Тогда
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок", 0);
		СтруктураПолейТЧ.Вставить("Количество", 0);
	КонецЕсли;

	Суффикс = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоЕдиницСуффикс",Суффикс)
		Или СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковокСуффикс",Суффикс) Тогда
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок"+Суффикс, 0);
		СтруктураПолейТЧ.Вставить("Количество"+Суффикс    , 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьЦенуПродажи") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("ВидЦены");
		СтруктураПолейТЧ.Вставить("Цена", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьЦенуПродажиПоАссортименту") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("ВидЦены");
		СтруктураПолейТЧ.Вставить("Цена", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьЦенуЗакупки") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("УсловиеЦеныПоставщика");
		СтруктураПолейТЧ.Вставить("Цена", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьНоменклатуруПоНоменклатуреПоставщика") Тогда
		СтруктураПолейТЧ.Вставить("НоменклатураПоставщика");
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("ХарактеристикиИспользуются");
	КонецЕсли;

	Если СтруктураДействий.Свойство("ЗаполнитьНоменклатуруПоставщикаПоНоменклатуре") Тогда
		СтруктураПолейТЧ.Вставить("НоменклатураПоставщика");
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьСопоставленнуюНоменклатуруПоставщика") Тогда
		СтруктураПолейТЧ.Вставить("НомерСтроки");
		СтруктураПолейТЧ.Вставить("НоменклатураПоставщика");
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСтавкуНДС")
		 ИЛИ СтруктураДействий.Свойство("ЗаполнитьСтавкуНДСПоНоменклатуре") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("СтавкаНДС");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСтавкуНДСВозвратнойТары") Тогда
		СтруктураПолейТЧ.Вставить("ТипНоменклатуры");
		СтруктураПолейТЧ.Вставить("СтавкаНДС");
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПересчитатьСуммуНДС") Тогда
		СтруктураПолейТЧ.Вставить("Сумма"    , 0);
		СтруктураПолейТЧ.Вставить("СтавкаНДС", 0);
		СтруктураПолейТЧ.Вставить("СуммаНДС" , 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСНДС") Тогда
		СтруктураПолейТЧ.Вставить("Сумма"    , 0);
		СтруктураПолейТЧ.Вставить("СуммаНДС" , 0);
		СтруктураПолейТЧ.Вставить("СуммаСНДС", 0);
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПересчитатьСуммуБезНДС") Тогда
		СтруктураПолейТЧ.Вставить("Сумма"    , 0);
		СтруктураПолейТЧ.Вставить("СуммаНДС" , 0);
		СтруктураПолейТЧ.Вставить("СуммаБезНДС", 0);
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПересчитатьСуммуРегл") Тогда
		СтруктураПолейТЧ.Вставить("СуммаРегл"    , 0);
		СтруктураПолейТЧ.Вставить("СуммаБезНДС", 0);
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПересчитатьНДСРегл") Тогда
		СтруктураПолейТЧ.Вставить("СуммаНДС" , 0);
		СтруктураПолейТЧ.Вставить("НДСРегл", 0);
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПересчитатьСумму") Тогда
		СтруктураПолейТЧ.Вставить("Сумма"             , 0);
		СтруктураПолейТЧ.Вставить("Цена"              , 0);
		СтруктураПолейТЧ.Вставить(?(ПустаяСтрока(СтруктураДействий.ПересчитатьСумму),"КоличествоУпаковок",СтруктураДействий.ПересчитатьСумму), 0);
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПересчитатьСуммуСУчетомРучнойСкидки") Тогда
		СтруктураПолейТЧ.Вставить("Сумма"              , 0);
		СтруктураПолейТЧ.Вставить("Количество"         , 0);
		СтруктураПолейТЧ.Вставить("Цена      "         , 0);
		СтруктураПолейТЧ.Вставить("СуммаРучнойСкидки"  , 0);
		СтруктураПолейТЧ.Вставить("ПроцентРучнойСкидки", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСУчетомАвтоматическойСкидки") Тогда
		СтруктураПолейТЧ.Вставить("Сумма"                      , 0);
		СтруктураПолейТЧ.Вставить("СуммаАвтоматическойСкидки"  , 0);
		СтруктураПолейТЧ.Вставить("ПроцентАвтоматическойСкидки", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСУчетомСкидкиБонуснымиБаллами") Тогда
		СтруктураПолейТЧ.Вставить("Сумма"                      , 0);
		СтруктураПолейТЧ.Вставить("СуммаБонусныхБалловКСписаниюВВалюте"  , 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуЗаУпаковку") Тогда
		СтруктураПолейТЧ.Вставить("Цена"      , 0);
		СтруктураПолейТЧ.Вставить("Количество", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуЗаказаЗаУпаковку") Тогда
		СтруктураПолейТЧ.Вставить("ЦенаЗаказа"      , 0);
		СтруктураПолейТЧ.Вставить("Количество", 0);
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПересчитатьСуммуСверхЗаказа") Тогда
		СтруктураПолейТЧ.Вставить("СуммаСНДС" , 0);
		СтруктураПолейТЧ.Вставить("СуммаСверхЗаказа", 0);
		СтруктураПолейТЧ.Вставить("КодСтроки", 1);
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПересчитатьЦенуСкидкуПоСуммеВПродажах") Тогда
		СтруктураПолейТЧ.Вставить("Цена"                       , 0);
		СтруктураПолейТЧ.Вставить("Сумма"                      , 0);
		СтруктураПолейТЧ.Вставить("СуммаАвтоматическойСкидки"  , 0);
		СтруктураПолейТЧ.Вставить("ПроцентАвтоматическойСкидки", 0);
		СтруктураПолейТЧ.Вставить("СуммаРучнойСкидки"          , 0);
		СтруктураПолейТЧ.Вставить("ПроцентРучнойСкидки"        , 0);
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок "        , 0);
		СтруктураПолейТЧ.Вставить("Количество"  			   , 0);
		СтруктураПолейТЧ.Вставить("ВидЦены");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуСкидкуПоСуммеВЗакупках") Тогда
		СтруктураПолейТЧ.Вставить("Цена"                       , 0);
		СтруктураПолейТЧ.Вставить("Сумма"                      , 0);
		СтруктураПолейТЧ.Вставить("СуммаРучнойСкидки"          , 0);
		СтруктураПолейТЧ.Вставить("ПроцентРучнойСкидки"        , 0);
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок "        , 0);
		СтруктураПолейТЧ.Вставить("Количество"   		       , 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковок") Тогда
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокПоДаннымУчета", 0);
		СтруктураПолейТЧ.Вставить("КоличествоПоДаннымУчета"        , 0);
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПроверитьЗаполнитьСклад") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Склад");
		СтруктураПолейТЧ.Вставить("ТипНоменклатуры");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьУсловияПродаж") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("Цена", 0);
		СтруктураПолейТЧ.Вставить("ВидЦены");
		СтруктураПолейТЧ.Вставить("СтавкаНДС");
		СтруктураПолейТЧ.Вставить("СрокПоставки");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьУсловияПродажУслуги") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Цена", 0);
		СтруктураПолейТЧ.Вставить("ВидЦены");
		СтруктураПолейТЧ.Вставить("СтавкаНДС");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьРеквизитыПоНоменклатуре") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("ВестиУчетПоГТД");
		СтруктураПолейТЧ.Вставить("ЭтоУслуга");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакТипНоменклатуры", СтруктураПараметровДействия) 
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакХарактеристикиИспользуются", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакАналитикаРасходовОбязательна", СтруктураПараметровДействия) Тогда
		
		Если Не СтруктураПараметровДействия = Неопределено И СтруктураПараметровДействия.Свойство("ИмяРеквизита") Тогда
			СтруктураПолейТЧ.Вставить(СтруктураПараметровДействия["ИмяРеквизита"]);
		Иначе
			СтруктураПолейТЧ.Вставить("СтатьяРасходов");
		КонецЕсли;
		СтруктураПолейТЧ.Вставить("АналитикаРасходовОбязательна");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакВедетсяУчетПоГТД", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакЭтоУслуга", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("УстановитьАктивность") Тогда
		СтруктураПолейТЧ.Вставить("Активность");
		СтруктураПолейТЧ.Вставить("ИндексКартинки");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьХарактеристикуНекачественногоТовара") 
		ИЛИ СтруктураДействий.Свойство("ЗаполнитьУпаковкуНекачественногоТовара") Тогда
		СтруктураПолейТЧ.Вставить("НоменклатураИсходногоКачества");
		СтруктураПолейТЧ.Вставить("ХарактеристикиИспользуются");
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПроверитьЗаполнитьВариантКомплектацииПоВладельцу") Тогда

		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("ВариантКомплектации");
		СтруктураПолейТЧ.Вставить("ХарактеристикиИспользуются");

	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьФлагРасхождение") Тогда

		СтруктураПолейТЧ.Вставить("Расхождение");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокФакт");
		
	КонецЕсли;

	Если СтруктураДействий.Свойство("ЗаполнитьФлагИзлишекПорча") Тогда

		СтруктураПолейТЧ.Вставить("ИзлишекПорча");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьФлагИзлишекПорча") Тогда

		СтруктураПолейТЧ.Вставить("ИзлишекПорча");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ОчиститьСуммуВзаиморасчетов") Тогда
		
		СтруктураПолейТЧ.Вставить("СуммаВзаиморасчетов");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ОчиститьАвтоматическуюСкидку") Тогда
		
		СтруктураПолейТЧ.Вставить("ПроцентАвтоматическойСкидки");
		СтруктураПолейТЧ.Вставить("СуммаАвтоматическойСкидки");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСодержание") Тогда
		СтруктураПолейТЧ.Вставить("Содержание");
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьДубликатыЗависимыхРеквизитов", СтруктураПараметровДействия) Тогда
		Для Каждого ПолеСтруктуры Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(ПолеСтруктуры.Ключ);
			ЗависимыеРеквизиты = Новый Структура(ПолеСтруктуры.Значение);
			Для Каждого Реквизит Из ЗависимыеРеквизиты Цикл
				СтруктураПолейТЧ.Вставить(Реквизит.Ключ+ПолеСтруктуры.Ключ, 0);
				СтруктураПолейТЧ.Вставить(Реквизит.Ключ, 0);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ОчиститьСуммуВознаграждения") Тогда
		СтруктураПолейТЧ.Вставить("СуммаВознаграждения");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСтатьюАналитикуРасходовПоУмолчанию") Тогда
		СтруктураПолейТЧ.Вставить("СтатьяРасходов");
		СтруктураПолейТЧ.Вставить("АналитикаРасходов");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакВариантОформленияПродажи") Тогда
		СтруктураПолейТЧ.Вставить("ВариантОформленияПродажи");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьФлагиНедоборНеотгружаемыеИзлишкиНедостачи") Тогда
		СтруктураПолейТЧ.Вставить("ЕстьНедобор");
		СтруктураПолейТЧ.Вставить("ЕстьНеотгружаемые");
		СтруктураПолейТЧ.Вставить("ЕстьИзлишки");
		СтруктураПолейТЧ.Вставить("ЕстьНедостачи");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокНеОтгружать");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокВДокументе");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокВДокументеНеотгружаемые");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакПодакцизныйТовар", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоНеОтгружать") Тогда
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокВДокументе");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокНеОтгружать");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокВДокументеНеотгружаемые");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуПродажи") Тогда
		СтруктураПолейТЧ.Вставить("ЦенаПродажи");
		СтруктураПолейТЧ.Вставить("СуммаПродажи");
		СтруктураПолейТЧ.Вставить("СуммаПродажиНДС");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьЗаполнитьОбеспечение") Тогда
		СтруктураПолейТЧ.Вставить("ВариантОбеспечения");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьУчетноеКоличествоНоменклатуры")
	 ИЛИ СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковокПоФакту") Тогда
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокФакт");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокУчет");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьУчетноеКоличествоНоменклатуры") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокФакт");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокУчет");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакНаличияНоменклатурыПродаваемойСовместно") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("ИндексСовместноПродаваемыеТовары");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьОбъемВесУпаковки") Тогда
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("ОбъемУпаковки");
		СтруктураПолейТЧ.Вставить("ВесУпаковки");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьАссортиментСтроки") Тогда
		СтруктураПолейТЧ.Вставить("НомерСтроки");
		СтруктураПолейТЧ.Вставить("Номенклатура");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакБезВозвратнойТары", СтруктураПараметровДействия)  Тогда
		
		СтруктураПолейТЧ.Вставить("ТипНоменклатуры");
		СтруктураПолейТЧ.Вставить("БезВозвратнойТары");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакОтмененоБезВозвратнойТары", СтруктураПараметровДействия)  Тогда
		
		СтруктураПолейТЧ.Вставить("ТипНоменклатуры");
		СтруктураПолейТЧ.Вставить("ОтмененоБезВозвратнойТары");
		СтруктураПолейТЧ.Вставить("Отменено");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакАктивностьБезВозвратнойТары", СтруктураПараметровДействия)  Тогда
		
		СтруктураПолейТЧ.Вставить("ТипНоменклатуры");
		СтруктураПолейТЧ.Вставить("АктивностьБезВозвратнойТары");
		СтруктураПолейТЧ.Вставить("Активность");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакАртикул", СтруктураПараметровДействия) 
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПомещение", СтруктураПараметровДействия)  Тогда
		
		СтруктураПолейТЧ.Вставить("Помещение");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПродавца", СтруктураПараметровДействия)  Тогда
		
		СтруктураПолейТЧ.Вставить("Продавец");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьСериюРассчитатьСтатус",СтруктураПараметровДействия) Тогда
		
		Если СтруктураПараметровДействия.ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий.Количество() = 0 Тогда
			СтруктураПолейТЧ.Вставить("Серия");
			СтруктураПолейТЧ.Вставить("Номенклатура");
			СтруктураПолейТЧ.Вставить("Характеристика");
		
			СтруктураПолейТЧ.Вставить("СтатусУказанияСерий");
		Иначе
			Для Каждого ИмяПоляСтатус из СтруктураПараметровДействия.ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий Цикл
				Суффикс = ""; // модуль только в УТ 11
				Выполнить("Суффикс = НоменклатураКлиентСервер.СуффиксВИмениПоляСтатусУказанияСерий(ИмяПоляСтатус);");
				СтруктураПолейТЧ.Вставить(ИмяПоляСтатус);
				Если ТекущаяСтрока.Свойство("Серия" + Суффикс) Тогда
					СтруктураПолейТЧ.Вставить("Серия" + Суффикс);
					СтруктураПолейТЧ.Вставить("Номенклатура" + Суффикс);
					СтруктураПолейТЧ.Вставить("Характеристика" + Суффикс);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Для Каждого СтрМас из СтруктураПараметровДействия.ПараметрыУказанияСерий.ПоляСвязи Цикл
			СтруктураПолейТЧ.Вставить(СтрМас);
		КонецЦикла;
		
		Если СтруктураПараметровДействия.ПараметрыУказанияСерий.ЭтоЗаказ Тогда
			СтруктураПолейТЧ.Вставить("Отменено");
			СтруктураПолейТЧ.Вставить("ВариантОбеспечения");
		КонецЕсли;
		
		СтруктураПолейТЧ.Вставить("Количество");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПередачуВЭксплуатацию") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("ФизическоеЛицо");
		СтруктураПолейТЧ.Вставить("ПередачаВЭксплуатацию");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьРасхожденияПриемка") Тогда
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокРасхождения");
		СтруктураПолейТЧ.Вставить("СуммаРасхождения");
		СтруктураПолейТЧ.Вставить("СуммаНДСРасхождения");
		СтруктураПолейТЧ.Вставить("СуммаСНДСРасхождения");
		
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокПоДокументу");
		СтруктураПолейТЧ.Вставить("КоличествоПоДокументу");
		СтруктураПолейТЧ.Вставить("СуммаПоДокументу");
		СтруктураПолейТЧ.Вставить("СуммаНДСПоДокументу");
		СтруктураПолейТЧ.Вставить("СуммаСНДСПоДокументу");
		СтруктураПолейТЧ.Вставить("ЕстьРасхождения");
		СтруктураПолейТЧ.Вставить("Действие");
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтруктураПолейТЧ,ТекущаяСтрока);
	
	Возврат СтруктураПолейТЧ;
	
КонецФункции

Функция ЗагрузитьЗначениеАтрибута_10(лОбъект, лПеременные, did, ТипыЗначенийЭлементов, ТаблицаПринятыхОбъектов)
	
	// пример XML
	//<object sid="9058f449-984b-4996-990a-2ddab942145f" version="1" ctime="2015-12-09T16:06:49+02:00" mtime="2015-12-09T16:06:49+02:00">
	//	<property name="deleted">
	//		<boolean>false</boolean>
	//	</property>
	//	<property name="object">
	//		<link reference="doc_preorders" sid="6887df1f-4c2e-439a-ac41-d48fb98d5603"/>
	//	</property>
	//	<property name="value">
	//		<link reference="ref_attributeranges" sid="dc2bfe0d-32ca-4f3b-a859-156845a486bb" did="2a411a01-9e7c-11e5-8295-201a06034cad"/>
	//	</property>
	//	<property name="attribute">
	//		<link reference="ref_attributes" sid="2a9936c9-ad6d-4917-84f1-edacc493d586" did="2a411a00-9e7c-11e5-8295-201a06034cad"/>
	//	</property>
	//</object>

	value_ref = "";
	// является свойство ссылкой или нет?
	Если НЕ лПеременные.Свойство("value_ref", value_ref) Тогда
		//Продолжить;
		лОбъект = Неопределено;
		Возврат 0;
	КонецЕсли;
	Если НЕ value_ref="ref_attributeranges" Тогда
		//Продолжить;
		лОбъект = Неопределено;
		Возврат 0;
	КонецЕсли;
	// возможны доп.проверки на значения attribute и attribute_ref если были виртуальные свойства
	// пока возможна обработка только свойств из ПланВидовХарактеристикСсылка.СвойстваОбъектов с типом "Значения свойств объектов" с заполненным списком ЗначенияСвойства 

	// определяем объект, к которому относится атрибут
	pref = лПеременные.object_ref;
	psid = лПеременные.object_sid;
	элТЗЭ = ТипыЗначенийЭлементов.НайтиПоЗначению(pref);
	Если элТЗЭ=Неопределено Тогда
		СообщитьПодробно("Неопределен тип для ["+pref+"]", СтатусСообщения.Внимание, Истина, ЗаписьВЖурнал);
		//Продолжить;
		лОбъект = Неопределено;
		Возврат 0;
	КонецЕсли;

	стрТПО = ТаблицаПринятыхОбъектов.Найти(psid, "did");
	Если стрТПО=Неопределено Тогда
		СообщитьПодробно("Объект "+psid+" ["+pref+"] не найден в списке загруженных", СтатусСообщения.Внимание, Истина, ЗаписьВЖурнал);
		//Продолжить;
		лОбъект = Неопределено;
		Возврат 0;
	КонецЕсли;
	лОбъектСсылка = XMLЗначение_(Тип(элТЗЭ.Представление), стрТПО.sid);
	did = стрТПО.sid;

	// определяем свойство
	pref = лПеременные.attribute_ref;
	psid = лПеременные.attribute;
	элТЗЭ = ТипыЗначенийЭлементов.НайтиПоЗначению(pref);
	Если элТЗЭ=Неопределено Тогда
		СообщитьПодробно("Неопределен тип для ["+pref+"]", СтатусСообщения.Внимание, Истина, ЗаписьВЖурнал);
		//Продолжить;
		лОбъект = Неопределено;
		Возврат 0;
	КонецЕсли;
	лСвойствоСсылка = XMLЗначение_(Тип(элТЗЭ.Представление), psid);
	did = did+"***"+psid;

	// определяем значение
	pref = лПеременные.value_ref;
	psid = лПеременные.value;
	//СправочникСсылка.ЗначенияСвойствОбъектов
	лЗначениеСсылка = XMLЗначение_(Тип("СправочникСсылка.ЗначенияСвойствОбъектов"), psid);

	лОбъект.Объект = лОбъектСсылка;
	лОбъект.Свойство = лСвойствоСсылка;
	лОбъект.Значение = лЗначениеСсылка;

КонецФункции


Функция тест(лОбъект, лПеременные, лКонстанты, ТипыЗначенийЭлементов)

КонецФункции

//****************************************//
//    Дополнительные функции (КОНЕЦ)      //
//****************************************//


//****************************************
// http://infostart.ru/public/100845/

Функция Из_Число_В_16(Знач Значение)
	Результат = ""; Пока Значение > 0 Цикл Остат = Значение % 16; Значение = (Значение - Остат) / 16; Результат = Сред("0123456789ABCDEF", Остат + 1, 1) + Результат КонецЦикла; Возврат Результат
КонецФункции

Функция ХэшОптимизированный(ИсходныеДанные, Хэш=5381, М=33, Разрядность=18446744073709551616)
	// приведем к строке
	Если ТипЗнч(ИсходныеДанные) = Тип("ДвоичныеДанные") Тогда
		СтрокаДляКодирования = Base64Строка(ИсходныеДанные);
	Иначе
		СтрокаДляКодирования = Строка(ИсходныеДанные);
	КонецЕсли; 
	
	ДлинаБлока = 11;
	НачПозиция = 1;
	ДлинаСтроки = СтрДлина(СтрокаДляКодирования);
	
	// Ресурсоемкий выполняемый код запишем в одну строку из соображений быстродействия:
	Пока НачПозиция <= ДлинаСтроки Цикл СтрокаБлока = Сред(СтрокаДляКодирования, НачПозиция, ДлинаБлока); ДлинаПодстроки = СтрДлина(СтрокаБлока); Если ДлинаПодстроки = ДлинаБлока Тогда Хэш = ((((((((((( Хэш*М + КодСимвола(СтрокаБлока, 1))*М + КодСимвола(СтрокаБлока, 2))*М + КодСимвола(СтрокаБлока, 3))*М + КодСимвола(СтрокаБлока, 4))*М + КодСимвола(СтрокаБлока, 5))*М + КодСимвола(СтрокаБлока, 6))*М + КодСимвола(СтрокаБлока, 7))*М + КодСимвола(СтрокаБлока, 8))*М + КодСимвола(СтрокаБлока, 9))*М + КодСимвола(СтрокаБлока, 10))*М + КодСимвола(СтрокаБлока, 11)) Иначе Для к = 1 По ДлинаПодстроки Цикл Хэш = М * Хэш + КодСимвола(СтрокаБлока, к) КонецЦикла КонецЕсли; Хэш = Хэш % Разрядность; НачПозиция = НачПозиция + ДлинаБлока КонецЦикла; 
	
	Возврат Хэш;
КонецФункции

Функция ПолучитьХэшСтроки(СтрокаХэш)
	Возврат Из_Число_В_16(ХэшОптимизированный(СтрокаХэш));
КонецФункции


//****************************************
Функция ХранилищеПолучитьОбъекты(лИмяРаздела)
	лТЗ = Новый ТаблицаЗначений;
	лТЗ.Колонки.Добавить("Идентификатор");
	лТЗ.Колонки.Добавить("Ссылка");
	лТЗ.Колонки.Добавить("Хэш");
	лТЗ.Колонки.Добавить("БылВПрошломОбмене");
	лТЗ.Колонки.Добавить("БылВТекущемОбмене");
	
	лИмяФайла = КаталогОбмена + "localstorage\"+лИмяРаздела+".dat";
	
	Если НЕ СуществуетФайл(лИмяФайла) Тогда
		Возврат лТЗ;
	Иначе
		Попытка
			ПолученноеЗначение = ЗначениеИзФайла(лИмяФайла);
		Исключение
			СообщитьПодробно("Не удалось прочитать localstorage для "+лИмяРаздела, СтатусСообщения.Внимание, Истина, ЗаписьВЖурнал);
			СообщитьПодробно(ОписаниеОшибки(), СтатусСообщения.Внимание, Истина, ЗаписьВЖурнал);
			Возврат лТЗ;
		КонецПопытки;
		
		Если НЕ ТипЗнч(ПолученноеЗначение)=Тип("ТаблицаЗначений") Тогда
			СообщитьПодробно("Плохой тип localstorage для "+лИмяРаздела, СтатусСообщения.Внимание, Истина, ЗаписьВЖурнал);
			Возврат лТЗ;
		КонецЕсли;
		
		Для Каждого лКолонка Из лТЗ.Колонки Цикл
			// дополняем список колонок загруженной таблицы
			Если НЕ ПолученноеЗначение.Колонки.Найти(лКолонка.Имя) Тогда
				ПолученноеЗначение.Колонки.Добавить(лКолонка.Имя);
			КонецЕсли;
		КонецЦикла;
		ПолученноеЗначение.ЗаполнитьЗначения(0,"БылВТекущемОбмене");
		
		Возврат ПолученноеЗначение;
	КонецЕсли;
КонецФункции

Функция ХранилищеСохранитьОбъекты(лИмяРаздела, лТЗ)
	лИмяФайла = КаталогОбмена + "localstorage\"+лИмяРаздела+".dat";
	
	лТЗ.ЗагрузитьКолонку(лТЗ.ВыгрузитьКолонку("БылВТекущемОбмене"), "БылВПрошломОбмене");
	лТЗ.Колонки.Удалить("БылВТекущемОбмене");
	
	Попытка
		Если ЗначениеВФайл(лИмяФайла, лТЗ) Тогда
		Иначе
			СообщитьПодробно("Не удалось сохранить localstorage для "+лИмяРаздела, СтатусСообщения.Внимание, Истина, ЗаписьВЖурнал);
			Возврат Ложь;
		КонецЕсли;
	Исключение
		СообщитьПодробно("Не удалось сохранить localstorage для "+лИмяРаздела, СтатусСообщения.Внимание, Истина, ЗаписьВЖурнал);
		СообщитьПодробно(ОписаниеОшибки(), СтатусСообщения.Внимание, Истина, ЗаписьВЖурнал);
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
КонецФункции

Процедура ХранилищеДобавитьОбъект(лТЗ, лОбъектСсылка, лОбъектХэш)
	лТЗ.Добавить();
	лТЗ.Идентификатор = XMLСтрока(лОбъектСсылка);
	лТЗ.Ссылка = лОбъектСсылка;
	лТЗ.Хэш = лОбъектХэш;
	лТЗ.БылВПрошломОбмене = 0;
	лТЗ.БылВТекущемОбмене = 1;
КонецПроцедуры


//****************************************
Процедура ОтметитьПодРазделыДляОбработки(лИмяРаздела, лОбъекты, лТаблица)
	лОбласть	= лТаблица.ПолучитьОбласть(лИмяРаздела);
	лВысота		= лОбласть.ВысотаТаблицы;
		
	Для р = 1 По лВысота Цикл
		лОблако = СокрЛП(лОбласть.Область(р, 1, р, 1).Текст);
		лИсточник = СокрЛП(лОбласть.Область(р, 2, р, 2).Текст);
		лСсылка = СокрЛП(лОбласть.Область(р, 3, р, 3).Текст);
		
		Если лИсточник="" ИЛИ Лев(лИсточник,1)="*" Тогда Продолжить; КонецЕсли;
		лОтборПоРеквизиту = ?(лСсылка="",Ложь,?(Лев(лСсылка,1)="*",Ложь,Истина));
		Если Лев(лСсылка,1)="*" Тогда лСсылка=Сред(лСсылка,2); КонецЕсли;
		
		Если лОтборПоРеквизиту Тогда
			Если лИмяРаздела=лСсылка Тогда Продолжить; КонецЕсли;
			стрО = лОбъекты.Найти(лСсылка,"ИмяРаздела");
			Если стрО<>Неопределено Тогда
				стрО.Счетчик = стрО.Счетчик+2;
				ОтметитьПодРазделыДляОбработки(стрО.ИмяРаздела, лОбъекты, лТаблица);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ДополнительноеПодтверждение(лКонстанты, лИмяРаздела, лКод1С, лКодОблака, ТаблицаПринятыхОбъектов)
	лПодтверждения = Неопределено;
	лКонстанты.Свойство("confirm",лПодтверждения);
	Если лПодтверждения=Неопределено Тогда
		лПодтверждения = Новый ТаблицаЗначений;
		лПодтверждения.Колонки.Добавить("reference");
		лПодтверждения.Колонки.Добавить("data");
	КонецЕсли;
	
	стрП = лПодтверждения.Найти(лИмяРаздела,"reference");
	Если стрП=Неопределено Тогда
		лДанные = Новый ТаблицаЗначений;
		лДанные.Колонки.Добавить("sid"); // id 1С
		лДанные.Колонки.Добавить("did"); // id облака
		
		стрП = лПодтверждения.Добавить();
		стрП.reference = лИмяРаздела;
		стрП.data = лДанные;
	Иначе
		лДанные = стрП.data;
	КонецЕсли;
	
	стрД = лДанные.Добавить();
	стрД.sid = XMLСтрока(лКод1С);
	стрД.did = лКодОблака;
	
	// и записываем соответствия в локальное хранилище
	стрТЗД = ТаблицаПринятыхОбъектов.Добавить();
	стрТЗД.sid = стрД.sid;
	стрТЗД.did = стрД.did;
	стрТЗД.type = лИмяРаздела;
	стрТЗД.date = ТекущаяДата();
	
	лКонстанты.Вставить("confirm",лПодтверждения);
КонецПроцедуры

Процедура ЗаписатьПринятыйОбъект(лИмяРаздела, лКод1С, лКодОблака, ТаблицаПринятыхОбъектов, БандлОбработанныеОбъекты, confirm_reference, лНовыйОбъект=0)
	Если лНовыйОбъект Тогда
		// записываем соответствия в локальное хранилище
		стрТЗД = ТаблицаПринятыхОбъектов.Добавить();
		стрТЗД.sid = лКод1С;
		стрТЗД.did = лКодОблака;
		стрТЗД.type = лИмяРаздела;
		стрТЗД.date = ТекущаяДата();
	КонецЕсли;
	
	// и в формируемый файл ответа
	confirm_object = ДобавитьОбъект();
	confirm_object.setAttribute("sid", лКод1С); // id 1С
	confirm_object.setAttribute("did", лКодОблака); // id облака
	confirm_reference.AppendChild(confirm_object);
	
	ЗаписатьОбъектБандла(лИмяРаздела, лКодОблака, БандлОбработанныеОбъекты);
КонецПроцедуры

Процедура ЗаписатьОбъектБандла(лИмяРаздела, лКодОблака, Объекты)
	лОбъекты = Неопределено;
	Если НЕ Объекты.Свойство(лИмяРаздела, лОбъекты) Тогда
		//Объекты.Вставить(лИмяРаздела, Новый Массив)
		лОбъекты = Новый Массив;
	КонецЕсли;
	Если лОбъекты.Найти(лКодОблака)=Неопределено Тогда
		лОбъекты.Добавить(лКодОблака);
	КонецЕсли;
	Объекты.Вставить(лИмяРаздела, лОбъекты);
КонецПроцедуры

Функция ВыгрузитьДанные(ОбъектыВыгрузки) Экспорт
	Если мТипXMLБиблиотеки="" Тогда Возврат -1; КонецЕсли;
	ВидОперации = "Выгрузка";
	ПолучитьДанныеСеанса();
	
	СообщитьПодробно("==ВыгрузитьДанные Начало " + ТекущаяДата(), СтатусСообщения.Обычное, Истина, ЗаписьВЖурнал);
	// проверяем доступность ФТП
	Если ФТПИспользовать И ПроверкаФТП(Ложь)=Ложь Тогда
		СообщитьПодробно("Нет доступа к ФТП. Выгрузка не выполняется", СтатусСообщения.Важное, Истина, ЗаписьВЖурнал);
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ УстановитьБлокировку() Тогда
		СообщитьПодробно("Не удалось установить блокировку. Выгрузка не выполнена.", СтатусСообщения.Внимание, Истина, ЗаписьВЖурнал);
		Возврат Ложь;
	КонецЕсли;
	
	//
	//лПрокси = Новый ИнтернетПрокси;
	//лПрокси.Установить("http","127.0.0.1","8888");
	//ХТТПСоединение = Новый HTTPСоединение("st-drive.systtech.ru",,,,лПрокси,30);
	ХТТПСоединение = Новый HTTPСоединение("st-drive.systtech.ru",,,,,30);
	Попытка // для 1С 8.1
		Выполнить("ХТТПЗапрос = Новый HTTPЗапрос");
		Выполнить("ХТТПЗапрос.Заголовки.Вставить(""X-Company-ID"",""01234567-89ab-cdef-0123-456789abcdef"")");
	Исключение
		ХТТПЗапрос = Неопределено;
	КонецПопытки;

	// ищем макет с настройками
	лИмяМакета = ПодобратьМакет();
	Если лИмяМакета=Неопределено Тогда
		Сообщить("Не удалось определить макет с настройками");
		Возврат Ложь;
	КонецЕсли;
	лТаблица	= ПолучитьМакет(лИмяМакета);
	
	лОбласть = лТаблица.ПолучитьОбласть("Версия");
	лКонфигурация = СокрЛП(лОбласть.Область(4, 2, 4, 2).Текст);
	//Если Найти(лКонфигурация,"УТ11")=1 Тогда
	//	КонфУТ11 = 1;
	//Иначе
	//	КонфУТ11 = 0;
	//КонецЕсли;
	//
		
	СоздатьНесуществующиеПодкаталоги(КаталогОбмена+"images\");
	СоздатьНесуществующиеПодкаталоги(КаталогОбмена+"localstorage\");
		
	лСписокФильтров = Новый ТаблицаЗначений;
	лСписокФильтров.Колонки.Добавить("ИмяРаздела");
	лСписокФильтров.Колонки.Добавить("Отбор");
	лСписокФильтров.Колонки.Добавить("Исключение");
	
	// определяем установленные фильтры (лСписокФильтров)
	Для Каждого стр Из ОбъектыВыгрузки Цикл
		лИмяРаздела = стр.ИмяРаздела;
		лВидЗначения = стр.ВидЗначения;
		лОтбор = стр.Отбор;
		лИсключение = стр.Исключение;
		Если лВидЗначения="" ИЛИ Лев(лВидЗначения,1)="*" Тогда
			//Продолжить;
			лОтбор = Неопределено;
			лИсключение = Неопределено;
		Иначе
			стрСФ = Неопределено;
			Если НЕ ЭтоПустойСписок(лОтбор) Тогда
				стрСФ = лСписокФильтров.Добавить();
				стрСФ.ИмяРаздела = лИмяРаздела;
				стрСФ.Отбор = лОтбор.ВыгрузитьЗначения(); // в поле должен быть массив
			Иначе
				лОтбор = Неопределено;
			КонецЕсли;
			Если НЕ ЭтоПустойСписок(лИсключение) Тогда
				Если стрСФ=Неопределено Тогда стрСФ = лСписокФильтров.Добавить(); КонецЕсли;
				стрСФ.ИмяРаздела = лИмяРаздела;
				стрСФ.Исключение = лИсключение.ВыгрузитьЗначения(); // в поле должен быть массив
			Иначе
				лИсключение = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	лДатаОбмена = ТекущаяДата();
	лДеньГода = ДеньГода(лДатаОбмена);
	
	// ищем разделы, которые нужно выгружать сейчас
	Если ОбъектыВыгрузки.Колонки.Найти("Счетчик")=Неопределено Тогда
		ОбъектыВыгрузки.Колонки.Добавить("Счетчик");
	КонецЕсли;
	ОбъектыВыгрузки.ЗаполнитьЗначения(0,"Счетчик");
	Для Каждого стр Из ОбъектыВыгрузки Цикл
		лИмяРаздела = стр.ИмяРаздела;
		
		Если НЕ стр.Использовать Тогда Продолжить; КонецЕсли;
		Если ДеньГода(стр.ПоследнийОбмен)<>лДеньГода Тогда
			// сброс/выравнивание таймера в полночь (начале дня)
			стр.ПоследнийОбмен = НачалоДня(стр.ПоследнийОбмен);
		КонецЕсли;
		Если АвтообменИспользовать И стр.ПоследнийОбмен+стр.Периодичность>лДатаОбмена Тогда Продолжить; КонецЕсли;
		
		//Если АвтообменИспользовать И лИмяРаздела="ref_discounts" И Час(ТекущаяДата())>=1 Тогда
		//	стр.ПоследнийОбмен = лДатаОбмена;
		//	Продолжить;
		//КонецЕсли;
		//Если АвтообменИспользовать И лИмяРаздела<>"ref_discounts" И Час(ТекущаяДата())<1 Тогда Продолжить; КонецЕсли;
		
		стр.Счетчик = 1;
		
		ОтметитьПодРазделыДляОбработки(лИмяРаздела, ОбъектыВыгрузки, лТаблица);
		Если стр.ТабЧасть<>"" Тогда
			мТабЧасти=РазложитьСтрокуВМассивПодстрок(стр.ТабЧасть,",");
			
			Для Каждого _ТабЧасть Из мТабЧасти Цикл
				ОтметитьПодРазделыДляОбработки(_ТабЧасть, ОбъектыВыгрузки, лТаблица);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
		
	лПеременные = Новый Структура;
	лКонстанты = Новый Структура;
	
	// создаем файл
	ФайлXML	= Новый COMОбъект(мТипXMLБиблиотеки);
	node = ФайлXML.CreateProcessingInstruction("xml", "version='1.0' encoding='utf-8'");
	ФайлXML.preserveWhiteSpace = 1;
	ФайлXML.AppendChild(node);
	bundle = ФайлXML.CreateElement("bundle");
	
	// выгружаем данные
	лОбработаноРазделов = 0;
	Для Каждого стрОВ Из ОбъектыВыгрузки Цикл
		лИмяРаздела = стрОВ.ИмяРаздела;
		лНаименование = стрОВ.Наименование;
		лВидЗначения = стрОВ.ВидЗначения;
		лОтбор = стрОВ.Отбор;
		лИсключение = стрОВ.Исключение;
		лТабЧасть = стрОВ.ТабЧасть;
		лТЧСвязка = стрОВ.ТЧСвязка;
		
		мТабЧасти=РазложитьСтрокуВМассивПодстрок(лТабЧасть,",");
		
		Если стрОВ.Счетчик=0 Тогда Продолжить; КонецЕсли;
		СообщитьПодробно("Обработка раздела '"+лНаименование+"' ("+лИмяРаздела+")", СтатусСообщения.Обычное, Истина, ЗаписьВЖурнал);
		
		// сброс фильтра в Неопределено, если он пуст
		Если лВидЗначения="" ИЛИ Лев(лВидЗначения,1)="*" Тогда
			//Продолжить;
			лОтбор = Неопределено;
			лИсключение = Неопределено;
		Иначе
			Если ЭтоПустойСписок(лОтбор) Тогда
				лОтбор = Неопределено;
			КонецЕсли;
			Если ЭтоПустойСписок(лИсключение) Тогда
				лИсключение = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		// 
		лОбласть	= лТаблица.ПолучитьОбласть(лИмяРаздела);
		лВысота		= лОбласть.ВысотаТаблицы;
		
		лРеквизиты = Новый ТаблицаЗначений;
		лРеквизиты.Колонки.Добавить("Облако");
		лРеквизиты.Колонки.Добавить("Источник");
		лРеквизиты.Колонки.Добавить("Ссылка");
		
		лРеквизитыТЧ = Новый ТаблицаЗначений;
		лРеквизитыТЧ.Колонки.Добавить("ИмяРаздела");
		лРеквизитыТЧ.Колонки.Добавить("Облако");
		лРеквизитыТЧ.Колонки.Добавить("Источник");
		лРеквизитыТЧ.Колонки.Добавить("Ссылка");
		
		лЗапрос = Новый Запрос;
		лЗапрос.УстановитьПараметр("ДатаФормирования", лДатаОбмена);
		лЗапрос.УстановитьПараметр("КонецПериода",  КонецДня(лДатаОбмена));
		лЗапрос.УстановитьПараметр("НачалоПериода", НачалоДня(лДатаОбмена-ГлубинаВыгрузкиДанных*86400));
		
		//лЗапрос.УстановитьПараметр("ДП01_Значение", ДП01_Значение);
		//лЗапрос.УстановитьПараметр("ДП02_Значение", ДП02_Значение);
		//лЗапрос.УстановитьПараметр("ДП03_Значение", ДП03_Значение);
		//лЗапрос.УстановитьПараметр("ДП04_Значение", ДП04_Значение);
		//лЗапрос.УстановитьПараметр("ДП05_Значение", ДП05_Значение);
		//лЗапрос.УстановитьПараметр("ДП06_Значение", ДП06_Значение);
		
		лЗапрос.Текст = лОбласть.Область(1, 6, 1, 6).Текст;
		// устанавливаем отборы
		лПервоеУсловие = 1-Число(лОбласть.Область(1, 7, 1, 7).Текст);
		Условие = "";
		// на сами объекты
		Если НЕ лОтбор=Неопределено Тогда
			Условие = Условие +"
			|" + ?(лПервоеУсловие=1, "ГДЕ ", "	И ")+лВидЗначения+".Ссылка В ИЕРАРХИИ(&Отбор_"+лИмяРаздела+")";
			лЗапрос.УстановитьПараметр("Отбор_"+лИмяРаздела, лОтбор);
			лПервоеУсловие = 0;
		КонецЕсли;
		Если НЕ лИсключение=Неопределено Тогда
			Условие = Условие +"
			|" + ?(лПервоеУсловие=1, "ГДЕ ", "	И ")+" НЕ "+лВидЗначения+".Ссылка В ИЕРАРХИИ(&Исключение_"+лИмяРаздела+")";
			лЗапрос.УстановитьПараметр("Исключение_"+лИмяРаздела, лИсключение);
			лПервоеУсловие = 0;
		КонецЕсли;
		// на реквизиты объектов
		Для р = 1 По лВысота Цикл
			лОблако = СокрЛП(лОбласть.Область(р, 1, р, 1).Текст);
			лИсточник = СокрЛП(лОбласть.Область(р, 2, р, 2).Текст);
			лСсылка = СокрЛП(лОбласть.Область(р, 3, р, 3).Текст);
			
			Если лИсточник="" ИЛИ Лев(лИсточник,1)="*" Тогда Продолжить; КонецЕсли;
			лОтборПоРеквизиту = ?(лСсылка="",Ложь,?(Лев(лСсылка,1)="*",Ложь,Истина));
			Если Лев(лСсылка,1)="*" Тогда лСсылка=Сред(лСсылка,2); КонецЕсли;
			
			Если лОтборПоРеквизиту Тогда
				лПолеЗапроса = СокрЛП(лОбласть.Область(р, 6, р, 6).Текст);
				стрСФ = лСписокФильтров.Найти(лСсылка,"ИмяРаздела");
				Если стрСФ=Неопределено Тогда
					СообщитьПодробно("Попытка установки фильтра ["+лСсылка+"] для ["+лИмяРаздела+"] не удалась, возможно фильтр пуст", СтатусСообщения.Внимание, Истина, ЗаписьВЖурнал);
					//Продолжить;
				Иначе
					Если лПолеЗапроса="ПАРАМЕТР" Тогда
						лЗапрос.УстановитьПараметр("Отбор_"+лСсылка, стрСФ.Отбор);
					ИначеЕсли лПолеЗапроса<>"НЕОПРЕДЕЛЕНО" Тогда
						Условие = Условие +"
						|" + ?(лПервоеУсловие=1, "ГДЕ ", "	И ")+лПолеЗапроса+" В "+?(лИсточник="#","ИЕРАРХИИ","")+"(&Отбор_"+лСсылка+")";
						лЗапрос.УстановитьПараметр("Отбор_"+лСсылка, стрСФ.Отбор);
						лПервоеУсловие = 0;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			// и переносим структуру данных в таблицу
			Если НЕ лИсточник="#" Тогда
				стрР = лРеквизиты.Добавить();
				стрР.Облако = лОблако;
				стрР.Источник = лИсточник;
				стрР.Ссылка = лСсылка;
			КонецЕсли;
		КонецЦикла;
		// если есть таб.часть, добавляем еще отборов
		Если лТабЧасть<>"" Тогда
			Для Каждого _ТабЧасть Из мТабЧасти Цикл
				лОбластьТЧ	= лТаблица.ПолучитьОбласть(_ТабЧасть);
				лВысотаТЧ	= лОбластьТЧ.ВысотаТаблицы;
				
				лИмяТЧ = СокрЛП(лОбластьТЧ.Область(1, 6, 1, 6).Текст);
				
				Для р = 1 По лВысотаТЧ Цикл
					лОблако = СокрЛП(лОбластьТЧ.Область(р, 1, р, 1).Текст);
					лИсточник = СокрЛП(лОбластьТЧ.Область(р, 2, р, 2).Текст);
					лСсылка = СокрЛП(лОбластьТЧ.Область(р, 3, р, 3).Текст);
					
					Если лИсточник="" ИЛИ Лев(лИсточник,1)="*" Тогда Продолжить; КонецЕсли;
					лОтборПоРеквизиту = ?(лСсылка="",Ложь,?(Лев(лСсылка,1)="*",Ложь,Истина));
					Если Лев(лСсылка,1)="*" Тогда лСсылка=Сред(лСсылка,2); КонецЕсли;
					
					Если лОтборПоРеквизиту Тогда
						лПолеЗапроса = СокрЛП(лОбластьТЧ.Область(р, 6, р, 6).Текст);
						стрСФ = лСписокФильтров.Найти(лСсылка,"ИмяРаздела");
						Если стрСФ=Неопределено Тогда
							СообщитьПодробно("Попытка установки фильтра ["+лСсылка+"] для ["+_ТабЧасть+"]  не удалась, возможно фильтр пуст", СтатусСообщения.Внимание, Истина, ЗаписьВЖурнал);
							//Продолжить;
						Иначе
							Если лПолеЗапроса="ПАРАМЕТР" Тогда
								лЗапрос.УстановитьПараметр("Отбор_"+лСсылка, стрСФ.Отбор);
							ИначеЕсли лПолеЗапроса<>"НЕОПРЕДЕЛЕНО" Тогда
								Условие = Условие +"
								|" + ?(лПервоеУсловие=1, "ГДЕ ", "	И ")+лПолеЗапроса+" В "+?(лИсточник="#","ИЕРАРХИИ","")+"(&Отбор_"+лСсылка+")";
								лЗапрос.УстановитьПараметр("Отбор_"+лСсылка, стрСФ.Отбор);
								лПервоеУсловие = 0;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					// и переносим структуру данных в таблицу
					Если НЕ лИсточник="#" Тогда
						стрР = лРеквизитыТЧ.Добавить();
						стрР.ИмяРаздела = _ТабЧасть;
						стрР.Облако = лОблако;
						стрР.Источник = лИсточник;
						стрР.Ссылка = лСсылка;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		// приклеиваем запросу условие
		Если Найти(лЗапрос.Текст,"<ГДЕ ?>")=0 Тогда
			лЗапрос.Текст = лЗапрос.Текст + Условие;
		Иначе
			лЗапрос.Текст = СтрЗаменить(лЗапрос.Текст,"<ГДЕ ?>",Условие+Символы.ПС);
		КонецЕсли;
		
		Если лРеквизиты.Количество()=0 Тогда Продолжить; КонецЕсли;
		
		//// костыль под reg_debts в УТ11. надо изменить основной запрос, чтобы убрать этот костыль
		//Если КонфУТ11=1 И лИмяРаздела="reg_debts" Тогда
		//	лЗапрос_debts = Новый Запрос;
		//	лЗапрос_debts.Текст = 
		//	"ВЫБРАТЬ ПЕРВЫЕ 2
		//	|	ВариантыКлассификацииЗадолженности.Ссылка КАК ВариантыКлассификации
		//	|ИЗ
		//	|	Справочник.ВариантыКлассификацииЗадолженности КАК ВариантыКлассификацииЗадолженности
		//	|ГДЕ
		//	|	(НЕ ВариантыКлассификацииЗадолженности.ПометкаУдаления)";
		//	
		//	лВыборка = лЗапрос_debts.Выполнить().Выбрать();
		//	Если лВыборка.Количество()=0 Тогда
		//		лВариантКлассификацииЗадолженности = Справочники.ВариантыКлассификацииЗадолженности.ПустаяСсылка();
		//	Иначе
		//		лВыборка.Следующий();
		//		лВариантКлассификацииЗадолженности = лВыборка.ВариантыКлассификации;
		//	КонецЕсли;	
		//	
		//	лЗапрос.УстановитьПараметр("ВариантКлассификацииЗадолженности", лВариантКлассификацииЗадолженности);
		//	лЗапрос.УстановитьПараметр("Календарь", лВариантКлассификацииЗадолженности.Календарь);
		//КонецЕсли;
		
			
		//отладка
		Если гОтладка Тогда
			СообщитьПодробно("выполняем запрос", СтатусСообщения.Обычное, Истина, Ложь);
		КонецЕсли;
		// выполняем запрос
		лРезультат = лЗапрос.Выполнить();
		Если лРезультат.Пустой() Тогда
			СообщитьПодробно("Получен пустой результат запроса", СтатусСообщения.Внимание, Истина, ЗаписьВЖурнал);
			//Продолжить;
		КонецЕсли;
		лОбъекты = лРезультат.Выгрузить();
		Если гОтладка Тогда
			СообщитьПодробно("Объектов из запроса "+лОбъекты.Количество(), СтатусСообщения.Обычное, Истина, Ложь);
		КонецЕсли;
		лАвтоИдентификатор = Истина; // введено для УТ 11, при выгрузке договоров
		
		//отладка
		Если гОтладка Тогда
			СообщитьПодробно("доп.действия", СтатусСообщения.Обычное, Истина, Ложь);
		КонецЕсли;
		// дополнительная предварительная обработка данных
		лДопДействия = лОбласть.Область(1, 8, 1, 8).Текст;
		Если НЕ СокрЛП(лДопДействия)="" Тогда
			Выполнить(лДопДействия);
		КонецЕсли;
		
		Если лОбъекты.Количество()=0 Тогда
			СообщитьПодробно("Нет объектов для выгрузки", СтатусСообщения.Внимание, Истина, ЗаписьВЖурнал);
			стрОВ.ПоследнийОбмен = лДатаОбмена;
			Продолжить;
		Иначе
			Если гОтладка Тогда
				СообщитьПодробно("Объектов для выгрузки "+лОбъекты.Количество(), СтатусСообщения.Обычное, Истина, Ложь);
			КонецЕсли;
		КонецЕсли;
		// проверяем, есть ли у объектов поле Ссылка
		Если лОбъекты.Колонки.Найти("Ссылка")=Неопределено Тогда
			лЕстьИдентификатор = Ложь;
		Иначе
			лЕстьИдентификатор = Истина;
		КонецЕсли;
			
		// сохраняем список объектов для последующих запросов
		//Если лЕстьИдентификатор И лОтбор=Неопределено Тогда
		Если лЕстьИдентификатор И лАвтоИдентификатор И стрОВ.Счетчик+?(стрОВ.Использовать,0,1)>1 Тогда
			Если гОтладка Тогда
				СообщитьПодробно("Сохраняем данные для фильтра", СтатусСообщения.Обычное, Истина, Ложь);
			КонецЕсли;
			Если лОтбор=Неопределено И лИсключение=Неопределено Тогда // новый фильтр
				стрСФ = лСписокФильтров.Добавить();
				стрСФ.ИмяРаздела = лИмяРаздела;
				стрСФ.Отбор = лОбъекты.ВыгрузитьКолонку("Ссылка");
				стрСФ.Исключение = Неопределено;
			Иначе // или перезаписываем старый
				стрСФ = лСписокФильтров.Найти(лИмяРаздела,"ИмяРаздела");
				стрСФ.Отбор = лОбъекты.ВыгрузитьКолонку("Ссылка");
				стрСФ.Исключение = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ стрОВ.Использовать Тогда Продолжить; КонецЕсли;
		// проверяем время, если включен автообмен
		// стрОВ.Счетчик%2=0 - отмечен только по связям. сам раздел в выгрузку не идет
		Если АвтообменИспользовать И стрОВ.ПоследнийОбмен+стрОВ.Периодичность>лДатаОбмена ИЛИ стрОВ.Счетчик%2=0 Тогда Продолжить; КонецЕсли;
		стрОВ.ПоследнийОбмен = лДатаОбмена;
		лОбработаноРазделов = лОбработаноРазделов+1;
		
		//отладка
		Если гОтладка Тогда
			СообщитьПодробно("пишем в файл", СтатусСообщения.Обычное, Истина, Ложь);
		КонецЕсли;
		// пишем данные в файл
		КоличествоОбъектов = 0;
		reference = ДобавитьРаздел("reference", лИмяРаздела, стрОВ.Замещение, лНаименование);
		Для Каждого стрО Из лОбъекты Цикл
			object = ДобавитьОбъект();
			sid = "";
			Если лЕстьИдентификатор Тогда
				sid = стрО.Ссылка;
				object.setAttribute("sid", XMLСтрока(sid));
			КонецЕсли;
			// выгружаем объект
			Для Каждого стрР Из лРеквизиты Цикл
				Если стрР.Ссылка="" Тогда
					ДобавитьСвойство(object, стрР.Облако, стрО[стрР.Источник])
				Иначе
					ДобавитьСпрСвойство(object, стрР.Облако, стрР.Ссылка, стрО[стрР.Источник]);
				КонецЕсли;
			КонецЦикла;
			// есть таб.часть?
			Если лТабЧасть<>"" Тогда
				Для Каждого _ТабЧасть Из мТабЧасти Цикл
					// проверяем наличие ТЧ в выгружаемых данных
					лОбластьТЧ	= лТаблица.ПолучитьОбласть(_ТабЧасть);
					//лВысотаТЧ	= лОбластьТЧ.ВысотаТаблицы;
					лИмяТЧ = СокрЛП(лОбластьТЧ.Область(1, 6, 1, 6).Текст);
					Если стрО[лИмяТЧ].Количество()=0 Тогда Продолжить; КонецЕсли;
					
					subreference = ДобавитьРаздел("reference", _ТабЧасть, "true", "");
					Если лТЧСвязка<>"" Тогда
						subreference.setAttribute("property", лТЧСвязка);
					КонецЕсли;
					Для Каждого стрТЧО Из стрО[лИмяТЧ] Цикл
						objectТЧ = ДобавитьОбъект();
						Если лТЧСвязка<>"" Тогда
							ДобавитьСпрСвойство(objectТЧ, лТЧСвязка, лИмяРаздела, sid);
						КонецЕсли;
						// выгружаем строку ТЧ
						Для Каждого стрТЧР Из лРеквизитыТЧ Цикл
							Если стрТЧР.ИмяРаздела<>_ТабЧасть Тогда Продолжить; КонецЕсли;
								
							Если стрТЧР.Ссылка="" Тогда
								ДобавитьСвойство(objectТЧ, стрТЧР.Облако, стрТЧО[стрТЧР.Источник])
							Иначе
								ДобавитьСпрСвойство(objectТЧ, стрТЧР.Облако, стрТЧР.Ссылка, стрТЧО[стрТЧР.Источник]);
							КонецЕсли;
						КонецЦикла;
						subreference.AppendChild(objectТЧ);
					КонецЦикла;
					object.AppendChild(subreference);
					
				КонецЦикла;
			КонецЕсли;
			reference.AppendChild(object);
		КонецЦикла;
		bundle.AppendChild(reference);
		СообщитьПодробно("Выгружено "+Формат(лОбъекты.Количество(),"ЧГ=")+" ("+Формат(КоличествоОбъектов,"ЧГ=")+") объектов", СтатусСообщения.Обычное, Истина, ЗаписьВЖурнал);
		
		лОбъекты = Неопределено;
	КонецЦикла;
	ОбъектыВыгрузки.Колонки.Удалить("Счетчик");
	
	Если лОбработаноРазделов>0 Тогда
		// сохраняем файл
		package = ФайлXML.CreateElement("package");
		package.AppendChild(bundle);
		ФайлXML.AppendChild(package);
		лПолноеИмяФайлаВыгрузки = КаталогОбмена + "client\"+Формат(лДатаОбмена,"ДФ=yyyyMMddHHmmss")+".xml";
		СоздатьНесуществующиеПодкаталоги(лПолноеИмяФайлаВыгрузки);
		ФайлXML.Save(лПолноеИмяФайлаВыгрузки);
		СообщитьПодробно("Данные сохранены в файл "+лПолноеИмяФайлаВыгрузки, СтатусСообщения.Обычное, Истина, ЗаписьВЖурнал);
		// отправить на фтп
		Если ФТПИспользовать Тогда
			ОтправитьФТП(лОбработаноРазделов);
		КонецЕсли;
	КонецЕсли;
	
	СообщитьПодробно("==ВыгрузитьДанные Конец", СтатусСообщения.Обычное, Истина, ЗаписьВЖурнал);
	СнятьБлокировку();
	Возврат 1;
КонецФункции

Функция ЗагрузитьДанные(ОбъектыЗагрузки) Экспорт
	Если мТипXMLБиблиотеки="" Тогда Возврат -1; КонецЕсли;
	ВидОперации = "Загрузка";
	ПолучитьДанныеСеанса();
	
	СообщитьПодробно("==ЗагрузитьДанные Начало " + ТекущаяДата(), СтатусСообщения.Обычное, Истина, ЗаписьВЖурнал);
	Если НЕ УстановитьБлокировку() Тогда
		СообщитьПодробно("Не удалось установить блокировку. Загрузка не выполнена.", СтатусСообщения.Внимание, Истина, ЗаписьВЖурнал);
		Возврат Ложь;
	КонецЕсли;
	
	лДатаОбмена = ТекущаяДата();
	лДеньГода = ДеньГода(лДатаОбмена);
	лПоследнийОбмен = Дата(1,1,1);
	СобратьТипыЗначенийЭлементов();
	
	// ищем макет с настройками
	лИмяМакета = ПодобратьМакет();
	Если лИмяМакета=Неопределено Тогда
		Сообщить("Не удалось определить макет с настройками");
		Возврат Ложь;
	КонецЕсли;
	лТаблица	= ПолучитьМакет(лИмяМакета);
	
	// проверяем время, если включен автообмен
	//Если АвтообменИспользовать И ОбъектыЗагрузки[0].ПоследнийОбмен+ОбъектыЗагрузки[0].Периодичность>лДатаОбмена Тогда
	//	СообщитьПодробно("Время для загрузки еще не наступило", СтатусСообщения.Внимание, Истина, ЗаписьВЖурнал);
	//	Возврат Ложь;
	//КонецЕсли;
	
	// принимает файлы с фтп
	Если ФТПИспользовать Тогда
		ПолучитьФТП();
	КонецЕсли;
	
	ТаблицаПринятыхОбъектов = ЗагрузитьПринятыеОбъекты();
	лПеременные = Новый Структура;
	лКонстанты = Новый Структура;
	
	СтруктураПересчетаСуммы = Новый Структура;
	СтруктураДействийЗаполнитьЦены = Новый Структура;
	СтруктураДействийОбработатьСтрокуЗаказа = Новый Структура;
	СтруктураДействийОбработатьСтрокуВозврата = Новый Структура;
	КэшированныеЗначения = Неопределено;
	
	// для чтения входящих файлов
	ДокXML = Новый COMОбъект(мТипXMLБиблиотеки);
	
	// создаем файл для отправки данных
	ФайлXML	= Новый COMОбъект(мТипXMLБиблиотеки);
	node = ФайлXML.CreateProcessingInstruction("xml", "version='1.0' encoding='utf-8'");
	ФайлXML.preserveWhiteSpace = 1;
	ФайлXML.AppendChild(node);
	confirm_bundle = ФайлXML.CreateElement("bundle");
	confirm_package = ФайлXML.CreateElement("package");
	
	МассивФайлов = НайтиФайлы(КаталогОбмена + "server\", "*.xml");
	лОбработаноФайлов = 0;
	лОбработаноОбъектовВсего = 0;
	КоличествоОбъектов = 0;
	Для Каждого лДок Из МассивФайлов Цикл
        Попытка
			ДокXML.Load(лДок.ПолноеИмя);
		Исключение
			СообщитьПодробно("Невозможно прочитать Файл " + лДок.Имя, СтатусСообщения.Важное, Истина, ЗаписьВЖурнал);
			СообщитьПодробно(ОписаниеОшибки(), СтатусСообщения.Важное, Истина, ЗаписьВЖурнал);
			Продолжить;
		КонецПопытки;
		СообщитьПодробно("Обработка входящего файла "+лДок.Имя, СтатусСообщения.Обычное, Истина, ЗаписьВЖурнал);
		лОбработаноФайлов = лОбработаноФайлов+1;
		
		bundles = ДокXML.selectNodes("//bundle");
		Для Каждого bundle Из bundles Цикл
			bundleid = bundle.getAttribute("id");
			БандлОК = Истина; // все данные бандла обработаны
			БандлОбработанныеОбъекты = Новый Структура;
			
			references = bundle.childNodes;
			Для Каждого reference Из references Цикл
				лИмяРаздела = reference.getAttribute("name");
				
				стрОЗ = ОбъектыЗагрузки.Найти(лИмяРаздела,"ИмяРаздела");
				Если стрОЗ=Неопределено Тогда
					Если reference.childNodes.length>0 Тогда
						лТмпРазмер = reference.childNodes.length;
						лТмпОбъекты = Неопределено;
						Если БандлОбработанныеОбъекты.Свойство(лИмяРаздела, лТмпОбъекты) Тогда
							лТмпРазмер = лТмпРазмер - лТмпОбъекты.Количество();
						КонецЕсли;
						Если лТмпРазмер>0 Тогда
							БандлОК = Ложь;
							СообщитьПодробно("Получен необрабатываемый раздел "+лИмяРаздела+" с данными", СтатусСообщения.Внимание, Истина, ЗаписьВЖурнал);
						КонецЕсли;
					КонецЕсли;
					Продолжить;
				КонецЕсли;
				
				лНаименование = стрОЗ.Наименование;
				лВидЗначения = стрОЗ.ВидЗначения;
				лТабЧасть = стрОЗ.ТабЧасть;
				лТЧСвязка = стрОЗ.ТЧСвязка;
				лТипОбъекта = стрОЗ.ТипОбъекта;
				СообщитьПодробно("Обработка раздела '"+лНаименование+"' ("+лИмяРаздела+")", СтатусСообщения.Обычное, Истина, ЗаписьВЖурнал);
				
				confirm_reference = ДобавитьРаздел("reference",лИмяРаздела,"false","(подтверждения) "+лНаименование);
				
				Если Найти("ДСР",лТипОбъекта)=0 Тогда
					БандлОК = Ложь;
					СообщитьПодробно("Не обрабатываемый тип объекта ="+лТипОбъекта+"=", СтатусСообщения.Внимание, Истина, ЗаписьВЖурнал);
					Продолжить;
				КонецЕсли;
				
				// отмечен ли раздел для загрузки?
				Если НЕ стрОЗ.Использовать Тогда
					Если reference.childNodes.length>0 Тогда
						лТмпРазмер = reference.childNodes.length;
						лТмпОбъекты = Неопределено;
						Если БандлОбработанныеОбъекты.Свойство(лИмяРаздела, лТмпОбъекты) Тогда
							лТмпРазмер = лТмпРазмер - лТмпОбъекты.Количество();
							СообщитьПодробно("Что-то уже приняли из отключенного раздела '"+лНаименование+"' ("+лИмяРаздела+"). Странно как-то.", СтатусСообщения.Внимание, Истина, ЗаписьВЖурнал);							
						КонецЕсли;
						Если лТмпРазмер>0 Тогда
							БандлОК = Ложь;
						КонецЕсли;
					КонецЕсли;
					
					//// чтобы объекты не сыпались постоянно, отправим фейковый конфирм
					//objects = reference.childNodes;
					//лОбработаноОбъектов = 0;
					//Для Каждого object Из objects Цикл
					//	sid = object.getAttribute("sid");
					//	
					//	confirm_object = ДобавитьОбъект();
					//	confirm_object.setAttribute("sid", sid); // id 1С
					//	confirm_object.setAttribute("did", sid); // id облака
					//	confirm_reference.AppendChild(confirm_object);
					//	
					//	лОбработаноОбъектов = лОбработаноОбъектов+1;
					//КонецЦикла; // Для Каждого object Из objects Цикл
					//
					//Если лОбработаноОбъектов>0 Тогда
					//	confirm_bundle.AppendChild(confirm_reference);
					//КонецЕсли;
					
					Продолжить;
				КонецЕсли;
				
				//
				элТЗЭ = ТипыЗначенийЭлементов.НайтиПоЗначению(лИмяРаздела);
				лТипЗначенияРаздела = Тип(элТЗЭ.Представление);
				
				лОбласть	= лТаблица.ПолучитьОбласть(лИмяРаздела);
				лВысота		= лОбласть.ВысотаТаблицы;
				
				лРеквизиты = Новый ТаблицаЗначений;
				лРеквизиты.Колонки.Добавить("Облако");
				лРеквизиты.Колонки.Добавить("Источник");
				лРеквизиты.Колонки.Добавить("Ссылка");
				лРеквизиты.Колонки.Добавить("Формула");
				
				лДопДействия = лОбласть.Область(1, 9, 1, 9).Текст;
				лДопДействияПолн = лОбласть.Область(1, 10, 1, 10).Текст;
				
				// переносим структуру данных в таблицу
				Для р = 1 По лВысота Цикл
					лОблако = СокрЛП(лОбласть.Область(р, 1, р, 1).Текст);
					лИсточник = СокрЛП(лОбласть.Область(р, 2, р, 2).Текст);
					лСсылка = СокрЛП(лОбласть.Область(р, 3, р, 3).Текст);
					лФормула = СокрЛП(лОбласть.Область(р, 9, р, 9).Текст);
					
					Если лИсточник="" ИЛИ Лев(лИсточник,1)="*" Тогда Продолжить; КонецЕсли;
					
					стрР = лРеквизиты.Добавить();
					стрР.Облако = лОблако;
					стрР.Источник = лИсточник;
					стрР.Ссылка = лСсылка;
					стрР.Формула = лФормула;
				КонецЦикла;
				// если есть таб.часть, обрабатываем её
				Если лТабЧасть<>"" Тогда
					лОбластьТЧ	= лТаблица.ПолучитьОбласть(лТабЧасть);
					лВысотаТЧ	= лОбластьТЧ.ВысотаТаблицы;
					
					лРеквизитыТЧ = Новый ТаблицаЗначений;
					лРеквизитыТЧ.Колонки.Добавить("Облако");
					лРеквизитыТЧ.Колонки.Добавить("Источник");
					лРеквизитыТЧ.Колонки.Добавить("Ссылка");
					лРеквизитыТЧ.Колонки.Добавить("Формула");
					
					лИмяТЧ = СокрЛП(лОбластьТЧ.Область(1, 6, 1, 6).Текст);
					лДопДействияТЧ = лОбластьТЧ.Область(1, 9, 1, 9).Текст;
					
					Для р = 1 По лВысотаТЧ Цикл
						лОблако = СокрЛП(лОбластьТЧ.Область(р, 1, р, 1).Текст);
						лИсточник = СокрЛП(лОбластьТЧ.Область(р, 2, р, 2).Текст);
						лСсылка = СокрЛП(лОбластьТЧ.Область(р, 3, р, 3).Текст);
						лФормула = СокрЛП(лОбластьТЧ.Область(р, 9, р, 9).Текст);
						
						Если лИсточник="" ИЛИ Лев(лИсточник,1)="*" Тогда Продолжить; КонецЕсли;
						
						стрР = лРеквизитыТЧ.Добавить();
						стрР.Облако = лОблако;
						стрР.Источник = лИсточник;
						стрР.Ссылка = лСсылка;
						стрР.Формула = лФормула;
					КонецЦикла;
				КонецЕсли;
				
				objects = reference.childNodes;
				лОбработаноОбъектов = 0;
				Для Каждого object Из objects Цикл
					sid = object.getAttribute("sid"); // код облака
					did = "";
					
					// надо загружать объект?
					стрТПО = ТаблицаПринятыхОбъектов.Найти(sid, "did");
					Если стрТПО=Неопределено Тогда
						// создаем объект
						Если лТипОбъекта="Д" Тогда
							лОбъект = Документы[лВидЗначения].СоздатьДокумент();
						ИначеЕсли лТипОбъекта="С" Тогда
							лОбъект = Справочники[лВидЗначения].СоздатьЭлемент();
						ИначеЕсли лТипОбъекта="Р" Тогда
							// нужна отладка для новых добавляемых разделов
							лОбъект = РегистрыСведений[лВидЗначения].СоздатьМенеджерЗаписи();
						КонецЕсли;
					Иначе
						// загружали ранее такой объект
						Если лТипОбъекта="Д" Тогда // документ можно обновить
							//did = стрТПО.sid;
							лОбъектСсылка = XMLЗначение_(лТипЗначенияРаздела, стрТПО.sid);
							Если НЕ ЗначениеЗаполнено(лОбъектСсылка.Дата) Тогда
								СообщитьПодробно("Объект более не доступен ("+sid+")", СтатусСообщения.Обычное, Истина, ЗаписьВЖурнал);
								ЗаписатьПринятыйОбъект(лИмяРаздела, стрТПО.sid, sid, ТаблицаПринятыхОбъектов, БандлОбработанныеОбъекты, confirm_reference);
								Продолжить;
							ИначеЕсли лОбъектСсылка.Проведен ИЛИ лОбъектСсылка.ПометкаУдаления Тогда
								ЗаписатьПринятыйОбъект(лИмяРаздела, стрТПО.sid, sid, ТаблицаПринятыхОбъектов, БандлОбработанныеОбъекты, confirm_reference);
								Продолжить;
							Иначе
								лОбъект = лОбъектСсылка.ПолучитьОбъект();
								СообщитьПодробно("Обновляем объект "+лОбъект+" ("+sid+")", СтатусСообщения.Обычное, Истина, ЗаписьВЖурнал);
							КонецЕсли;
						Иначе //Если лТипОбъекта="С" Тогда
							// нет признака невозможности повторной загрузки данных
							ЗаписатьПринятыйОбъект(лИмяРаздела, стрТПО.sid, sid, ТаблицаПринятыхОбъектов, БандлОбработанныеОбъекты, confirm_reference);
							Продолжить;
						КонецЕсли;
					КонецЕсли;
					лБылаДопОбработкаШапки = 0;
					
					// переменные, которые участвуют в формулах
					лПеременные.Очистить();
					
					// заполняем реквизиты
					Для Каждого tag Из object.childNodes Цикл
						nodeName = tag.nodeName;
						Если nodeName="property" Тогда
							tagname = tag.getAttribute("name");
							Если tag.childNodes.length>0 Тогда
								стрРеквизит = лРеквизиты.Найти(tagname, "Облако");
								Если стрРеквизит=Неопределено Тогда
									// реквизит не участвует в обмене
									Продолжить;
								КонецЕсли;
								
								psid=""; pref=""; элТЗЭ=Неопределено;
								Если tag.firstChild.nodeName="link" Тогда
									psid = tag.firstChild.getAttribute("did");
									pref = tag.firstChild.getAttribute("reference");
									элТЗЭ = ТипыЗначенийЭлементов.НайтиПоЗначению(pref);
									Если элТЗЭ=Неопределено Тогда
										СообщитьПодробно("Неопределен тип для ["+pref+"]", СтатусСообщения.Внимание, Истина, ЗаписьВЖурнал);
										Продолжить;
									КонецЕсли;
									Если лОбъект[стрРеквизит.Источник]=Неопределено ИЛИ НЕ стрРеквизит.Формула="" Тогда
										лЗначение = psid;
									Иначе
										лЗначение = XMLЗначение_(Тип(элТЗЭ.Представление), psid);
									КонецЕсли;
									Если НЕ стрРеквизит.Формула="" Тогда
										Выполнить(стрРеквизит.Формула);
									Иначе
										лОбъект[стрРеквизит.Источник] = лЗначение;
									КонецЕсли;
								ИначеЕсли tag.firstChild.nodeName="null" Тогда
									//пустой реквизит
									лЗначение = "";
									// следующий кусок требует проверки. введено для ПКО
									Если НЕ стрРеквизит.Формула="" Тогда
										Выполнить(стрРеквизит.Формула);
									Иначе
										лОбъект[стрРеквизит.Источник] = "";
									КонецЕсли;
								Иначе
									Если лОбъект[стрРеквизит.Источник]=Неопределено ИЛИ НЕ стрРеквизит.Формула="" Тогда
										лЗначение = СокрЛП(tag.firstChild.text);
									Иначе
										лЗначение = XMLЗначение_(ТипЗнч(лОбъект[стрРеквизит.Источник]),СокрЛП(tag.firstChild.text));//СокрЛП(tag.firstChild.text);
									КонецЕсли;
									Если НЕ стрРеквизит.Формула="" Тогда
										Выполнить(стрРеквизит.Формула);
									Иначе
										лОбъект[стрРеквизит.Источник] = лЗначение;
									КонецЕсли;
								КонецЕсли;
							Иначе
								СообщитьПодробно("Плохой property "+tagname, СтатусСообщения.Внимание, Истина, ЗаписьВЖурнал);
								Продолжить;
							КонецЕсли;
						ИначеЕсли nodeName="reference" Тогда
							// дополнительная пост.обработка данных шапки
							Если НЕ СокрЛП(лДопДействия)="" Тогда
								Выполнить(лДопДействия);
								лБылаДопОбработкаШапки = 1;
							КонецЕсли;
							
							// заполняем ТЧ
							objectsТЧ = tag.childNodes;
							лОбъект[лИмяТЧ].Очистить();
							Для Каждого objectТЧ Из objectsТЧ Цикл
								стрТЧ = лОбъект[лИмяТЧ].Добавить();
								// переменные, которые участвуют в формулах
								лПеременные.Очистить();
								
								//

								// заполняем реквизиты строки ТЧ
								Для Каждого tagТЧ Из objectТЧ.childNodes Цикл
									nodeNameТЧ = tagТЧ.nodeName;
									Если nodeNameТЧ="property" Тогда
										tagnameТЧ = tagТЧ.getAttribute("name");
										Если tagТЧ.childNodes.length>0 Тогда
											стрРеквизит = лРеквизитыТЧ.Найти(tagnameТЧ, "Облако");
											Если стрРеквизит=Неопределено Тогда
												// реквизит не участвует в обмене
												Продолжить;
											КонецЕсли;
											
											psid=""; pref=""; элТЗЭ=Неопределено;
											Если tagТЧ.firstChild.nodeName="link" Тогда
												psid = tagТЧ.firstChild.getAttribute("did");
												pref = tagТЧ.firstChild.getAttribute("reference");
												элТЗЭ = ТипыЗначенийЭлементов.НайтиПоЗначению(pref);
												Если элТЗЭ=Неопределено Тогда
													СообщитьПодробно("Неопределен тип для ["+pref+"]", СтатусСообщения.Внимание, Истина, ЗаписьВЖурнал);
													Продолжить;
												КонецЕсли;
												Если стрТЧ[стрРеквизит.Источник]=Неопределено ИЛИ НЕ стрРеквизит.Формула="" Тогда
													лЗначение = psid;
												Иначе
													лЗначение = XMLЗначение_(Тип(элТЗЭ.Представление), psid);
												КонецЕсли;
												Если НЕ стрРеквизит.Формула="" Тогда
													Выполнить(стрРеквизит.Формула);
												Иначе
													стрТЧ[стрРеквизит.Источник] = лЗначение;
												КонецЕсли;
											ИначеЕсли tagТЧ.firstChild.nodeName="null" Тогда
												//пустой реквизит
												лЗначение = "";
												// следующий кусок требует проверки. введено для ПКО
												Если НЕ стрРеквизит.Формула="" Тогда
													Выполнить(стрРеквизит.Формула);
												Иначе
													стрТЧ[стрРеквизит.Источник] = "";
												КонецЕсли;
											Иначе
												Если стрТЧ[стрРеквизит.Источник]=Неопределено ИЛИ НЕ стрРеквизит.Формула="" Тогда
													лЗначение = СокрЛП(tagТЧ.firstChild.text);
												Иначе
													лЗначение = XMLЗначение_(ТипЗнч(стрТЧ[стрРеквизит.Источник]),СокрЛП(tagТЧ.firstChild.text));//СокрЛП(tagТЧ.firstChild.text);
												КонецЕсли;
												Если НЕ стрРеквизит.Формула="" Тогда
													Выполнить(стрРеквизит.Формула);
												Иначе
													стрТЧ[стрРеквизит.Источник] = лЗначение;
												КонецЕсли;
											КонецЕсли;
										Иначе
											СообщитьПодробно("Плохой property "+tagnameТЧ, СтатусСообщения.Внимание, Истина, ЗаписьВЖурнал);
											Продолжить;
										КонецЕсли;
									Иначе
										// сообщить?
									КонецЕсли;
								КонецЦикла;
								// дополнительная пост.обработка данных
								Если НЕ СокрЛП(лДопДействияТЧ)="" Тогда
									Выполнить(лДопДействияТЧ);
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
					КонецЦикла;
					// дополнительная пост.обработка данных
					Если НЕ СокрЛП(лДопДействия)="" И лБылаДопОбработкаШапки=0 Тогда
						Выполнить(лДопДействия);
					КонецЕсли;
					Если НЕ СокрЛП(лДопДействияПолн)="" Тогда
						Выполнить(лДопДействияПолн);
					КонецЕсли;
					
					// записываем объект
					Если НЕ лОбъект=Неопределено Тогда
						Попытка
							лОбъект.Записать();
							СообщитьПодробно("Загружен объект "+лОбъект+" ("+sid+")", СтатусСообщения.Обычное, Истина, ЗаписьВЖурнал);
							
							//confirm_object.setAttribute("sid", XMLСтрока(лОбъект.Ссылка)); // id 1С
							//confirm_object.setAttribute("did", sid); // id облака
							Если НЕ ЗначениеЗаполнено(did) Тогда
								did = XMLСтрока(лОбъект.Ссылка);
							КонецЕсли;
							//ЗаписатьПринятыйОбъект(лИмяРаздела, XMLСтрока(лОбъект.Ссылка), sid, ТаблицаПринятыхОбъектов, БандлОбработанныеОбъекты, confirm_reference, 1);
							ЗаписатьПринятыйОбъект(лИмяРаздела, did, sid, ТаблицаПринятыхОбъектов, БандлОбработанныеОбъекты, confirm_reference, 1);
							
							лОбработаноОбъектов = лОбработаноОбъектов+1;
							лОбработаноОбъектовВсего = лОбработаноОбъектовВсего+1;
							
							//СведенияОВерсииОбъекта = Новый Структура("Комментарий,ТипВерсииОбъекта,АвторВерсии","Загружено из st-mobi.com","ИзмененоПользователем",АвтообменПользователь);
							//ВерсионированиеОбъектов.СоздатьВерсиюОбъектаПоОбменуДанными(лОбъект,СведенияОВерсииОбъекта);
							
							СохранитьПринятыеОбъекты(ТаблицаПринятыхОбъектов);
						Исключение
							БандлОК = Ложь;
							СообщитьПодробно("Не удалось записать объект "+sid, СтатусСообщения.Важное, Истина, ЗаписьВЖурнал);
							СообщитьПодробно(ОписаниеОшибки(), СтатусСообщения.Важное, Истина, ЗаписьВЖурнал);
						КонецПопытки;
					Иначе
						Если ЗначениеЗаполнено(did) Тогда
							ЗаписатьПринятыйОбъект(лИмяРаздела, did, sid, ТаблицаПринятыхОбъектов, БандлОбработанныеОбъекты, confirm_reference, 1);
							
							лОбработаноОбъектов = лОбработаноОбъектов+1;
							лОбработаноОбъектовВсего = лОбработаноОбъектовВсего+1;
							
							СохранитьПринятыеОбъекты(ТаблицаПринятыхОбъектов);
						Иначе
							БандлОК = Ложь;
						КонецЕсли;
					КонецЕсли;
					
				КонецЦикла; // Для Каждого object Из objects Цикл
				
				Если лОбработаноОбъектов>0 Тогда
					confirm_bundle.AppendChild(confirm_reference);
					
					// записываем доп.подтверждения, если есть
					лПодтверждения = Неопределено;
					лКонстанты.Свойство("confirm",лПодтверждения);
					Если НЕ лПодтверждения=Неопределено Тогда
						Для Каждого стрП Из лПодтверждения Цикл
							confirm_reference = ДобавитьРаздел("reference",стрП.reference,"false","(доп.подтверждения) "+стрП.reference);
							
							Для Каждого стрД Из стрП.data Цикл
								confirm_object = ДобавитьОбъект();
								confirm_object.setAttribute("sid", стрД.sid); // id 1С
								confirm_object.setAttribute("did", стрД.did); // id облака
								confirm_reference.AppendChild(confirm_object);
							КонецЦикла;
							
							confirm_bundle.AppendChild(confirm_reference);
						КонецЦикла;
						
						лКонстанты.Вставить("confirm",Неопределено);
					КонецЕсли;
				КонецЕсли;
				
				Если лПоследнийОбмен<стрОЗ.ПоследнийОбмен Тогда
					// смотрим самую свежую дату последней загрузки
					лПоследнийОбмен = стрОЗ.ПоследнийОбмен;
				КонецЕсли;
				стрОЗ.ПоследнийОбмен = лДатаОбмена;
			КонецЦикла; // Для Каждого reference Из references Цикл
			
			Если ЗначениеЗаполнено(bundleid) И БандлОК Тогда
				confirmation = ФайлXML.CreateElement("confirmation");	
				confirmation.setAttribute("bundle", bundleid);
				confirmation.setAttribute("time", XMLСтрока(лДатаОбмена));
		        confirm_package.AppendChild(confirmation);
			Иначе
				СообщитьПодробно("Бандл "+bundleid+" принят не полностью", СтатусСообщения.Внимание, Истина, ЗаписьВЖурнал);
			КонецЕсли;	
			
		КонецЦикла; // Для Каждого bundle Из bundles Цикл
		
		ПереместитьФайл(лДок.ПолноеИмя, лДок.ПолноеИмя + ".old");
	КонецЦикла;
	
	//СохранитьПринятыеОбъекты(ТаблицаПринятыхОбъектов);
	
	Если лОбработаноФайлов>0 Тогда
		// сохраняем файл
		confirm_package.AppendChild(confirm_bundle);
		ФайлXML.AppendChild(confirm_package);
		лПолноеИмяФайлаВыгрузки = КаталогОбмена + "client\"+Формат(лДатаОбмена,"ДФ=yyyyMMddHHmmss")+".xml";
		СоздатьНесуществующиеПодкаталоги(лПолноеИмяФайлаВыгрузки);
		ФайлXML.Save(лПолноеИмяФайлаВыгрузки);
		СообщитьПодробно("Сформирован файл "+лПолноеИмяФайлаВыгрузки, СтатусСообщения.Обычное, Истина, ЗаписьВЖурнал);
	КонецЕсли;
	
	// отправить на фтп
	Если ФТПИспользовать Тогда
		ОтправитьФТП(лОбработаноОбъектовВсего);
	КонецЕсли;
	
	// удаляем старые файлы раз в сутки
	Если лДеньГода<>ДеньГода(лПоследнийОбмен) И лОбработаноФайлов>0 Тогда
		УдалитьСтарыеФайлы(ВидОперации);
	КонецЕсли;

	СообщитьПодробно("==ЗагрузитьДанные Конец", СтатусСообщения.Обычное, Истина, ЗаписьВЖурнал);
	СнятьБлокировку();
	Возврат 1;
КонецФункции

Функция УведомитьОблако()
	////лПрокси = Неопределено;
	////лПрокси = Новый ИнтернетПрокси;
	////лПрокси.Пользователь = ПроксиПользователь;
	////лПрокси.Пароль = ПроксиПароль;
	////лПрокси.Установить("http","127.0.0.1","8888");
	////ХТТПСоединение = Новый HTTPСоединение("st-mobi.com",,ФТППользователь,ФТППароль,лПрокси,30);
	//ХТТПСоединение = Новый HTTPСоединение("st-mobi.com",,ФТППользователь,ФТППароль,,30);
	//ХТТПЗапрос = Новый HTTPЗапрос;
	//ХТТПЗапрос.АдресРесурса="/application/job/runtask.php";
	//Попытка
	//	ХТТПОтвет = ХТТПСоединение.Получить(ХТТПЗапрос);
	//Исключение
	//	СообщитьПодробно(ОписаниеОшибки(), СтатусСообщения.Важное, Истина, ЗаписьВЖурнал);
	//	Возврат Ложь;
	//КонецПопытки;
	//лКодСостояния = ХТТПОтвет.КодСостояния;
	//стрОтвет = ХТТПОтвет.ПолучитьТелоКакСтроку();
	//Если лКодСостояния=200 Тогда
	//	Если Найти(стрОтвет,"Lastrun reset")>0 И Найти(стрОтвет,ФТППользователь)>0 Тогда
	//	Иначе
	//		СообщитьПодробно("Ошибка уведомления: "+стрОтвет, СтатусСообщения.Важное, Истина, ЗаписьВЖурнал);
	//		Возврат Ложь;
	//	КонецЕсли;
	//Иначе
	//	СообщитьПодробно("Ошибка уведомления: код "+лКодСостояния, СтатусСообщения.Важное, Истина, ЗаписьВЖурнал);
	//	Возврат Ложь;
	//КонецЕсли;
КонецФункции


//****************************************
Функция СведенияОВнешнейОбработке() Экспорт
    // Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
    ПараметрыРегистрации = Новый Структура;
    // Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
    // Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
    ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");
    // Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
    ПараметрыРегистрации.Вставить("Наименование", "Обмен с ST-МобиКом (st-mobi.com)");
    // Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
    // Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
    ПараметрыРегистрации.Вставить("Версия", "2016.06.01");
    ПараметрыРегистрации.Вставить("Информация", "Обмен с ST-МобиКом (st-mobi.com)");
    // Создадим таблицу команд (подробнее смотрим ниже)
    ТаблицаКоманд = ПолучитьТаблицуКоманд();
    // Добавим команду в таблицу
    ДобавитьКоманду(ТаблицаКоманд, "Обмен с ST-МобиКом (st-mobi.com)", "Открыть форму", "ОткрытиеФормы");
    // Сохраним таблицу команд в параметры регистрации обработки
    ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
    // Теперь вернем системе наши параметры
    Возврат ПараметрыРегистрации;
КонецФункции

Функция ПолучитьТаблицуКоманд()
	// Создадим пустую таблицу команд и колонки в ней
	Команды = Новый ТаблицаЗначений;
	// Как будет выглядеть описание печатной формы для пользователя
	Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 
	// Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
	Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	// Тут задается, как должна вызваться команда обработки
	// Возможные варианты:
	// - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
	// - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
	// - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
	Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	// Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
	Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));
	// Для печатной формы должен содержать строку ПечатьMXL 
	Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
	Возврат Команды;
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
	// Добавляем команду в таблицу команд по переданному описанию.
	// Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
	НоваяКоманда = ТаблицаКоманд.Добавить();
	НоваяКоманда.Представление = Представление;
	НоваяКоманда.Идентификатор = Идентификатор;
	НоваяКоманда.Использование = Использование;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
	НоваяКоманда.Модификатор = Модификатор;
КонецПроцедуры


//****************************************
ПустоеЗначениеОтбора = "< Отбор не задан >";
мТипXMLБиблиотеки = ПолучитьТипXMLБиблиотеки();
//ГлубинаВыгрузкиДанных = 30*86400;
//СрокХраненияДанных = 10*86400;

КаталогОтправкиФТП = "/in/";
КаталогПриемаФТП = "/out/";
ВременныйКаталогФТП = "/tmp/";
//ФТПТаймаут = 30;

ЗаписьВЖурнал = Ложь;

СоединениеНомер = -1;
СеансПользователь = "---";
СеансНомер = -1;

гОтладка = 0;





