Перем МТ_ТипАгента; 		//супервайзер или торговый агент
Перем МТ_Агент; 			//основной выгружаемый агент
Перем МТ_Код; 				//код основного выгружаемого агента
Перем МТ_Фирма;				//основная фирма для константы
Перем МТ_Склад;				//основной склад для константы
Перем МТ_Валюта;			//основная валюта для константы
Перем МТ_Сообщения;			//Сообщения
Перем МТ_ТипЦен;			//основной тип цен для константы
Перем МТ_ГлубинаОтгрузок;	//глубина выгрузки документов для взаиморасчетов
Перем МТ_Маршруты;			//перечень выгружаемых маршрутов
Перем МТ_ТТТаб;				//территория агента
Перем МТ_Контрагенты;			//список выгружаемых партнеров
Перем МТ_Договора;		//список выгружаемых Соглашений 
Перем МТ_ТТСписок;			//список выгружаемых ТТ 
Перем МТ_ТоварыТаб;			//список выгружаемых товаров
Перем МТ_Товары,МТ_ТоварыОстатокТаб,МТ_ТоварыОстатокТабКопия;
Перем МТ_ГруппыТовара;		//список выгружаемых групп товаров
Перем МТ_Классификаторы;	//список коэффициентов товаров
Перем МТ_ЦеновыеГруппы;	//список коэффициентов товаров
Перем МТ_Склады;		//перечень выгружаемых складов
Перем МТ_ТипыЦен;			//перечень выгружаемых типов цен
Перем МТ_СпецТипыЦен;			//перечень выгружаемых акционных типов цен
Перем МТ_СпецТоварыТаб;			//список выгружаемых акционных товаров
Перем МТ_Единицы;			//перечень выгружаемых единиц товаров
Перем МТ_СтавкиНДС;			//перечень выгружаемых ставок НДС
Перем МТ_Скидки;			//обработка статичных скидок Соглашений
Перем МТ_Акции;
Перем МТ_ЦветаФильтров;
Перем МТ_ТабЗначений;      	//доп таблица значений для заполнения маршрута
Перем ОбъектыВыгрузки, ДокXML, мКолвоОбъектов, мКаталогАгента, мКаталогРепликиАгента,мКаталогФотоАгента Экспорт;

Перем спрМТ_наборТТ;		//Справочник набо Торгових точок
Перем МТ_ТабТТАгента;	//Таблица торгових точек Агента
Перем спрМТ_ТипиЦен;		// Справочник Типи цен
Перем списокМаршрутов; 	// = Новый СписокЗначений;
							//
							//
							//
							//

Функция ФСокрИД(входЭл) Возврат СокрЛП(входЭл.УникальныйИдентификатор()); КонецФункции
Функция ФСокрКод(входЭл)
	Возврат ?(входЭл.Код = "",ФСокрИД(входЭл),СокрЛП(Формат(входЭл.Код,"ЧГ="))); 
КонецФункции
Функция ФСокр(входЭл)
	Возврат СокрЛП(Формат(входЭл,"ЧГ=")); 
КонецФункции

Процедура XMLДобавитьПотомка(pParent, пНазвание, пЗначение)
	child		= ДокXML.CreateElement(пНазвание);
	child.text	= пЗначение;
	pParent.AppendChild(child);
КонецПроцедуры
Процедура ДобавитьПотомка(pParent, пНазвание, пЗначение)
	Попытка
		XMLДобавитьПотомка(pParent, пНазвание, пЗначение);
	Исключение
		Сообщить("ОШИБКА: " + пНазвание + " - " + пЗначение);
	КонецПопытки;	
КонецПроцедуры
Функция ДобавитьОбъект(пДокXML, пXMLСекция, пСообщать = "")
	мКолвоОбъектов	= мКолвоОбъектов + 1;
	object	= пДокXML.CreateElement(пXMLСекция);	
	Возврат object;	
КонецФункции
Процедура ДобавитьНоду(pParent, pChild)
	Если pChild.childNodes().length() > 0 Тогда
		pParent.AppendChild(pChild);
	КонецЕсли;	
КонецПроцедуры
Функция СоздатьНесуществующиеПодкаталоги(пПутьКФайлу)
	лПутьКФайлу = пПутьКФайлу;
	лСЗПодкаталоги = Новый СписокЗначений;
	лЭтоФайл = 1;
	лФайл = Новый Файл(лПутьКФайлу);
	Пока лФайл.Существует() = 0 Цикл
		Если лЭтоФайл = 1 Тогда
			лЭтоФайл = 0;
		Иначе
			лСЗПодкаталоги.Добавить(лПутьКФайлу);
		КонецЕсли;
		р = СтрДлина(лПутьКФайлу);
		Пока р > 1 Цикл
			Если Сред(лПутьКФайлу, р, 1) <> "\" Тогда
				р = р - 1;
				Продолжить;
			КонецЕсли;
			лПутьКФайлу = Лев(лПутьКФайлу, р - 1);
			Прервать;			
		КонецЦикла;
		Если СтрДлина(лПутьКФайлу) <= 1 Тогда
			Прервать;
		КонецЕсли;
		лФайл = Новый Файл(лПутьКФайлу);		
	КонецЦикла;
	р = лСЗПодкаталоги.Количество();
	Пока р > 0 Цикл
		Попытка
			СоздатьКаталог(лСЗПодкаталоги.Получить(р - 1));
		Исключение
			Возврат 1;
		КонецПопытки;
		р = р - 1;		
	КонецЦикла;
	Возврат 1;
КонецФункции
Функция XMLВыполнитьОперацию(пТипОперации, пДокXML, пПараметр1 = "", пПараметр2 = "", пПараметр3 = "") Экспорт
	
	Если пТипОперации = "СоздатьXML" Тогда
		
		//пДокXML	= ПолучитьCOMОбъект("", мТипXMLБибилиотеки);
		пДокXML = Новый COMОбъект("MSXML2.DOMDocument");
		node = пДокXML.CreateProcessingInstruction("xml", "version='1.0' encoding='utf-8'");
		пДокXML.preserveWhiteSpace = 1;
		пДокXML.AppendChild(node);
		
		group = пДокXML.CreateElement(пПараметр2);
		
		Возврат group;
		
	ИначеЕсли пТипОперации = "СохранитьXML" Тогда
		
		лИмяФайлаВыгрузки	= пПараметр1;
		group				= пПараметр2;
		
		Если group.childNodes().length() = 0 Тогда
			Возврат 0;
		КонецЕсли;
		
		пДокXML.AppendChild(group);
		
		лПолноеИмяФайлаВыгрузки	= мКаталогРепликиАгента + лИмяФайлаВыгрузки;
		Если СоздатьНесуществующиеПодкаталоги(лПолноеИмяФайлаВыгрузки) = 0 Тогда
			Сообщить("Не удалось сохранить файл #1" + лПолноеИмяФайлаВыгрузки,);
			Возврат 0;
		КонецЕсли;
		
		Попытка
			пДокXML.Save(лПолноеИмяФайлаВыгрузки);
		Исключение
			Попытка
				пДокXML.Save(лПолноеИмяФайлаВыгрузки);
			Исключение
				Сообщить("Не удалось сохранить файл #2" + лПолноеИмяФайлаВыгрузки);
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
		КонецПопытки; 
		
		Возврат 1;
		
	ИначеЕсли пТипОперации = "ЗаписатьLog" Тогда
		
		лИмяФайлаВыгрузкиДляЛога	= пПараметр1;
		лИмяФайлаЛога				= пПараметр2;
		
		лПолноеИмяФайлаЛога	= мКаталогАгента + лИмяФайлаЛога;
		лФайл	= Новый Файл(лПолноеИмяФайлаЛога);
		Если (МТ_флагОбмена = 1) И (лФайл.Существует()) Тогда
			пДокXML.Load(лПолноеИмяФайлаЛога);
		Иначе
			пДокXML	= Новый COMОбъект("MSXML2.DOMDocument");
			node = пДокXML.CreateProcessingInstruction("xml", "version='1.0' encoding='utf-8'");
			пДокXML.preserveWhiteSpace = 1;
			пДокXML.AppendChild(node);
		КонецЕсли;

		
		
		Попытка
			group	= пДокXML.selectSingleNode("fileslog");
			Если group = Неопределено Тогда
				group = пДокXML.CreateElement("fileslog");
				пДокXML.AppendChild(group);
			КонецЕсли;
		Исключение
			group = пДокXML.CreateElement("fileslog");
			пДокXML.AppendChild(group);
		КонецПопытки;
		
		Попытка
			ToMT = group.selectSingleNode("ToMT");
			Если ToMT = Неопределено Тогда
				ToMT = пДокXML.CreateElement("ToMT");
				group.AppendChild(ToMT);
			КонецЕсли;
		Исключение
			ToMT = пДокXML.CreateElement("ToMT");
			group.AppendChild(ToMT);
		КонецПопытки;
		
		лПозиция	= Найти(лИмяФайлаВыгрузкиДляЛога, "\");
		Пока лПозиция <> 0 Цикл
			лИмяФайлаВыгрузкиДляЛога	= Сред(лИмяФайлаВыгрузкиДляЛога, лПозиция + 1);
			лПозиция	= Найти(лИмяФайлаВыгрузкиДляЛога, "\");
		КонецЦикла;
		Если Прав(лИмяФайлаВыгрузкиДляЛога, 4) = ".xml" Тогда
			лИмяФайлаВыгрузкиДляЛога	= Лев(лИмяФайлаВыгрузкиДляЛога, СтрДлина(лИмяФайлаВыгрузкиДляЛога) - 4);
		КонецЕсли;
		Node = пДокXML.CreateElement(лИмяФайлаВыгрузкиДляЛога);
		Node.SetAttribute("completed", "false");
		ToMT.AppendChild(Node);

		Попытка
			FromMT = group.selectSingleNode("FromMT");
			Если FromMT = Неопределено Тогда
				FromMT = пДокXML.CreateElement("FromMT");
				group.AppendChild(FromMT);
			КонецЕсли;
		Исключение
			FromMT = пДокXML.CreateElement("FromMT");
			group.AppendChild(FromMT);
		КонецПопытки;
		Сообщить(лПолноеИмяФайлаЛога);
		
		пДокXML.Save(лПолноеИмяФайлаЛога);
		
		Возврат 1;
	КонецЕсли;
	
КонецФункции
Процедура ДобавитьВОчередь(кодАгента)
	МТ_Агент = Справочники.МТ_МаршрутыАгентов.НайтиПоКоду(кодАгента);
	НоваяСтрока = ТаблицаМаршрутов.Добавить();
	НоваяСтрока.Агент = МТ_Агент.Ссылка;
	НоваяСтрока.ФизЛицо = МТ_Агент.Агент.Ссылка;
	НоваяСтрока.КПККод = кодАгента;
КонецПроцедуры
Процедура ПолучитьСписокАгентов()
	МТ_Маршруты = Новый ТаблицаЗначений;
	//МТ_Маршруты.Колонки.Добавить("Маршрут");
	МТ_Маршруты.Колонки.Добавить("Агент");
	МТ_Маршруты.Колонки.Добавить("Код");
	ТекМаршрут = МТ_Маршруты.Добавить();
	//ТекМаршрут.Маршрут = МТ_Агент;
	ТекМаршрут.Агент = МТ_Агент;
	ТекМаршрут.Код = МТ_Агент.Код;
КонецПроцедуры
Функция ПолучитьТоварыОстатки()
	Запрос =Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Товары.Код КАК Код,
		|	Товары.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Товары
		|ГДЕ
		|	НЕ Товары.ПометкаУдаления
		|	И НЕ Товары.ЭтоГруппа";
		Если МТ_Агент.ПереченьТоваров.Ссылка <> Справочники.МТ_ПереченьТоваров.Все Тогда
			Запрос.Текст = Запрос.Текст + "	
			|	И Товары.Родитель В ИЕРАРХИИ(&ПереченьТоваров)";
		Запрос.УстановитьПараметр("ПереченьТоваров", МТ_Агент.ПереченьТоваров.Товары.ВыгрузитьКолонку("Товар"));
		КонецЕсли;
	МТ_Товары = Запрос.Выполнить().Выгрузить();
	Запрос =Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Товары.Код Как Код,
		|	Товары.Ссылка Как Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Товары
		|ГДЕ
		|	НЕ Товары.ПометкаУдаления
		|	И Товары.Ссылка В (&ПереченьТоваров)
		|ИТОГИ ПО
		|    Ссылка ТОЛЬКО ИЕРАРХИЯ";
	Запрос.УстановитьПараметр("ПереченьТоваров", МТ_Товары.ВыгрузитьКолонку("Ссылка"));
	МТ_ГруппыТовара = Запрос.Выполнить().Выгрузить();
	МТ_ГруппыТовара.Свернуть("Ссылка");
	МТ_ГруппыТовара = МТ_ГруппыТовара.ВыгрузитьКолонку("Ссылка")
КонецФункции
Функция ЗаполнениеСписковМаршрута(ТекСтрока)
	Попытка
		Если (НЕ ЗначениеЗаполнено(ТекСтрока.Контрагент))Тогда
			Сообщить("Возникли проблемы с _ТТ:"+ТекСтрока.ТорговаяТочка + " _Контрагент:" + ТекСтрока.Контрагент);
			Возврат 0;
		КонецЕсли;
		Если МТ_ТТСписок.НайтиПоЗначению(ТекСтрока.Контрагент.Ссылка) = Неопределено Тогда
			МТ_ТТСписок.Добавить(ТекСтрока.Контрагент.Ссылка);
		КонецЕсли;
	Исключение
	КонецПопытки
КонецФункции
//Функция СохранитьФото(Товар)
//	//Если НАйтиФайлы(мКаталогФотоАгента+Товар.Код+".jpg").Количество() = 0 Тогда
//	//	мОсновноеИзображение = Товар.ОсновноеИзображение.Хранилище.Получить();
//	//	Если Не(ПустаяСтрока(мОсновноеИзображение)) Тогда
//	//        мОсновноеизображение.Записать(мКаталогФотоАгента+Товар.Код+".jpg");
//	//		мОсновноеизображение.Записать(мКаталогРепликиАгента+Товар.Код+".jpg");
//	//	КонецЕсли;
//	//КонецЕсли;
//КонецФункции
Функция СохранитьФото(Товар,ИмяФото)
	ПутьФотоТовара = мКаталогФотоАгента+ИмяФото;
	Если НАйтиФайлы(ПутьФотоТовара).Количество() = 0 Тогда
		//МТ_ДДФайл = ПрисоединенныеФайлы.ПолучитьДанныеФайла(Товар.ОсновноеИзображение).СсылкаНаДвоичныеДанныеФайла;
		//МТ_Изображение = Новый Картинка(ПолучитьИзВременногоХранилища(МТ_ДДФайл));
		МТ_Изображение = Товар.ОсновноеИзображение.Хранилище.Получить();
		Если Не(ПустаяСтрока(МТ_Изображение)) Тогда
			МТ_Изображение.Записать(ПутьФотоТовара);
			МТ_Изображение.Записать(мКаталогРепликиАгента+ИмяФото);
       	КонецЕсли;
	КонецЕсли;	
КонецФункции

Функция ПолучитьИнформациюТТ(ТТСписок)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Контрагенты.Ссылка КАК Контрагент,
		|	АдресТТ.Представление КАК Адрес,
		|	ТелефонТТ.Представление КАК Телефон
		|ИЗ
		|Справочник.Контрагенты КАК Контрагенты
		|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|  			КонтактнаяИнформация.Представление,
		|  			КонтактнаяИнформация.Объект
		|		ИЗ
		|			РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|		ГДЕ
		|			КонтактнаяИнформация.Вид В (&ВидАТТ)
		|			И КонтактнаяИнформация.Тип В (&ТипАТТ)) КАК АдресТТ
		|	ПО 
		|		Контрагенты.Ссылка = АдресТТ.Объект
		|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|  			КонтактнаяИнформация.Представление,
		|  			КонтактнаяИнформация.Объект
		|		ИЗ
		|			РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|		ГДЕ
		|			КонтактнаяИнформация.Вид В (&ВидТТТ)
		|			И КонтактнаяИнформация.Тип В (&ТипТТТ)) КАК ТелефонТТ
		|	ПО 
		|		Контрагенты.Ссылка = ТелефонТТ.Объект
		|ГДЕ
		|	Контрагенты.Ссылка В (&ТТСписок)
		|УПОРЯДОЧИТЬ ПО
		|	Контрагент";   
	Запрос.УстановитьПараметр("ВидАТТ", Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
	Запрос.УстановитьПараметр("ТипАТТ", Перечисления.ТипыКонтактнойИнформации.Адрес);
	Запрос.УстановитьПараметр("ВидТТТ", Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента);
	Запрос.УстановитьПараметр("ТипТТТ", Перечисления.ТипыКонтактнойИнформации.Телефон);
	Запрос.УстановитьПараметр("ТТСписок", ТТСписок);
	Возврат Запрос.Выполнить().Выгрузить(); 
КонецФункции
Процедура ПолучитьСкидкиТТ()
	Запрос =Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДействиеСкидокНаценокСрезПоследних.Источник КАК Соглашение,
	|	ДействиеСкидокНаценокСрезПоследних.СкидкаНаценка,
	|	ДействиеСкидокНаценокСрезПоследних.СкидкаНаценка.СпособПредоставления,
	|	ДействиеСкидокНаценокСрезПоследних.СкидкаНаценка.ЗначениеСкидкиНаценки
	|ИЗ
	|	РегистрСведений.ДействиеСкидокНаценок.СрезПоследних КАК ДействиеСкидокНаценокСрезПоследних
	|ГДЕ 
	|	ДействиеСкидокНаценокСрезПоследних.Источник В (&МТ_Договора)
	|	И ДействиеСкидокНаценокСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДействияСкидок.Действует)";
	Запрос.УстановитьПараметр("МТ_Договора", МТ_Договора);
	МТ_Скидки = Запрос.Выполнить().Выгрузить(); 
КонецПроцедуры
Процедура ПолучитьАкции()
	Запрос =Новый Запрос;
	Запрос.Текст = 
	"Выбрать
	|	АктуальныеСкидки.СкидкаНаценка,
	|	АктуальныеСкидки.Регистратор.МаркетинговоеМероприятие.всПодразделение КАК Подразделение,
	|	АктуальныеСкидки.Регистратор.МаркетинговоеМероприятие
	|ИЗ
	|	РегистрСведений.УдалитьДействиеСкидокНаценок.СрезПоследних(&ДатаЗК, ) КАК АктуальныеСкидки
	|ГДЕ
	|	(АктуальныеСкидки.Регистратор ССЫЛКА Документ.УстановкаСкидокНаценок 
	|	И (АктуальныеСкидки.Регистратор.МаркетинговоеМероприятие.всПодразделение = &МТ_Подразделение ИЛИ АктуальныеСкидки.Регистратор.МаркетинговоеМероприятие.всПодразделение = &ПустоеПодразделение)
	|	И (АктуальныеСкидки.ДатаОкончания = &ПустаяДата ИЛИ АктуальныеСкидки.ДатаОкончания > &ДатаЗК))";
	Запрос.УстановитьПараметр("ДатаЗК",НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("МТ_Подразделение",МТ_Агент.Агент.ТекущееПодразделение);
	Запрос.УстановитьПараметр("ПустаяДата", Дата(1,1,1));
	Запрос.УстановитьПараметр("ПустоеПодразделение",Справочники.СтруктураПредприятия.ПустаяСсылка());
	МТ_Акции = Запрос.Выполнить().Выгрузить(); 
КонецПроцедуры
Функция ТаблицаЦветов() Экспорт
	ТаблицаЦ = Новый ТаблицаЗначений;
	ТаблицаЦ.Колонки.Добавить("НазваниеЦвета");
	ТаблицаЦ.Колонки.Добавить("ЗначениеЦвета");
	Стр = ТаблицаЦ.Добавить();
	Стр.НазваниеЦвета = "Beige (Бежевый)";
	Стр.ЗначениеЦвета = Строка(Формат(220*256*256 + 245*256 + 245,"ЧГ=0"));
	Стр = ТаблицаЦ.Добавить();
	Стр.НазваниеЦвета = "Blue (Синий)";
	Стр.ЗначениеЦвета = Строка(Формат(255*256*256 + 0*256 + 0,"ЧГ=0"));
	Стр = ТаблицаЦ.Добавить();
	Стр.НазваниеЦвета = "BlueViolet (Сине-фиолетовый)";
	Стр.ЗначениеЦвета = Строка(Формат(226*256*256 + 43*256 + 138,"ЧГ=0"));
	Стр = ТаблицаЦ.Добавить();
	Стр.НазваниеЦвета = "Brown (Коричневый)";
	Стр.ЗначениеЦвета = Строка(Формат(042*256*256 + 042*256 + 165,"ЧГ=0"));
	Стр = ТаблицаЦ.Добавить();
	Стр.НазваниеЦвета = "Chocolate (Шоколадный)";
	Стр.ЗначениеЦвета = Строка(Формат(30*256*256 + 105*256 + 210,"ЧГ=0"));
	Стр = ТаблицаЦ.Добавить();
	Стр.НазваниеЦвета = "DarkRed (Темно-красный)";
	Стр.ЗначениеЦвета = Строка(Формат(139,"ЧГ=0"));
	Стр = ТаблицаЦ.Добавить();
	Стр.НазваниеЦвета = "LightBlue (Голубой)";
	Стр.ЗначениеЦвета = Строка(Формат(230*256*256 + 216*256 + 173,"ЧГ=0"));
	Стр = ТаблицаЦ.Добавить();
	Стр.НазваниеЦвета = "Pink (Розовый)";
	Стр.ЗначениеЦвета = Строка(Формат(203*256*256 + 192*256 + 255,"ЧГ=0"));
	Стр = ТаблицаЦ.Добавить();
	Стр.НазваниеЦвета = "Red (Красный)";
	Стр.ЗначениеЦвета = "255";
	Стр = ТаблицаЦ.Добавить();
	Стр.НазваниеЦвета = "Tomato (Томатный)";
	Стр.ЗначениеЦвета = Строка(Формат(71*256*256 + 99*256 + 255,"ЧГ=0"));
	Стр = ТаблицаЦ.Добавить();
	Стр.НазваниеЦвета = "Violet (Фиолетовый)";
	Стр.ЗначениеЦвета = Строка(Формат(238*256*256 + 130*256 + 238,"ЧГ=0"));
	Возврат ТаблицаЦ;
	
КонецФункции
Функция ВыгрузитьСпрМаршруты(group)
	routes = ДокXML.CreateElement("routes");
	спрМТ_МаршрутыАгентов = Справочники.МТ_МаршрутыАгентов.Выбрать();
	врем = 3;
	МТ_ТабТТАгента = Новый ТаблицаЗначений;
	МТ_ТабТТАгента.Очистить();
	МТ_ТабТТАгента.Колонки.Добавить("ТТ");
	
	//списокМаршрутов = Справочники.МТ_МаршрутыАгентов.Выбрать();
	//Пока списокМаршрутов.Следующий() Цикл
	//	Если не(врем = 1) Тогда
	//		
		 		
		route = ДобавитьОбъект(ДокXML, "route"); 
		ДобавитьПотомка(route, "code","employee_" + ФСокр(МТ_Агент.Код));
		ДобавитьПотомка(route, "deleted", 0);
		ДобавитьПотомка(route, "printcode", Число(МТ_Агент.Код));
		ДобавитьПотомка(route, "employeecode", "employee_" + ФСокр(МТ_Агент.Код));
		routebuypoints = ДобавитьОбъект(ДокXML, "routebuypoints");
		Пока спрМТ_МаршрутыАгентов.Следующий() Цикл					//Цикл по маршрутам
			спрМТ_наборТТ = Справочники.МТ_НаборТТ.Выбрать(); 
			Если МТ_Агент = спрМТ_МаршрутыАгентов.Агент.Ссылка Тогда
				//Сообщить(МТ_Агент.Код);
				
				
				Пока спрМТ_наборТТ.Следующий() Цикл  				//Цикл по ТТочкам
					Если спрМТ_наборТТ.Владелец.Наименование = спрМТ_МаршрутыАгентов.Наименование Тогда
						//Сообщить("		" + Число(спрМТ_наборТТ.Код));	
						buypoint = ДобавитьОбъект(ДокXML, "buypoint");
						ДобавитьПотомка(buypoint, "buypointcode", "buypoint_" + ФСокрКод(спрМТ_наборТТ.ТорговаяТочка));
						ДобавитьПотомка(buypoint, "day", Перечисления.ДниНедели.Индекс(спрМТ_МаршрутыАгентов.ДеньНедели)+1);
						ДобавитьНоду(routebuypoints, buypoint);
						
						НоваСтрока = МТ_ТабТТАгента.Добавить();
						НоваСтрока.ТТ = спрМТ_наборТТ.ТорговаяТочка;
						
					КонецЕсли; 
								
				КонецЦикла;
				

			КонецЕсли; 
			
		КонецЦикла;
		ДобавитьНоду(route, routebuypoints);
		ДобавитьНоду(routes, route);
		route = ДобавитьОбъект(ДокXML, "route"); 
		ДобавитьПотомка(route, "code","employee_" + "9");
		ДобавитьПотомка(route, "deleted", 0);
		ДобавитьПотомка(route, "printcode", 9);
		ДобавитьПотомка(route, "employeecode", "employee_" + "9");
		ДобавитьНоду(routes, route);
	//	врем = врем - 1;
	//	КонецЕсли;	
	//КонецЦикла;
	МТ_ТабТТАгента.Свернуть("ТТ");	
	//МТ_ТТСписок = ПолучитьИнформациюТТ(МТ_ТТСписок);
	//ПолучитьСкидкиТТ();
	//ПолучитьАкции();
	//ПолучитьТоварыОстатки();
	Если МТ_флагОбмена = 0 Тогда
		ДобавитьНоду(group, routes);	
	КонецЕсли;
КонецФункции
Функция ВыгрузитьСпрФирмы(group)
	firms = ДокXML.CreateElement("firms");
	firm = ДобавитьОбъект(ДокXML, "firm");
	ДобавитьПотомка(firm, "code","firm_" + ФСокрКод(МТ_Фирма.Ссылка));
	ДобавитьПотомка(firm, "name", ?(СокрЛП(МТ_Фирма.Наименование)="","Фирма",МТ_Фирма.Наименование));
	ДобавитьПотомка(firm, "deleted", 0);
	ДобавитьНоду(firms, firm);
	ДобавитьНоду(group, firms);
КонецФункции
Функция ВыгрузитьСпрСотрудники(group)
	employees = ДокXML.CreateElement("employees");
	МТ_Агенти = Справочники.ФизическиеЛица.Выбрать();
	Пока МТ_Агенти.Следующий() Цикл
		employee = ДобавитьОбъект(ДокXML, "employee");
		ДобавитьПотомка(employee, "code", "employee_" + ФСокр(МТ_Агенти.Код));
		ДобавитьПотомка(employee, "name", МТ_Агенти.Наименование);
		//Сообщить(МТ_Агенти.Наименование);
		ДобавитьПотомка(employee, "deleted", 0);
		ДобавитьНоду(employees, employee);		
	КонецЦикла; 
	ДобавитьНоду(group, employees);
КонецФункции
Функция ВыгрузитьСпрСклады(group)
	stores = ДокXML.CreateElement("stores");
	//Для Каждого элСписка Из МТ_Агент.ПереченьСкладов.Склады Цикл
	//	МТ_Склад = элСписка.Склад;
	//	Если НЕ МТ_Склад.ПометкаУдаления ИЛИ НЕ МТ_Склад.ЭтоГруппа Тогда
	//		Если МТ_Склады.НайтиПоЗначению(МТ_Склад) = НЕОПРЕДЕЛЕНО Тогда
	//			МТ_Склады.Добавить(МТ_Склад);
	//		КонецЕсли;
	//		store = ДобавитьОбъект(ДокXML, "store");
	//	    ДобавитьПотомка(store, "code", "store_"+ФСокрКод(МТ_Склад));
	//		ДобавитьПотомка(store, "name", МТ_Склад.Наименование);
	//	    ДобавитьПотомка(store, "deleted", 0);
	//		ДобавитьПотомка(store, "storetype", 2);
	//	    ДобавитьНоду(stores, store);
	//	КонецЕсли;
	//КонецЦикла;
	спр_Склады = Справочники.Склады.Выбрать();
	Пока спр_Склады.Следующий() Цикл
		Если НЕ спр_Склады.ПометкаУдаления ИЛИ НЕ спр_Склады.ЭтоГруппа Тогда
			store = ДобавитьОбъект(ДокXML, "store");
		    ДобавитьПотомка(store, "code", "store_"+ФСокрКод(спр_Склады));
			ДобавитьПотомка(store, "name", спр_Склады.Наименование);
		    ДобавитьПотомка(store, "deleted", 0);
			ДобавитьПотомка(store, "storetype", 2);
		    ДобавитьНоду(stores, store)
		КонецЕсли;
	КонецЦикла; 
	Если МТ_флагОбмена = 0 Тогда
		ДобавитьНоду(group, stores);	
	КонецЕсли;
КонецФункции
Функция ВыгрузитьСпрВалюты(group)
	currencies = ДокXML.CreateElement("currencies");	
	спрМТ_Валюта = Справочники.Валюты.Выбрать();
	Пока спрМТ_Валюта.Следующий() Цикл
		currency = ДобавитьОбъект(ДокXML, "currency");
		ДобавитьПотомка(currency, "code", "currency_"+ФСокрКод(спрМТ_Валюта));
		ДобавитьПотомка(currency, "name", спрМТ_Валюта.Наименование);
		ДобавитьПотомка(currency, "deleted", 0);
		ДобавитьНоду(currencies, currency);
	КонецЦикла; 
	ДобавитьНоду(group, currencies);
КонецФункции 

Функция ВыгрузитьСпрСообщения(group)
	messages = ДокXML.CreateElement("messages");
	спрМТ_Сообщения = Справочники.Сообщения_МТ.Выбрать();
	Пока спрМТ_Сообщения.Следующий() Цикл
		Если спрМТ_Сообщения.КодыПолучателей.Количество() = 0 и спрМТ_Сообщения.ДатаОкончания > НачалоДня(ТекущаяДата()) Тогда
				message = ДобавитьОбъект(ДокXML, "message");
				ДобавитьПотомка(message, "code", "message_"+ФСокр(спрМТ_Сообщения.Код));
				ДобавитьПотомка(message, "name", спрМТ_Сообщения.Наименование);
				ДобавитьПотомка(message, "deleted", 0);
				ДобавитьПотомка(message, "employeecode", "employee_" + ФСокр(спрМТ_Сообщения.Сотрудник.Код));  // 
				ДобавитьПотомка(message, "messagedisplay", 0);
				ДобавитьПотомка(message, "startdate", Формат(спрМТ_Сообщения.ДатаСтарта,"ДФ=yyyy-MM-dd"));
				//ДобавитьПотомка(message, "distributorcode", ФСокр(спрМТ_Сообщения.Дистрибыютор.Код));
				ДобавитьПотомка(message, "isUrgent", ?(спрМТ_Сообщения.Срочность,"True","False"));
				ДобавитьПотомка(message, "isCompleted", ?(спрМТ_Сообщения.Завершонность,"True","False"));
				//ДобавитьПотомка(message, "enddate", Формат(спрМТ_Сообщения.ДатаОкончания,"ДФ=yyyy-MM-dd"));
				ДобавитьПотомка(message, "SheduleType", "0");  // спрМТ_Сообщения.ТипРасписания
			//SheduleDays = ДобавитьОбъект(ДокXML, "SheduleDays");
			//	SheduleDay = ДобавитьОбъект(ДокXML, "SheduleDay");
			//		ДобавитьПотомка(SheduleDay, "code", спрМТ_Сообщения.ПорядочныйНомер);
			//	ДобавитьНоду(SheduleDays,SheduleDay);
			//ДобавитьНоду(message,SheduleDays);
				//receivers = ДобавитьОбъект(ДокXML, "receivers");
				//	receiver = ДобавитьОбъект(ДокXML, "receiver");
				//    	ДобавитьПотомка(receiver, "code","employee_" + ФСокр(МТ_Агент.Код)); 	//"employee_" + 
				//	ДобавитьНоду(receivers,receiver);
				//ДобавитьНоду(message,receivers);		
				//receivers = ДобавитьОбъект(ДокXML, "receivers");
				//Для Каждого Строка Из спрМТ_Сообщения.КодыПолучателей Цикл
				//	receiver = ДобавитьОбъект(ДокXML, "receiver");
				//		ДобавитьПотомка(receiver, "code","employee_" + ФСокр(Строка.КодПолучателя.Код)); 	//"employee_" + 
				//	ДобавитьНоду(receivers,receiver);					
				//КонецЦикла;			 
				//ДобавитьНоду(message,receivers);
			
			
			buypoints = ДобавитьОбъект(ДокXML, "buypoints");
			Для Каждого Строка Из спрМТ_Сообщения.КодыТТ Цикл
				buypoint = ДобавитьОбъект(ДокXML, "buypoint");
					ДобавитьПотомка(buypoint, "code", "buypoint_" + ФСокрКод(Строка.КодТТ));
				ДобавитьНоду(buypoints,buypoint);					
			КонецЦикла;			 
			ДобавитьНоду(message,buypoints); 
			ДобавитьНоду(messages, message);
		ИначеЕсли спрМТ_Сообщения.КодыПолучателей.Количество() > 0 и спрМТ_Сообщения.ДатаОкончания > НачалоДня(ТекущаяДата()) Тогда
			Для Каждого Строка Из спрМТ_Сообщения.КодыПолучателей Цикл
				Если Строка.КодПолучателя.Код = МТ_Агент.Код Тогда
				  message = ДобавитьОбъект(ДокXML, "message");
					ДобавитьПотомка(message, "code", "message_"+ФСокр(спрМТ_Сообщения.Код));
					ДобавитьПотомка(message, "name", спрМТ_Сообщения.Наименование);
					ДобавитьПотомка(message, "deleted", 0);
					ДобавитьПотомка(message, "employeecode", "employee_" + ФСокр(спрМТ_Сообщения.Сотрудник.Код));  // 
					ДобавитьПотомка(message, "messagedisplay", 0);
					ДобавитьПотомка(message, "startdate", Формат(спрМТ_Сообщения.ДатаСтарта,"ДФ=yyyy-MM-dd"));
					//ДобавитьПотомка(message, "distributorcode", ФСокр(спрМТ_Сообщения.Дистрибыютор.Код));
					ДобавитьПотомка(message, "isUrgent", ?(спрМТ_Сообщения.Срочность,"True","False"));
					ДобавитьПотомка(message, "isCompleted", ?(спрМТ_Сообщения.Завершонность,"True","False"));
					//ДобавитьПотомка(message, "enddate", Формат(спрМТ_Сообщения.ДатаОкончания,"ДФ=yyyy-MM-dd"));
					ДобавитьПотомка(message, "SheduleType", "0");  // спрМТ_Сообщения.ТипРасписания
					//SheduleDays = ДобавитьОбъект(ДокXML, "SheduleDays");
					//	SheduleDay = ДобавитьОбъект(ДокXML, "SheduleDay");
					//		ДобавитьПотомка(SheduleDay, "code", спрМТ_Сообщения.ПорядочныйНомер);
					//	ДобавитьНоду(SheduleDays,SheduleDay);
					//ДобавитьНоду(message,SheduleDays);
					
					receivers = ДобавитьОбъект(ДокXML, "receivers");
					receiver = ДобавитьОбъект(ДокXML, "receiver");
			        	ДобавитьПотомка(receiver, "code","employee_" + ФСокр(МТ_Агент.Код)); 	//"employee_" + 
					ДобавитьНоду(receivers,receiver);
					ДобавитьНоду(message,receivers);
				
					//receivers = ДобавитьОбъект(ДокXML, "receivers");
					//Для Каждого Строка Из спрМТ_Сообщения.КодыПолучателей Цикл
					//	receiver = ДобавитьОбъект(ДокXML, "receiver");
					//		ДобавитьПотомка(receiver, "code","employee_" + ФСокр(Строка.КодПолучателя.Код)); 	//"employee_" + 
					//	ДобавитьНоду(receivers,receiver);					
					//КонецЦикла;			 
					//ДобавитьНоду(message,receivers);
								
					buypoints = ДобавитьОбъект(ДокXML, "buypoints");
					Для Каждого Строка Из спрМТ_Сообщения.КодыТТ Цикл
						buypoint = ДобавитьОбъект(ДокXML, "buypoint");
							ДобавитьПотомка(buypoint, "code", "buypoint_" + ФСокрКод(Строка.КодТТ));
						ДобавитьНоду(buypoints,buypoint);					
					КонецЦикла;			 
					ДобавитьНоду(message,buypoints);
	              ДобавитьНоду(messages, message);

				КонецЕсли; 
			КонецЦикла;
			 
		КонецЕсли;
	КонецЦикла;

	ДобавитьНоду(group, messages);
КонецФункции

Функция ВыгрузитьСпрТипыОплаты(group)
	paytypes = ДокXML.CreateElement("paytypes");
	paytype = ДобавитьОбъект(ДокXML, "paytype");
	ДобавитьПотомка(paytype, "code", "paytype_1");
	ДобавитьПотомка(paytype, "name", "Відтермінування" );
	ДобавитьПотомка(paytype, "deleted", 0);
	ДобавитьНоду(paytypes, paytype);
	paytype = ДобавитьОбъект(ДокXML, "paytype");
	ДобавитьПотомка(paytype, "code", "paytype_2");
	ДобавитьПотомка(paytype, "name", "Факт" );
	ДобавитьПотомка(paytype, "deleted", 0);
	ДобавитьНоду(paytypes, paytype);
	ДобавитьНоду(group, paytypes);
КонецФункции
Функция ВыгрузитьСпрПокупатели(group)
	buyers = ДокXML.CreateElement("buyers");
	спрТТ = Справочники.Контрагенты.Выбрать();
	Для каждого Покупатель Из МТ_ТабТТАгента Цикл 
		Пока спрТТ.Следующий() Цикл
			Если спрТТ.ЭтоГруппа = Ложь и спрТТ.ПометкаУдаления = Ложь и (Строка(спрТТ.Наименование) = Строка(Покупатель.ТТ))  Тогда  // и спрМТ_наборТТ.ТорговаяТочка.Код = МТ_Агент.Код
				buyer = ДобавитьОбъект(ДокXML, "buyer");
				ДобавитьПотомка(buyer, "code", "buyer_" + ФСокрКод(спрТТ.Ссылка));
				ДобавитьПотомка(buyer, "name", СокрЛП(спрТТ.Наименование));
				ДобавитьПотомка(buyer, "deleted", 0);
				ДобавитьПотомка(buyer, "printcode", ФСокрКод(спрТТ.Ссылка));
				ДобавитьПотомка(buyer, "buyercode", "buyer_" + ФСокрКод(спрТТ.Ссылка));
				counteragents = ДобавитьОбъект(ДокXML, "counteragents");
				counteragent = ДобавитьОбъект(ДокXML, "counteragent");
				ДобавитьПотомка(counteragent, "counteragentcode", "counteragent_" + ФСокрКод(спрТТ.Ссылка));
				ДобавитьНоду(counteragents, counteragent);
				ДобавитьНоду(buyer, counteragents);
				ДобавитьНоду(buyers, buyer);	
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	ДобавитьНоду(group, buyers);
КонецФункции
Функция ВыгрузитьСпрДоговора(group)
	agreements = ДокXML.CreateElement("agreements");
	МТ_ТипыЦен.Добавить(МТ_ТипЦен.Ссылка);
	итератор = 0;
	Запрос =Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДоговорыКонтрагентов.Ссылка Как Договор
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Владелец.Ссылка В(&МТ_Контрагенты)
		|	И НЕ ДоговорыКонтрагентов.ПометкаУдаления";
	Запрос.УстановитьПараметр("МТ_Контрагенты", МТ_Контрагенты);
	МТ_Договора = Запрос.Выполнить().Выгрузить();
	Для Каждого элТТ из МТ_Договора Цикл
		Договор = элТТ.Договор;
        agreement = ДобавитьОбъект(ДокXML, "agreement");
		ДобавитьПотомка(agreement, "code", "agreement_" + ФСокрКод(Договор) + "_" + ФСокрКод(Договор.Владелец));
		ДобавитьПотомка(agreement, "name", ФСокр(Договор.Наименование));
		ДобавитьПотомка(agreement, "deleted", 0);
		ДобавитьПотомка(agreement, "firmcode", "firm_" + ФСокрКод(МТ_Фирма.Ссылка));
		ДобавитьПотомка(agreement, "startdate", ДобавитьМесяц(ТекущаяДата(), -12));
		ДобавитьПотомка(agreement, "enddate", ДобавитьМесяц(ТекущаяДата(), 12));
		ДобавитьПотомка(agreement, "counteragentcode", "counteragent_" + ФСокрКод(Договор.Владелец));
		Если ЗначениеЗаполнено(Договор.ТипЦен) Тогда
			Если ТипЗнч(Справочники.ТипыЦенНоменклатуры.ПустаяСсылка()) <> ТипЗнч(Договор.ТипЦен) Тогда
				текТипЦен = Договор.ТипЦен.ТипЦеныНоменклатуры.Ссылка;
			Иначе
				текТипЦен = Договор.ТипЦен.Ссылка;
			КонецЕсли;
		Иначе
			текТипЦен = МТ_ТипЦен;	
		КонецЕсли;
		Если НЕ текТипЦен = Справочники.типыЦенНоменклатуры.ПустаяСсылка() Тогда
			ДобавитьПотомка(agreement, "pricetypecode", "pricetype_"+ФСокрКод(текТипЦен));
			Если МТ_ТипыЦен.НайтиПоЗначению(текТипЦен.Ссылка) = Неопределено Тогда
				МТ_ТипыЦен.Добавить(текТипЦен.Ссылка);	
			КонецЕсли;
			Если НЕ текТипЦен.БазовыйТипЦен.Ссылка = Справочники.ТипыЦенНоменклатуры.ПустаяСсылка() Тогда
				Если МТ_ТипыЦен.НайтиПоЗначению(текТипЦен.БазовыйТипЦен.Ссылка) = Неопределено Тогда
					МТ_ТипыЦен.Добавить(текТипЦен.БазовыйТипЦен.Ссылка);	
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Отбор = Новый Структура;
    	Отбор.Вставить("Контрагент", Договор.Владелец.Ссылка);
		ТТКонтрагента = МТ_ТТТаб.НайтиСтроки(Отбор);
		buypoints = ДокXML.CreateElement("buypoints");
		Для Каждого текТТ Из ТТКонтрагента Цикл
			buypoint = ДобавитьОбъект(ДокXML, "buypoint");
			ДобавитьПотомка(buypoint, "code", "buypoint_" + ФСокрКод(текТТ.ТорговаяТочка));
			ДобавитьПотомка(buypoint, "isBase", 1);
			ДобавитьПотомка(buypoint, "deleted", 0);
			ДобавитьНоду(buypoints, buypoint);
		КонецЦикла;
		ДобавитьНоду(agreement, buypoints);
		ДобавитьНоду(agreements, agreement);
		итератор = итератор + 1;
	КонецЦикла;
	ДобавитьНоду(group, agreements);
КонецФункции
Функция ВыгрузитьСпрТорговыеТочки(group)
	buypoints = ДокXML.CreateElement("buypoints");
	МТ_ТТСписок = Новый СписокЗначений;
	спрТТ = Справочники.Контрагенты.Выбрать();
	Для каждого ТорговаяТочка Из МТ_ТабТТАгента Цикл 
		Пока спрТТ.Следующий() Цикл
			Если спрТТ.ЭтоГруппа = Ложь и спрТТ.ПометкаУдаления = Ложь и (Строка(спрТТ.Наименование) = Строка(ТорговаяТочка.ТТ))  Тогда  // и спрМТ_наборТТ.ТорговаяТочка.Код = МТ_Агент.Код
				buypoint = ДобавитьОбъект(ДокXML, "buypoint");
				ДобавитьПотомка(buypoint, "code", "buypoint_" + ФСокрКод(спрТТ.Ссылка));
				ДобавитьПотомка(buypoint, "name", СокрЛП(спрТТ.Наименование));
				ДобавитьПотомка(buypoint, "deleted", 0);
				ДобавитьПотомка(buypoint, "printcode", ФСокрКод(спрТТ.Ссылка));
				ДобавитьПотомка(buypoint, "buyercode", "buyer_" + ФСокрКод(спрТТ.Ссылка));
				ДобавитьПотомка(buypoint, "address", УправлениеКонтактнойИнформацией.ПолучитьАдресИзКонтактнойИнформации(спрТТ.Ссылка,"Фактический"));
				ДобавитьПотомка(buypoint, "fullname", СокрЛП(спрТТ.НаименованиеПолное));
				ДобавитьПотомка(buypoint, "phone", УправлениеКонтактнойИнформацией.ПолучитьТелефонИзКонтактнойИнформации(спрТТ.Ссылка));
				ДобавитьПотомка(buypoint, "canexceedlimit",  0);
				ДобавитьНоду(buypoints, buypoint);	
				МТ_ТТСписок.Добавить(спрТТ.Ссылка);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла; 
	ДобавитьНоду(group, buypoints);
КонецФункции
Функция ВыгрузитьСпрФормальныеПокупатели(group)
	counteragents = ДокXML.CreateElement("counteragents");
	спрТТ = Справочники.Контрагенты.Выбрать();
	Для каждого ТорговаяТочка Из МТ_ТабТТАгента Цикл 
		Пока спрТТ.Следующий() Цикл
			Если спрТТ.ЭтоГруппа = Ложь и спрТТ.ПометкаУдаления = Ложь и (Строка(спрТТ.Наименование) = Строка(ТорговаяТочка.ТТ))  Тогда  // и спрМТ_наборТТ.ТорговаяТочка.Код = МТ_Агент.Код
				counteragent = ДобавитьОбъект(ДокXML, "counteragent");
				ДобавитьПотомка(counteragent, "code", "buypoint_" + ФСокрКод(спрТТ.Ссылка));
				ДобавитьПотомка(counteragent, "name", СокрЛП(спрТТ.Наименование));
				ДобавитьПотомка(counteragent, "deleted", 0);
				ДобавитьНоду(counteragents, counteragent);	
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	ДобавитьНоду(group, counteragents);
КонецФункции
Функция ВыгрузитьСпрТипыЦен(group)
	pricetypes	= ДокXML.CreateElement("pricetypes");
	спрМТ_ТипиЦен = Справочники.ТипыЦенНоменклатуры.Выбрать();
	Пока спрМТ_ТипиЦен.Следующий() Цикл
		Если спрМТ_ТипиЦен.ПометкаУдаления = Ложь Тогда
			pricetype	= ДобавитьОбъект(ДокXML, "pricetype");
			ДобавитьПотомка(pricetype, "code"			, "pricetype_" + ФСокрКод(спрМТ_ТипиЦен));
			ДобавитьПотомка(pricetype, "name"			, СокрЛП(спрМТ_ТипиЦен.Наименование));
			ДобавитьПотомка(pricetype, "deleted"		, "0");
			ДобавитьПотомка(pricetype, "currencycode"	, "currency_"+ФСокрКод(спрМТ_ТипиЦен.ВалютаЦены));
			ДобавитьНоду(pricetypes, pricetype);	
		КонецЕсли; 
	КонецЦикла; 
	ДобавитьНоду(group, pricetypes);
КонецФункции
Функция ВыгрузитьСпрГруппыТоваров(group)
	SKUgroups = ДокXML.CreateElement("SKUgroups");
	МТ_ГруппыТовара = Справочники.Номенклатура.Выбрать();
	Пока МТ_ГруппыТовара.Следующий() Цикл
		Если МТ_ГруппыТовара.ПометкаУдаления = Ложь и МТ_ГруппыТовара.ЭтоГруппа = Истина Тогда		 
			SKUgroup = ДобавитьОбъект(ДокXML, "SKUgroup");
			ДобавитьПотомка(SKUgroup, "code", "skugroup_" + ФСокрКод(МТ_ГруппыТовара));
			ДобавитьПотомка(SKUgroup, "name", СокрЛП(МТ_ГруппыТовара.Наименование));
			Если НЕ(СокрЛП(МТ_ГруппыТовара.Родитель.Код) = "") Тогда
				ДобавитьПотомка(SKUgroup, "parentcode", "skugroup_" + ФСокрКод(МТ_ГруппыТовара.Родитель));
			КонецЕсли;
			ДобавитьПотомка(SKUgroup, "deleted", 0);
			ДобавитьНоду(SKUgroups, SKUgroup);
		КонецЕсли;
	КонецЦикла; 
	ДобавитьНоду(group, SKUgroups);
КонецФункции
Функция ВыгрузитьСпрТовары(group)
	SKUs = ДокXML.CreateElement("SKUs");
	МТ_ЦеновыеГруппы = Новый СписокЗначений;
	МТ_Товары = Справочники.Номенклатура.Выбрать();
	Пока МТ_Товары.Следующий() Цикл
		Если МТ_Товары.ПометкаУдаления = Ложь и МТ_Товары.ЭтоГруппа = Ложь Тогда
			ЕдиницаИзмерения = МТ_Товары.БазоваяЕдиницаИзмерения.Ссылка;
			ЕдиницаПоУмолчанию = МТ_Товары.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору.Ссылка;
			SKU = ДобавитьОбъект(ДокXML, "SKU");
			ДобавитьПотомка(SKU, "code", "sku_" + СокрЛП(ФСокрКод(МТ_Товары)));
			ДобавитьПотомка(SKU, "name", МТ_Товары.Наименование);
			ДобавитьПотомка(SKU, "deleted", 0);
			ДобавитьПотомка(SKU, "printcode", СокрЛП(ФСокрКод(МТ_Товары)));
			Если ЗначениеЗаполнено(МТ_Товары.ОсновноеИзображение) Тогда
				ИмяФотоТовара = СокрЛП(МТ_Товары.ОсновноеИзображение.ИмяФайла);
				ДобавитьПотомка(SKU, "imagefilename", ИмяФотоТовара);
				СохранитьФото(МТ_Товары.Ссылка,ИмяФотоТовара);
			КонецЕсли;
			//ДобавитьПотомка(SKU, "imagefilename", СокрЛП(МТ_Товары.Код)+".jpg");
			//СохранитьФото(МТ_Товары.Ссылка);
			ДобавитьПотомка(SKU, "fullname", МТ_Товары.Наименование);
			ДобавитьПотомка(SKU, "parentcode", "skugroup_" + ФСокрКод(МТ_Товары.Родитель));
			ДобавитьПотомка(SKU, "isActive", 1);
			ДобавитьПотомка(SKU, "baseunitcode", "unit_"+ФСокрКод(ЕдиницаИзмерения));
			ДобавитьПотомка(SKU, "isWeight", ?(МТ_Товары.Весовой,1,0));
			ДобавитьПотомка(SKU, "defaultunitcode", "unit_"+ФСокрКод(ЕдиницаПоУмолчанию));
			//Если НЕ МТ_Товары.ЦеноваяГруппа = Справочники.ЦеновыеГруппы.ПустаяСсылка() Тогда
			//	ДобавитьПотомка(SKU, "classifier1code", "cl_"+ФСокрКод(МТ_Товары.ЦеноваяГруппа));
			//КонецЕсли;
			units = ДобавитьОбъект(ДокXML, "units");
			спрЕдиницыИзмерения = Справочники.ЕдиницыИзмерения.Выбрать(,МТ_Товары.Ссылка);
			Пока спрЕдиницыИзмерения.Следующий() Цикл
				unit = ДобавитьОбъект(ДокXML, "unit");
				//МТ_Штрихкод = РегистрыСведений.Штрихкоды.ВыбратьПоРегистратору(МТ_Товары);
				//Если ПустаяСтрока(МТ_Штрихкод.Штрихкод) = Ложь Тогда
				//	ДобавитьПотомка(unit, "barcode", МТ_Штрихкод.Штрихкод);	
				//КонецЕсли;
				//Если МТ_Единицы.НайтиПоЗначению(ЕдиницыИзмерения.ЕдиницаПоКлассификатору.Ссылка) = Неопределено Тогда
				//	МТ_Единицы.Добавить(ЕдиницыИзмерения.ЕдиницаПоКлассификатору.Ссылка);
				//КонецЕсли;
				ДобавитьПотомка(unit, "code", "unit_"+ФСокрКод(спрЕдиницыИзмерения.ЕдиницаПоКлассификатору));
				ДобавитьПотомка(unit, "rate", Число(спрЕдиницыИзмерения.Коэффициент));
				ДобавитьПотомка(unit, "isVisible", 1);
				ДобавитьНоду(units, unit);
			КонецЦикла;
			
			ДобавитьНоду(SKU, units);
			ДобавитьНоду(SKUs, SKU);
		КонецЕсли;
	КонецЦикла; 
	
	Если МТ_флагОбмена = 0 Тогда	
		ДобавитьНоду(group, SKUs);
	КонецЕсли;
КонецФункции
Функция ВыгрузитьКлассификаторы(group)
	classifiers = ДокXML.CreateElement("classifiers");
	спрМТ_Классификаторы = Справочники.МТ_Класификаторы.Выбрать();
	Пока спрМТ_Классификаторы.Следующий() Цикл
		Если спрМТ_Классификаторы.ПометкаУдаления = Ложь Тогда
		 classifier	= ДобавитьОбъект(ДокXML, "classifier");	
		 ДобавитьПотомка(classifier, "code"			, "cl_" + ФСокрКод(спрМТ_Классификаторы));
		 ДобавитьПотомка(classifier, "name"			, СокрЛП(спрМТ_Классификаторы.Наименование));
		 ДобавитьПотомка(classifier, "deleted"		, "0");
		 ДобавитьПотомка(classifier, "classifiertype"	, Строка(спрМТ_Классификаторы.ТипКласификатора));
		 ДобавитьПотомка(classifier, "classifiernum"	, спрМТ_Классификаторы.НомерКласификатора);
		 ДобавитьНоду(classifiers, classifier);
		КонецЕсли;
	КонецЦикла; 
	//Для Каждого элТТ из МТ_ЦеновыеГруппы Цикл
	//	classifier	= ДобавитьОбъект(ДокXML, "classifier");
	//	ДобавитьПотомка(classifier, "code"			, "cl_" + ФСокрКод(элТТ.Значение));
	//	ДобавитьПотомка(classifier, "name"			, СокрЛП(элТТ.Значение));
	//	ДобавитьПотомка(classifier, "deleted"		, "0");
	//	ДобавитьПотомка(classifier, "classifiertype"	, "SKU");
	//	ДобавитьПотомка(classifier, "classifiernum"	, "1");
	//	ДобавитьНоду(classifiers, classifier);
	//КонецЦикла;
 	ДобавитьНоду(group, classifiers);
КонецФункции
Функция ВыгрузитьСпрЕдИзм(group)
	units = ДокXML.CreateElement("units");
	МТ_Единицы = Справочники.КлассификаторЕдиницИзмерения.Выбрать();
	Пока МТ_Единицы.Следующий() Цикл
		unit = ДобавитьОбъект(ДокXML, "unit");
		ДобавитьПотомка(unit, "code", "unit_"+ФСокрКод(МТ_Единицы));
		ДобавитьПотомка(unit, "name", СокрЛП(МТ_Единицы.НаименованиеПолное));
		ДобавитьПотомка(unit, "deleted", 0);
		ДобавитьПотомка(unit, "shortname", СокрЛП(МТ_Единицы.Наименование));
		ДобавитьНоду(units, unit);		
	КонецЦикла; 
	ДобавитьНоду(group, units);
КонецФункции
Функция ВыгрузитьСпрФотоОтчет(group)
	photoobjects = ДокXML.CreateElement("photoobjects");
	МТ_ФотоОтчеты = Справочники.МТ_ФотоОтчет.Выбрать();
	Пока МТ_ФотоОтчеты.Следующий() Цикл
		Если МТ_ФотоОтчеты.ПометкаУдаления = ложь Тогда
		 photoobject = ДобавитьОбъект(ДокXML, "photoobject");
		 ДобавитьПотомка(photoobject, "code", "photoobject_"+ФСокрКод(МТ_ФотоОтчеты));
		 ДобавитьПотомка(photoobject, "name", СокрЛП(МТ_ФотоОтчеты.Наименование));
		 ДобавитьПотомка(photoobject, "deleted", 0);
		 ДобавитьНоду(photoobjects, photoobject);		
		КонецЕсли;
	КонецЦикла; 
	ДобавитьНоду(group, photoobjects);
КонецФункции

Функция ВыгрузитьСпрАттрибуты(group)
	attributes = ДокXML.CreateElement("attributes");
	спрМТ_Атрибуты = Справочники.МТ_ДопАтрибуты.Выбрать();
	Пока спрМТ_Атрибуты.Следующий() Цикл
	Если спрМТ_Атрибуты.ПометкаУдаления = Ложь Тогда
	 attribute = ДобавитьОбъект(ДокXML, "attribute");
	 ДобавитьПотомка(attribute, "code", "attribute_" + ФСокрКод(спрМТ_Атрибуты));
	 ДобавитьПотомка(attribute, "name", ФСокр(спрМТ_Атрибуты.Наименование));
	 ДобавитьПотомка(attribute, "deleted", 0);
	 ДобавитьПотомка(attribute, "valuetype", ФСокр(спрМТ_Атрибуты.ТипЗначения));
	 ДобавитьПотомка(attribute, "attributetype", ФСокр(спрМТ_Атрибуты.ТипАтрибута));
	 ДобавитьПотомка(attribute, "objecttype", ФСокр(спрМТ_Атрибуты.ТипОбэкта));
	 ДобавитьПотомка(attribute, "sequenceorder", спрМТ_Атрибуты.НомерОтображения);
	 ДобавитьПотомка(attribute, "isViewable", ?(спрМТ_Атрибуты.Доступность,1,0));
	 ДобавитьПотомка(attribute, "isEditable", ?(спрМТ_Атрибуты.ДоступностьДляРедактирования,1,0));
	 defaultvalues = ДобавитьОбъект(ДокXML, "defaultvalues");
	//МТ_Товары = МТ_ТоварыТаб.Скопировать();
	//МТ_Товары.Свернуть("Ссылка");
	 Для Каждого элТаб Из спрМТ_Атрибуты.ПоУмолчанию Цикл;
		//МТ_Товар = элТаб.Ссылка;
		defaultvalue = ДобавитьОбъект(ДокXML, "defaultvalue");
		ДобавитьПотомка(defaultvalue, "SKUcode", "sku_" + ФСокрКод(элТаб.КодТовара.Ссылка));
		ДобавитьПотомка(defaultvalue, "value", Строка(СтрЗаменить(элТаб.Значение,",",".")));
		ДобавитьНоду(defaultvalues, defaultvalue);
	 КонецЦикла;
	 ДобавитьНоду(attribute, defaultvalues);
	ДобавитьНоду(attributes, attribute);
 	КонецЕсли;
	КонецЦикла; 
	ДобавитьНоду(group, attributes);
	//attribute = ДобавитьОбъект(ДокXML, "attribute");
	//ДобавитьПотомка(attribute, "code", "attribute_tm");
	//ДобавитьПотомка(attribute, "name", "ТМ");
	//ДобавитьПотомка(attribute, "deleted", 0);
	//ДобавитьПотомка(attribute, "valuetype", "string");
	//ДобавитьПотомка(attribute, "attributetype", "docrows");
	//ДобавитьПотомка(attribute, "objecttype", "preorderrow");
	//ДобавитьПотомка(attribute, "sequenceorder", 28);
	//ДобавитьПотомка(attribute, "isViewable", 1);
	//ДобавитьПотомка(attribute, "isEditable", 0);
	//defaultvalues = ДобавитьОбъект(ДокXML, "defaultvalues");
	//Для Каждого элТаб Из МТ_ТоварыОстатокТаб Цикл;
	//	МТ_Товар = элТаб.Ссылка;
	//	defaultvalue = ДобавитьОбъект(ДокXML, "defaultvalue");
	//	ДобавитьПотомка(defaultvalue, "SKUcode", "sku_" + ФСокрКод(МТ_Товар));
	//	ДобавитьПотомка(defaultvalue, "value", СокрЛП(МТ_Товар.Марка));
	//	ДобавитьНоду(defaultvalues, defaultvalue);
	//КонецЦикла;
	//ДобавитьНоду(attribute, defaultvalues);
	//ДобавитьНоду(attributes, attribute);
	//attribute = ДобавитьОбъект(ДокXML, "attribute");
	//ДобавитьПотомка(attribute, "code", "attribute_specialPrice");
	//ДобавитьПотомка(attribute, "name", "Спец.цена");
	//ДобавитьПотомка(attribute, "deleted", 0);
	//ДобавитьПотомка(attribute, "valuetype", "string");
	//ДобавитьПотомка(attribute, "attributetype", "docrows");
	//ДобавитьПотомка(attribute, "objecttype", "preorderrow");
	//ДобавитьПотомка(attribute, "sequenceorder", 11);
	//ДобавитьПотомка(attribute, "isViewable", 1);
	//ДобавитьПотомка(attribute, "isEditable", 0);
	//defaultvalues = ДобавитьОбъект(ДокXML, "defaultvalues");
	//Для Каждого элТТ из МТ_СпецТипыЦен Цикл
	//	текСкидка = элТТ.Значение;
	//	Отбор = Новый Структура();
	//	Отбор.Вставить("ТипЦен",текСкидка.ВидЦены);
	//	КопияТаб = МТ_СпецТоварыТаб.Скопировать(Отбор);
	//	Запрос =Новый Запрос;
	//	Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|  	ЦеныНоменклатурыСрезПоследних.Номенклатура Как Ссылка,
	//	|	ЦеныНоменклатурыСрезПоследних.Цена
	//	|ИЗ
	//	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних КАК ЦеныНоменклатурыСрезПоследних
	//	|ГДЕ
	//	|	ЦеныНоменклатурыСрезПоследних.ВидЦены = &МТ_ТипЦен
	//	|	И НЕ ЦеныНоменклатурыСрезПоследних.Цена ЕСТЬ NULL
	//	|	И ЦеныНоменклатурыСрезПоследних.Номенклатура В (&МТ_Товары)
	//	|УПОРЯДОЧИТЬ ПО
	//	|	Ссылка,	ВидЦены";
	//	Запрос.УстановитьПараметр("МТ_ТипЦен", текСкидка.ВидЦены);
	//	Запрос.УстановитьПараметр("МТ_Товары",КопияТаб.ВыгрузитьКолонку("Товар"));
	//	МТ_ТоварыЦены = Запрос.Выполнить().Выгрузить();
	//	Для Каждого элТаб Из МТ_ТоварыЦены Цикл;
	//		defaultvalue = ДобавитьОбъект(ДокXML, "defaultvalue");
	//		ДобавитьПотомка(defaultvalue, "SKUcode", "sku_" + ФСокрКод(элТаб.Ссылка));
	//		ДобавитьПотомка(defaultvalue, "value", СтрЗаменить(Формат(элТаб.Цена,"ЧГ="),",","."));
	//		ДобавитьНоду(defaultvalues, defaultvalue);
	//	КонецЦикла;
	//КонецЦикла;
	//ДобавитьНоду(attribute, defaultvalues);
	//ДобавитьНоду(attributes, attribute);
	//attribute = ДобавитьОбъект(ДокXML, "attribute");
	//ДобавитьПотомка(attribute, "code", "attr_aD");
	//ДобавитьПотомка(attribute, "name", "Адрес доставки");
	//ДобавитьПотомка(attribute, "deleted", 0);
	//ДобавитьПотомка(attribute, "valuetype", "singlelist");
	//ДобавитьПотомка(attribute, "attributetype", "docheader");
	//ДобавитьПотомка(attribute, "objecttype", "preorder");
	//ДобавитьПотомка(attribute, "sequenceorder", 4);
	//ДобавитьПотомка(attribute, "isViewable", 1);
	//ДобавитьПотомка(attribute, "isEditable", 1);
	//listvalues = ДобавитьОбъект(ДокXML, "listvalues");
	//Для Каждого элТТ из МТ_ТТСписок Цикл
	//	Контрагент = элТТ.ТТ;
	//	Для Каждого текИнфо ИЗ Контрагент.Партнер.КонтактнаяИнформация Цикл
	//		Если текИнфо.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
	//			listvalue = ДобавитьОбъект(ДокXML, "listvalue");
	//			ДобавитьПотомка(listvalue, "value",	ФСокрКод(Контрагент.Партнер) + "_"+СокрЛП(текИнфо.НомерСтроки)+"_"+СокрЛП(текИнфо.Представление));
	//			ДобавитьПотомка(listvalue, "isDefault",	0);
	//			//ДобавитьПотомка(listvalue, "isDefault",	?(текИнфо.НомерСтроки = 1,1,0));
	//			ДобавитьНоду(listvalues, listvalue);
	//		КонецЕсли
	//	КонецЦикла;
	//КонецЦикла;
	//ДобавитьНоду(attribute, listvalues);
	//ДобавитьНоду(attributes, attribute);
	//attribute = ДобавитьОбъект(ДокXML, "attribute");
	//ДобавитьПотомка(attribute, "code", "attr_zD");
	//ДобавитьПотомка(attribute, "name", "Зона доставки");
	//ДобавитьПотомка(attribute, "deleted", 0);
	//ДобавитьПотомка(attribute, "valuetype", "singlelist");
	//ДобавитьПотомка(attribute, "attributetype", "docheader");
	//ДобавитьПотомка(attribute, "objecttype", "preorder");
	//ДобавитьПотомка(attribute, "sequenceorder", 5);
	//ДобавитьПотомка(attribute, "isViewable", 1);
	//ДобавитьПотомка(attribute, "isEditable", 1);
	//listvalues = ДобавитьОбъект(ДокXML, "listvalues");
	//ЗоныДоставки = Справочники.ЗоныДоставки.Выбрать();
	//Пока ЗоныДоставки.Следующий() Цикл
	//	Если (НЕ ЗоныДоставки.ЭтоГруппа) И  (НЕ ЗоныДоставки.ПометкаУдаления) Тогда
	//		listvalue = ДобавитьОбъект(ДокXML, "listvalue");
	//		ДобавитьПотомка(listvalue, "value",	СокрЛП(ЗоныДоставки.Наименование) + "_" + СокрЛП(ЗоныДоставки.Родитель.Наименование));
	//		ДобавитьПотомка(listvalue, "isDefault",	0);
	//		ДобавитьНоду(listvalues, listvalue);
	//	КонецЕсли
	//КонецЦикла;
	//ДобавитьНоду(attribute, listvalues);
	//ДобавитьНоду(attributes, attribute);
	//attribute = ДобавитьОбъект(ДокXML, "attribute");
	//ДобавитьПотомка(attribute, "code", "attr_gp");
	//ДобавитьПотомка(attribute, "name", "Золотой партнер");
	//ДобавитьПотомка(attribute, "deleted", 0);
	//ДобавитьПотомка(attribute, "valuetype", "string");
	//ДобавитьПотомка(attribute, "attributetype", "ref");
	//ДобавитьПотомка(attribute, "objecttype", "buypoint");
	//ДобавитьПотомка(attribute, "sequenceorder", 8);
	//ДобавитьПотомка(attribute, "isViewable", 1);
	//ДобавитьПотомка(attribute, "isEditable", 0);
	//defaultvalues = ДобавитьОбъект(ДокXML, "defaultvalues");
	//Запрос =Новый Запрос;
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|  	КартыЛояльности.Ссылка Как Ссылка
	//|ИЗ
	//|	Справочник.КартыЛояльности КАК КартыЛояльности
	//|ГДЕ
	//|	КартыЛояльности.Контрагент в (&МТ_ТТСписок)
	//|	И КартыЛояльности.Статус = &СтатусКарты";
	//Запрос.УстановитьПараметр("СтатусКарты", Перечисления.СтатусыКартЛояльности.Действует);
	//Запрос.УстановитьПараметр("МТ_ТТСписок",МТ_ТТСписок.ВыгрузитьКолонку("ТТ"));
	//МТ_КартыЛояльности = Запрос.Выполнить().Выгрузить();
	//Для Каждого элТаб Из МТ_КартыЛояльности Цикл;
	//	defaultvalue = ДобавитьОбъект(ДокXML, "defaultvalue");
	//	ДобавитьПотомка(defaultvalue, "buypointcode", "buypoint_" + ФСокрКод(элТаб.Ссылка.Контрагент));
	//	ДобавитьПотомка(defaultvalue, "value", СокрЛП(элТаб.Ссылка.Штрихкод));
	//	ДобавитьНоду(defaultvalues, defaultvalue);
	//КонецЦикла;
	//ДобавитьНоду(attribute, defaultvalues);
	//ДобавитьНоду(attributes, attribute);
	//attribute = ДобавитьОбъект(ДокXML, "attribute");
	//ДобавитьПотомка(attribute, "code", "attr_bd");
	//ДобавитьПотомка(attribute, "name", "Базовая скидка");
	//ДобавитьПотомка(attribute, "deleted", 0);
	//ДобавитьПотомка(attribute, "valuetype", "string");
	//ДобавитьПотомка(attribute, "attributetype", "ref");
	//ДобавитьПотомка(attribute, "objecttype", "buypoint");
	//ДобавитьПотомка(attribute, "sequenceorder", 9);
	//ДобавитьПотомка(attribute, "isViewable", 1);
	//ДобавитьПотомка(attribute, "isEditable", 0);
	//defaultvalues = ДобавитьОбъект(ДокXML, "defaultvalues");
	//Для Каждого элСкидка из МТ_Скидки Цикл
	//	Соглашение = элСкидка.Соглашение;
	//	defaultvalue = ДобавитьОбъект(ДокXML, "defaultvalue");
	//	ДобавитьПотомка(defaultvalue, "buypointcode", "buypoint_" + ФСокрКод(Соглашение.Контрагент));
	//	ДобавитьПотомка(defaultvalue, "value",	СокрЛП(СтрЗаменить(элСкидка.СкидкаНаценкаЗначениеСкидкиНаценки,",",".")));
	//	ДобавитьНоду(defaultvalues, defaultvalue);
	//КонецЦикла;
	//ДобавитьНоду(attribute, defaultvalues);
	//ДобавитьНоду(attributes, attribute);
	//Запрос =Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	ЦеновыеГруппы.ЦеноваяГруппа,
	//	|	ЦеновыеГруппы.ПроцентРучнойСкидки,
	//	|	ЦеновыеГруппы.Ссылка
	//	|ИЗ
	//	|	Справочник.СоглашенияСКлиентами.ЦеновыеГруппы КАК ЦеновыеГруппы
	//	|ГДЕ
	//	|	ЦеновыеГруппы.Ссылка В(&МТ_Договора)
	//	|	И ЦеновыеГруппы.ЦеноваяГруппа В(&МТ_ЦеновыеГруппы)
	//	|	И ЦеновыеГруппы.ПроцентРучнойСкидки <> 0";
	//Запрос.УстановитьПараметр("МТ_ЦеновыеГруппы", МТ_ЦеновыеГруппы);
	//Запрос.УстановитьПараметр("МТ_Договора", МТ_Договора);
	//РезультатТаб = Запрос.Выполнить().Выгрузить();
	//Для Каждого элСписка из МТ_ЦеновыеГруппы Цикл
	//	МТ_ЦенГруппа = элСписка.Значение;
	//	attribute = ДобавитьОбъект(ДокXML, "attribute");
	//	ДобавитьПотомка(attribute, "code", "attr_p_"+ФСокрКод(МТ_ЦенГруппа));
	//	ДобавитьПотомка(attribute, "name", МТ_ЦенГруппа.Наименование);
	//	ДобавитьПотомка(attribute, "deleted", 0);
	//	ДобавитьПотомка(attribute, "valuetype", "string");
	//	ДобавитьПотомка(attribute, "attributetype", "ref");
	//	ДобавитьПотомка(attribute, "objecttype", "buypoint");
	//	ДобавитьПотомка(attribute, "sequenceorder", 10+МТ_ЦеновыеГруппы.Индекс(элСписка));
	//	ДобавитьПотомка(attribute, "isViewable", 1);
	//	ДобавитьПотомка(attribute, "isEditable", 0);
	//	defaultvalues = ДобавитьОбъект(ДокXML, "defaultvalues");
	//	Отбор = Новый Структура;
	//	Отбор.Вставить("ЦеноваяГруппа",МТ_ЦенГруппа);
	//	МТ_ТекЦенГруппы = РезультатТаб.Скопировать(Отбор);
	//	Для Каждого элТаб Из МТ_ТекЦенГруппы Цикл;
	//		defaultvalue = ДобавитьОбъект(ДокXML, "defaultvalue");
	//		ДобавитьПотомка(defaultvalue, "buypointcode", "buypoint_" + ФСокрКод(элТаб.Ссылка.Контрагент));
	//		ДобавитьПотомка(defaultvalue, "value", СокрЛП(СтрЗаменить(элТаб.ПроцентРучнойСкидки,",",".")));
	//		ДобавитьНоду(defaultvalues, defaultvalue);
	//	КонецЦикла;
	//	ДобавитьНоду(attribute, defaultvalues);
	//	ДобавитьНоду(attributes, attribute);
	//КонецЦикла;
	//attribute = ДобавитьОбъект(ДокXML, "attribute");
	//ДобавитьПотомка(attribute, "code", "attribute_qp");
	//ДобавитьПотомка(attribute, "name", "Кол.уп.");
	//ДобавитьПотомка(attribute, "deleted", 0);
	//ДобавитьПотомка(attribute, "valuetype", "string");
	//ДобавитьПотомка(attribute, "attributetype", "docrows");
	//ДобавитьПотомка(attribute, "objecttype", "preorderrow");
	//ДобавитьПотомка(attribute, "sequenceorder", 23);
	//ДобавитьПотомка(attribute, "isViewable", 1);
	//ДобавитьПотомка(attribute, "isEditable", 0);
	//defaultvalues = ДобавитьОбъект(ДокXML, "defaultvalues");
	//Для Каждого элТаб Из МТ_ТоварыОстатокТаб Цикл;
	//	МТ_Товар = элТаб.Ссылка;
	//	Если МТ_Товар.исМинимальнаяУпаковка.Коэффициент > 0 Тогда 
	//		defaultvalue = ДобавитьОбъект(ДокXML, "defaultvalue");
	//		ДобавитьПотомка(defaultvalue, "SKUcode", "sku_" + ФСокрКод(МТ_Товар));
	//		ДобавитьПотомка(defaultvalue, "value", СокрЛП(СтрЗаменить(МТ_Товар.исМинимальнаяУпаковка.Коэффициент,",",".")));
	//		ДобавитьНоду(defaultvalues, defaultvalue);
	//	КонецЕсли;
	//КонецЦикла;
	//ДобавитьНоду(attribute, defaultvalues);
	//ДобавитьНоду(attributes, attribute);
	//attribute = ДобавитьОбъект(ДокXML, "attribute");
	//ДобавитьПотомка(attribute, "code", "attr_cBD");
	//ДобавитьПотомка(attribute, "name", "Текущая стат. скидка");
	//ДобавитьПотомка(attribute, "deleted", 0);
	//ДобавитьПотомка(attribute, "valuetype", "double");
	//ДобавитьПотомка(attribute, "attributetype", "ref");
	//ДобавитьПотомка(attribute, "objecttype", "buypoint");
	//ДобавитьПотомка(attribute, "sequenceorder", 28);
	//ДобавитьПотомка(attribute, "isViewable", 0);
	//ДобавитьПотомка(attribute, "isEditable", 1);
	//defaultvalues = ДобавитьОбъект(ДокXML, "defaultvalues");
	//Для Каждого элТТ из МТ_ТТСписок Цикл
	//	Контрагент = элТТ.ТТ;
	//	defaultvalue = ДобавитьОбъект(ДокXML, "defaultvalue");
	//	ДобавитьПотомка(defaultvalue, "buypointcode", "buypoint_" + ФСокрКод(Контрагент.Ссылка));
	//	ДобавитьПотомка(defaultvalue, "value", -1);
	//	ДобавитьНоду(defaultvalues, defaultvalue);
	//КонецЦикла;
	//ДобавитьНоду(attribute, defaultvalues);
	//ДобавитьНоду(attributes, attribute);
	//ДобавитьНоду(group, attributes);

КонецФункции
Функция ВыгрузитьФильтры(group)
	filters = ДокXML.CreateElement("filters");
	//filter = ДобавитьОбъект(ДокXML, "filter");
	//ДобавитьПотомка(filter, "code", "filter_1");
	//ДобавитьПотомка(filter, "name", "Отгрузки");
	//ДобавитьПотомка(filter, "color", "2042040");
	//ДобавитьПотомка(filter, "filtertype", 1);
	//ДобавитьПотомка(filter, "needcolor", 1);
	//ДобавитьПотомка(filter, "isskucolorable", 1);
	//ДобавитьПотомка(filter, "priority", 1);
	//ДобавитьПотомка(filter, "useboldfontstyle", 1);
	//ДобавитьНоду(filters, filter);
	//итераторЦветов = 0;
	
	спрФильтр = Справочники.МТ_Фильтры.Выбрать();
	Пока спрФильтр.Следующий() Цикл
		Если не спрФильтр.ПометкаУдаления Тогда
			filter = ДобавитьОбъект(ДокXML, "filter");
			ДобавитьПотомка(filter, "code", "filter_" + ФСокрКод(спрФильтр) );
			ДобавитьПотомка(filter, "name", СокрЛП(спрФильтр));
			ДобавитьПотомка(filter, "color", спрФильтр.Цвет);
			ДобавитьПотомка(filter, "filtertype", Строка(спрФильтр.Тип_фильтра));
			ДобавитьПотомка(filter, "needcolor", ?(спрФильтр.Выделение_товара,1,0));
			ДобавитьПотомка(filter, "priority", Строка(спрФильтр.Приоритет_фильтра));
			ДобавитьПотомка(filter, "usebpfilterzones", ?(спрФильтр.Признак_использования,1,0));
			ДобавитьПотомка(filter, "useboldfontstyle", ?(спрФильтр.Использ_жир_шрифт,1,0));
			ДобавитьПотомка(filter, "useforallsku", ?(спрФильтр.Для_всех_тов,1,0));
			ДобавитьПотомка(filter, "isbuypointcolorable", ?(спрФильтр.Фильтр_ТТ,1,0));
			ДобавитьПотомка(filter, "isskucolorable", ?(спрФильтр.Фильтр_тов,1,0));
			ДобавитьНоду(filters, filter);
		КонецЕсли; 
	КонецЦикла; 
	//Для Каждого элАкция из МТ_Акции Цикл
	//	текСкидка = элАкция.СкидкаНаценка;
	//	Для Каждого элУсловие Из текСкидка.УсловияПредоставления Цикл
	//		текУсловие = элУсловие.УсловиеПредоставления;
	//		Если текУсловие.СегментНоменклатурыОграничения = Справочники.СегментыНоменклатуры.ПустаяСсылка() Тогда
	//			Продолжить;
	//		КонецЕсли;
	//		Если НЕ(текСкидка.ВидЦены = Справочники.ВидыЦен.ПустаяСсылка()) И МТ_СпецТипыЦен.НайтиПоЗначению(текСкидка.Ссылка) = Неопределено Тогда
	//			МТ_СпецТипыЦен.Добавить(текСкидка.Ссылка);
	//		КонецЕсли;
	//		filter = ДобавитьОбъект(ДокXML, "filter");
	//		ДобавитьПотомка(filter, "code", "filter_"+ФСокрКод(текСкидка));
	//		ДобавитьПотомка(filter, "name", СокрЛП(текСкидка));
	//		Если НЕ текСкидка.ВидЦены = Справочники.ВидыЦен.ПустаяСсылка() Тогда
	//			ДобавитьПотомка(filter, "color", "16711680");//МТ_ЦветаФильтров[?(итераторЦветов>=МТ_ЦветаФильтров.Количество(),итераторЦветов-Цел(итераторЦветов/МТ_ЦветаФильтров.Количество()*итераторЦветов),итераторЦветов)].ЗначениеЦвета);
	//			ДобавитьПотомка(filter, "needcolor", 1);
	//			ДобавитьПотомка(filter, "useboldfontstyle", 1);	
	//		Иначе
	//			ДобавитьПотомка(filter, "needcolor", 0);
	//			ДобавитьПотомка(filter, "useboldfontstyle", 0);	
	//		КонецЕсли;
	//		ДобавитьПотомка(filter, "filtertype", 0);
	//		ДобавитьПотомка(filter, "isskucolorable", 1);
	//		ДобавитьПотомка(filter, "priority", итераторЦветов);
	//		
	//		ДобавитьНоду(filters, filter);
	//		итераторЦветов = итераторЦветов + 1;
	//	КонецЦикла;
	//КонецЦикла;
	ДобавитьНоду(group, filters);
КонецФункции
Функция ВыгрузитьЗоныФильтров(group)
	zones = ДокXML.CreateElement("zones");
	//zone = ДобавитьОбъект(ДокXML, "zone");
	//ДобавитьПотомка(zone, "code", "zone_1");
	//ДобавитьПотомка(zone, "name", "Зона");
	//ДобавитьПотомка(zone, "filtercode", "filter_1");
	//ДобавитьНоду(zones, zone);
	
	спрЗоныФильтра = Справочники.МТ_ЗоныФильтров.Выбрать();
	Пока спрЗоныФильтра.Следующий() Цикл
		zone = ДобавитьОбъект(ДокXML, "zone");
		ДобавитьПотомка(zone, "code", "zone_" + ФСокрКод(спрЗоныФильтра));
		ДобавитьПотомка(zone, "name", ФСокр(спрЗоныФильтра.Наименование));
		ДобавитьПотомка(zone, "filtercode", "filter_" + ФСокрКод(спрЗоныФильтра.Фильтр.Ссылка));
		
		zoneskus = ДобавитьОбъект(ДокXML, "zoneskus");
		Для каждого cтрока Из спрЗоныФильтра.Номенклатура Цикл
			sku = ДобавитьОбъект(ДокXML, "sku");
			ДобавитьПотомка(sku, "skucode", "sku_" + ФСокрКод(cтрока.Товар.Ссылка));
			ДобавитьНоду(zoneskus, sku);
		КонецЦикла; 
		ДобавитьНоду(zone, zoneskus);
		ДобавитьНоду(zones, zone);				
	КонецЦикла; 
	//МТ_Товары = МТ_ТоварыОстатокТаб.Скопировать();
	//Для Каждого элАкция из МТ_Акции Цикл
	//	текСкидка = элАкция.СкидкаНаценка;
	//	Для Каждого элУсловие Из текСкидка.УсловияПредоставления Цикл
	//		текУсловие = элУсловие.УсловиеПредоставления;
	//		Если текУсловие.СегментНоменклатурыОграничения = Справочники.СегментыНоменклатуры.ПустаяСсылка() Тогда
	//			Продолжить;
	//		КонецЕсли;
	//		zone = ДобавитьОбъект(ДокXML, "zone");
	//		ДобавитьПотомка(zone, "code", "zone_"+ФСокрКод(текСкидка));
	//		ДобавитьПотомка(zone, "name", "Зона");
	//		ДобавитьПотомка(zone, "filtercode", "filter_"+ФСокрКод(текСкидка));
	//		//СписокТоваровСегмента = СегментыСервер.ТаблицаЗначений(текУсловие.СегментНоменклатурыОграничения).ВыгрузитьКолонку(0);
	//		zoneskus = ДобавитьОбъект(ДокXML, "zoneskus");
	//		//Для Каждого элСписка Из СписокТоваровСегмента Цикл;
	//		//	МТ_Товар = элСписка.Ссылка;
	//		//	Если МТ_Товары.Найти(МТ_Товар,"Ссылка") = НЕОПРЕДЕЛЕНО Тогда
	//		//		Продолжить;
	//		//	КонецЕсли;
	//		//	Если НЕ МТ_СпецТоварыТаб.Найти(ФСокрКод(МТ_Товар)+"_"+ФСокрКод(текСкидка),"ИД") = 0 Тогда
	//		//		НоваяСтрокаТаб = МТ_СпецТоварыТаб.Добавить();
	//		//		НоваяСтрокаТаб.ИД = ФСокрКод(МТ_Товар)+"_"+ФСокрКод(текСкидка);
	//		//		НоваяСтрокаТаб.Товар = МТ_Товар;
	//		//		текВидЦен = ?(текСкидка.ВидЦены = Справочники.ВидыЦен.ПустаяСсылка(),Справочники.ВидыЦен.ПустаяСсылка(),текСкидка.ВидЦены);
	//		//		НоваяСтрокаТаб.ТипЦен = текВидЦен;
	//		//		НоваяСтрокаТаб.ВидСкидки = ?(текВидЦен = Справочники.ВидыЦен.ПустаяСсылка(),0,1);
	//		//	КонецЕсли;
	//		//	sku = ДобавитьОбъект(ДокXML, "sku");
	//		//	ДобавитьПотомка(sku, "skucode", "sku_" + ФСокрКод(МТ_Товар));
	//		//	ДобавитьНоду(zoneskus, sku);
	//		//КонецЦикла;
	//		ДобавитьНоду(zone, zoneskus);
	//		ДобавитьНоду(zones, zone);
	//	КонецЦикла;
	//КонецЦикла;	
	ДобавитьНоду(group, zones);
КонецФункции
Функция ВыгрузитьРегОстатки(group)
	rests = ДокXML.CreateElement("rests");
	Отбор = Новый СписокЗначений;
	Отбор1 = Новый СписокЗначений;
	спрТовары = Справочники.Номенклатура.Выбрать();
	Пока спрТовары.Следующий() Цикл
		Если спрТовары.ПометкаУдаления = Ложь и спрТовары.ЭтоГруппа = Ложь Тогда
			Отбор.Добавить(спрТовары.Ссылка);	
		КонецЕсли;
	КонецЦикла; 
	спрСклады = Справочники.Склады.Выбрать();
	Пока спрСклады.Следующий() Цикл
		Если спрСклады.ПометкаУдаления = Ложь и спрСклады.ЭтоГруппа = Ложь Тогда
			Отбор1.Добавить(спрСклады.Ссылка);	
		КонецЕсли;
	КонецЦикла;
	Запрос =Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	|	ТоварыНаСкладахОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ТоварыНаСкладахОстатки.Склад,
	|	ТоварыНаСкладахОстатки.КоличествоОстаток
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки КАК ТоварыНаСкладахОстатки
	|ГДЕ
	|	ТоварыНаСкладахОстатки.КоличествоОстаток > 0 
	|	И НЕ ТоварыНаСкладахОстатки.Склад.ПОметкаУдаления
	|	И ТоварыНаСкладахОстатки.Номенклатура В(&МТ_Товары)
	|	И ТоварыНаСкладахОстатки.Склад В(&МТ_СкладыАгента)
	|УПОРЯДОЧИТЬ ПО
	|	Склад,Номенклатура";
	Запрос.УстановитьПараметр("МТ_Товары", Отбор);
	Запрос.УстановитьПараметр("МТ_СкладыАгента", Отбор1);
	МТ_ТовароОстатки = Запрос.Выполнить().Выгрузить();
	Кол = 0;
	текСклад = Справочники.Склады.ПустаяСсылка();
	Для Каждого МТ_ТовароОстаток Из МТ_ТовароОстатки Цикл;
		SKU = ДобавитьОбъект(ДокXML, "SKU");
		ДобавитьПотомка(SKU, "skucode", "sku_" + ФСокрКод(МТ_ТовароОстаток.Номенклатура));
		ДобавитьПотомка(SKU, "quantity", МТ_ТовароОстаток.КоличествоОстаток*МТ_ТовароОстаток.Номенклатура.ЕдиницаДляОтчетов.Коэффициент);
		ДобавитьПотомка(SKU, "storecode", "store_"+ФСокрКод(МТ_ТовароОстаток.Склад));
		ДобавитьНоду(rests, SKU);
		//Кол = Кол + 1;
	КонецЦикла; 
	//Сообщить(Строка(Кол));
	ДобавитьНоду(group, rests);
КонецФункции
Функция ВыгрузитьРегЦены(group)
	prices = ДокXML.CreateElement("prices");
	//спрМТ_Товары = Справочники.Номенклатура.Выбрать();
	//спрМТ_ТипЦен = Справочники.ТипыЦенНоменклатуры.Выбрать();
	//Пока спрМТ_ТипЦен.Следующий() Цикл
	//	Пока спрМТ_Товары.Следующий() Цикл
	//		Если спрМТ_Товары.ПометкаУдаления = Ложь И спрМТ_Товары.ЭтоГруппа = Ложь Тогда
	//			структОтбора = Новый Структура("Номенклатура",спрМТ_Товары.Ссылка);
	//			МТ_Цена = РегистрыСведений.ЦеныНоменклатуры.ПолучитьПоследнее(ТекущаяДата(),структОтбора);
	//			//структОтбораТипа = Новый Структура("ТипЦен",спрМТ_ТипЦен.Ссылка);
	//			//МТ_ТипЦены = РегистрыСведений.ЦеныНоменклатуры.ПолучитьПоследнее(ТекущаяДата(),структОтбораТипа);

	//			//Если МТ_Цена = МТ_ТипЦены Тогда
	//			price = ДобавитьОбъект(ДокXML, "price");
	//			ДобавитьПотомка(price, "skucode", "sku_" + ФСокрКод(спрМТ_Товары));
	//			ДобавитьПотомка(price, "pricetypecode", "pricetype_" + ФСокрКод(спрМТ_ТипЦен));
	//			ДобавитьПотомка(price, "price", СтрЗаменить(Формат(МТ_Цена.Цена,"ЧГ="),",","."));
	//			ДобавитьПотомка(price, "unitcode", "unit_"+ФСокрКод(МТ_Цена.ЕдиницаИзмерения));
	//			ДобавитьНоду(prices, price);

	//			//КонецЕсли; 
	//			//Сообщить(Строка(МТ_Цена.ЕдиницаИзмерения));
	//		КонецЕсли; 			          
	//	КонецЦикла; 
	//КонецЦикла;
	
	регМТ_Цены = РегистрыСведений.ЦеныНоменклатуры.СрезПоследних(ТекущаяДата());
	Для каждого РегЦены Из регМТ_Цены Цикл
		Если РегЦены.Номенклатура.ЭтоГруппа = Ложь и РегЦены.Номенклатура.ПометкаУдаления = Ложь Тогда
			price = ДобавитьОбъект(ДокXML, "price");
			ДобавитьПотомка(price, "skucode", "sku_" + ФСокрКод(РегЦены.Номенклатура.Ссылка));
			ДобавитьПотомка(price, "pricetypecode", "pricetype_" + ФСокрКод(РегЦены.ТипЦен.Ссылка));
			ДобавитьПотомка(price, "price", СтрЗаменить(Формат(РегЦены.Цена,"ЧГ="),",","."));
			ДобавитьПотомка(price, "unitcode", "unit_"+ФСокрКод(РегЦены.ЕдиницаИзмерения.ЕдиницаПоКлассификатору));
			ДобавитьНоду(prices, price);
		КонецЕсли; 		
	КонецЦикла; 
	
	//Запрос =Новый Запрос;
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|  	ЦеныНоменклатурыСрезПоследних.Номенклатура Как Ссылка,
	//|	ЦеныНоменклатурыСрезПоследних.ТипЦен,
	//|	ЦеныНоменклатурыСрезПоследних.Валюта,
	//|	ЦеныНоменклатурыСрезПоследних.Цена*КурсыВалют.Курс КАК Цена
	//|ИЗ
	//|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних КАК ЦеныНоменклатурыСрезПоследних
	//|		СОЕДИНЕНИЕ (ВЫБРАТЬ
	//|	  		КурсыВалют.Курс,
	//|	 		КурсыВалют.Валюта
	//|		ИЗ
	//|			РегистрСведений.КурсыВалют.СрезПоследних КАК КурсыВалют) КАК КурсыВалют
	//|		ПО 
	//|			КурсыВалют.Валюта = ЦеныНоменклатурыСрезПоследних.Валюта
	//|ГДЕ
	//|	ЦеныНоменклатурыСрезПоследних.ТипЦен В (&МТ_ТипыЦен)
	//|	И НЕ ЦеныНоменклатурыСрезПоследних.Цена ЕСТЬ NULL
	//|	И ЦеныНоменклатурыСрезПоследних.Номенклатура В (&МТ_Товары)
	//|УПОРЯДОЧИТЬ ПО
	//|	Ссылка,	ТипЦен";
	//Запрос.УстановитьПараметр("МТ_ТипыЦен", МТ_ТипыЦен);
	//Запрос.УстановитьПараметр("МТ_Товары", .ВыгрузитьКолонку("Ссылка"));
	//МТ_ТоварыЦены = Запрос.Выполнить().Выгрузить();
	//Для Каждого элТаб Из МТ_ТоварыЦены Цикл
	//	price = ДобавитьОбъект(ДокXML, "price");
	//	ДобавитьПотомка(price, "skucode", "sku_" + ФСокрКод(элТаб.Ссылка));
	//	ДобавитьПотомка(price, "pricetypecode", "pricetype_" + ФСокрКод(элТаб.ТипЦен));
	//	ДобавитьПотомка(price, "price", СтрЗаменить(Формат(элТаб.Цена,"ЧГ="),",","."));
	//	ДобавитьПотомка(price, "unitcode", "unit_"+ФСокрКод(элТаб.Ссылка.БазоваяЕдиницаИзмерения));
	//	ДобавитьНоду(prices, price);
	//КонецЦикла;
	ДобавитьНоду(group, prices);
КонецФункции
Функция ВыгрузитьРегСкидки(group)
	discountlists	= ДокXML.CreateElement("discountlists");
	итератор = 0;
	МТ_СписокПолучателей = Новый СписокЗначений();
	МТ_СписокПОлучателей = МТ_Контрагенты;
	МТ_СписокПолучателей.Добавить(Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	КопияТаб = МТ_Товары.Скопировать();
	КопияТаб.Свернуть("Ссылка");
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МТ_Товары", КопияТаб.ВыгрузитьКолонку("Ссылка"));
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Запрос.УстановитьПараметр("МТ_Договора", МТ_ДОговора.ВыгрузитьКолонку("Договор"));
	Запрос.УстановитьПараметр("МТ_СписокПолучателей", МТ_СписокПолучателей);
	Текст = "ВЫБРАТЬ
	|	СкидкиНаценкиНоменклатурыСрезПоследних.Период Как Начало,
	|	СкидкиНаценкиНоменклатурыСрезПоследних.Регистратор,
	|	СкидкиНаценкиНоменклатурыСрезПоследних.НомерСтроки,
	|	СкидкиНаценкиНоменклатурыСрезПоследних.Активность,
	|	СкидкиНаценкиНоменклатурыСрезПоследних.Номенклатура,
	|	СкидкиНаценкиНоменклатурыСрезПоследних.ХарактеристикаНоменклатуры КАК Характеристика,
	|	СкидкиНаценкиНоменклатурыСрезПоследних.Качество,
	|	СкидкиНаценкиНоменклатурыСрезПоследних.Условие,
	|	СкидкиНаценкиНоменклатурыСрезПоследних.ЗначениеУсловия,
	|	СкидкиНаценкиНоменклатурыСрезПоследних.ПолучательСкидки,
	|	СкидкиНаценкиНоменклатурыСрезПоследних.ПроцентСкидкиНаценки КАК Процент,
	|	СкидкиНаценкиНоменклатурыСрезПоследних.ОграничениеСкидкиНаценки,
	|	СкидкиНаценкиНоменклатурыСрезПоследних.Валюта,
	|	СкидкиНаценкиНоменклатурыСрезПоследних.ДатаОкончания КАК ВремяОкончания
	|ИЗ
	|	РегистрСведений.СкидкиНаценкиНоменклатуры КАК СкидкиНаценкиНоменклатурыСрезПоследних
	|ГДЕ
	|	(СкидкиНаценкиНоменклатурыСрезПоследних.Номенклатура В(&МТ_Товары) ИЛИ СкидкиНаценкиНоменклатурыСрезПоследних.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
	|	И (СкидкиНаценкиНоменклатурыСрезПоследних.ПолучательСкидки В(&МТ_СписокПолучателей) ИЛИ СкидкиНаценкиНоменклатурыСрезПоследних.ПолучательСкидки В(&МТ_Договора))
	|	И ((НЕ СкидкиНаценкиНоменклатурыСрезПоследних.ДатаОкончания < &ТекущаяДата) ИЛИ (СкидкиНаценкиНоменклатурыСрезПоследних.ДатаОкончания = ДАТАВРЕМЯ(1,1,1,0,0,0)))
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	Начало УБЫВ";
	Запрос.Текст           = Текст;
	Скидки = Запрос.Выполнить().Выгрузить();
	ПредыдущаяСкидка = Неопределено;
	СтрокиКУдалению = Новый Массив;
	Для Каждого ТекСкидка Из Скидки Цикл
		Если ПредыдущаяСкидка <> Неопределено Тогда
			Если ТекСкидка.Номенклатура = ПредыдущаяСкидка.Номенклатура Тогда
				СтрокиКУдалению.Добавить(ТекСкидка);
			КонецЕсли;
		КонецЕсли;
		ПредыдущаяСкидка = ТекСкидка;
	КонецЦикла;
	Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		Скидки.Удалить(СтрокаКУдалению);
	КонецЦикла;
	Для Каждого ТекСкидка Из Скидки Цикл
	    Если ТипЗнч(ТекСкидка.ПолучательСкидки) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			Если ТекСкидка.ПолучательСкидки	= Справочники.ДоговорыКонтрагентов.ПустаяСсылка() Тогда
				itemtypecode = "buypointtype";
				itemcode = "bpt_1";
			Иначе
				itemtypecode = "agreement";
				itemcode = "agreement_" + ФСокрКод(ТекСкидка.ПолучательСкидки) + "_" + ФСокрКод(ТекСкидка.ПолучательСкидки.Владелец);
			КонецЕсли;
		ИначеЕсли ТипЗнч(ТекСкидка.ПолучательСкидки) = Тип("СправочникСсылка.Контрагенты") Тогда
			itemtypecode = "buyer";
			itemcode = "buyer_" + ФСокрКод(ТекСкидка.ПолучательСкидки);	
		КонецЕсли;	
		Если ТекСкидка.Условие = Перечисления.УсловияСкидкиНаценки.ПоКоличествуТовара Тогда
			типУсловия = "3001";
			значениеУсловия = ТекСкидка.ЗначениеУсловия;
		ИначеЕсли ТекСкидка.Условие = Перечисления.УсловияСкидкиНаценки.ПоСуммеДокумента Тогда
			типУсловия = "3002";
			значениеУсловия = ТекСкидка.ЗначениеУсловия;
		Иначе
			типУсловия = "3003";
			значениеУсловия = 0;
		КонецЕсли;
			discountlist	= ДобавитьОбъект(ДокXML, "discountlist");
			ДобавитьПотомка(discountlist, "itemtypecode", itemtypecode);
			ДобавитьПотомка(discountlist, "itemcode", itemcode);
			//ДобавитьПотомка(discountlist, "SKUcode", "sku_" + ФСокрКод(ТекСкидка.Номенклатура) + "_" +ФСокрХарКод(ТекСкидка.Характеристика));
			Если НЕ (ТекСкидка.Номенклатура = Справочники.Номенклатура.ПустаяСсылка()) Тогда
				ДобавитьПотомка(discountlist, "SKUcode", "sku_" + ФСокрКод(ТекСкидка.Номенклатура));
			КонецЕсли;
			ДобавитьПотомка(discountlist, "startdate", ТекСкидка.Начало);
			ДобавитьПотомка(discountlist, "enddate", ДобавитьМесяц(ТекущаяДата(),12));
			ДобавитьПотомка(discountlist, "conditioncode", типУсловия);
			ДобавитьПотомка(discountlist, "conditionvalue", значениеУсловия);
			ДобавитьПотомка(discountlist, "discountrate",-1*ТекСкидка.Процент);
			ДобавитьПотомка(discountlist, "currencycode","currency_"+ФСокрКОд(МТ_Валюта));
			ДобавитьПотомка(discountlist, "priority",1);
			ДобавитьНоду(discountlists, discountlist);
	КонецЦикла;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МТ_ЦеновыеГруппы", МТ_ЦеновыеГруппы);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Запрос.УстановитьПараметр("МТ_СписокПолучателей", МТ_СписокПолучателей);
	Запрос.УстановитьПараметр("МТ_Договора", МТ_ДОговора.ВыгрузитьКолонку("Договор"));
	Текст = "ВЫБРАТЬ
	|	СкидкиНаценкиПоЦеновымГруппам.Период КАК Начало,
	|	СкидкиНаценкиПоЦеновымГруппам.Регистратор,
	|	СкидкиНаценкиПоЦеновымГруппам.НомерСтроки,
	|	СкидкиНаценкиПоЦеновымГруппам.Активность,
	|	СкидкиНаценкиПоЦеновымГруппам.ЦеноваяГруппа,
	|	СкидкиНаценкиПоЦеновымГруппам.Качество,
	|	СкидкиНаценкиПоЦеновымГруппам.Условие,
	|	СкидкиНаценкиПоЦеновымГруппам.ЗначениеУсловия,
	|	СкидкиНаценкиПоЦеновымГруппам.ПолучательСкидки,
	|	СкидкиНаценкиПоЦеновымГруппам.ПроцентСкидкиНаценки КАК Процент,
	|	СкидкиНаценкиПоЦеновымГруппам.ОграничениеСкидкиНаценки,
	|	СкидкиНаценкиПоЦеновымГруппам.Валюта,
	|	СкидкиНаценкиПоЦеновымГруппам.ДатаОкончания КАК ВремяОкончания
	|ИЗ
	|	РегистрСведений.СкидкиНаценкиПоЦеновымГруппам КАК СкидкиНаценкиПоЦеновымГруппам
	|ГДЕ
	|	СкидкиНаценкиПоЦеновымГруппам.ЦеноваяГруппа В(&МТ_ЦеновыеГруппы)
	|	И (СкидкиНаценкиПоЦеновымГруппам.ПолучательСкидки В(&МТ_СписокПолучателей) ИЛИ СкидкиНаценкиПоЦеновымГруппам.ПолучательСкидки В(&МТ_Договора))
	|	И ((НЕ СкидкиНаценкиПоЦеновымГруппам.ДатаОкончания < &ТекущаяДата) ИЛИ (СкидкиНаценкиПоЦеновымГруппам.ДатаОкончания = ДАТАВРЕМЯ(1,1,1,0,0,0)))
	|УПОРЯДОЧИТЬ ПО
	|	ЦеноваяГруппа,
	|	Начало УБЫВ";
	Запрос.Текст           = Текст;
	Скидки = Запрос.Выполнить().Выгрузить();
	ПредыдущаяСкидка = Неопределено;
	СтрокиКУдалению = Новый Массив;
	Для Каждого ТекСкидка Из Скидки Цикл
		Если ПредыдущаяСкидка <> Неопределено Тогда
			Если ТекСкидка.ЦеноваяГруппа = ПредыдущаяСкидка.ЦеноваяГруппа Тогда
				СтрокиКУдалению.Добавить(ТекСкидка);
			КонецЕсли;
		КонецЕсли;
		ПредыдущаяСкидка = ТекСкидка;
	КонецЦикла;
	Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		Скидки.Удалить(СтрокаКУдалению);
	КонецЦикла;
	Для Каждого ТекСкидка Из Скидки Цикл
	    Если ТипЗнч(ТекСкидка.ПолучательСкидки) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			Если ТекСкидка.ПолучательСкидки	= Справочники.ДоговорыКонтрагентов.ПустаяСсылка() Тогда
				itemtypecode = "buypointtype";
				itemcode = "bpt_1";
			Иначе
				itemtypecode = "agreement";
				itemcode = "agreement_" + ФСокрКод(ТекСкидка.ПолучательСкидки) + "_" + ФСокрКод(ТекСкидка.ПолучательСкидки.Владелец);
			КонецЕсли;
		ИначеЕсли ТипЗнч(ТекСкидка.ПолучательСкидки) = Тип("СправочникСсылка.Контрагенты") Тогда
			itemtypecode = "buyer";
			itemcode = "buyer_" + ФСокрКод(ТекСкидка.ПолучательСкидки);	
		КонецЕсли;	
		Если ТекСкидка.Условие = Перечисления.УсловияСкидкиНаценки.ПоКоличествуТовара Тогда
			типУсловия = "3001";
			значениеУсловия = ТекСкидка.ЗначениеУсловия;
		ИначеЕсли ТекСкидка.Условие = Перечисления.УсловияСкидкиНаценки.ПоСуммеДокумента Тогда
			типУсловия = "3002";
			значениеУсловия = ТекСкидка.ЗначениеУсловия;
		Иначе
			типУсловия = "3003";
			значениеУсловия = 0;
		КонецЕсли;
		discountlist	= ДобавитьОбъект(ДокXML, "discountlist");
		ДобавитьПотомка(discountlist, "itemtypecode", itemtypecode);
		ДобавитьПотомка(discountlist, "itemcode", itemcode);
		ДобавитьПотомка(discountlist, "classifiercode", "cl_" + ФСокрКод(ТекСкидка.ЦеноваяГруппа));
		ДобавитьПотомка(discountlist, "startdate", ТекСкидка.Начало);
		ДобавитьПотомка(discountlist, "enddate", ДобавитьМесяц(ТекущаяДата(),12));
		ДобавитьПотомка(discountlist, "conditioncode", типУсловия);
		ДобавитьПотомка(discountlist, "conditionvalue", значениеУсловия);
		ДобавитьПотомка(discountlist, "discountrate",-1*ТекСкидка.Процент); //ERROR {ВнешняяОбработка.Upload.МодульОбъекта(1417)}: Поле об`єкту не виявлено (Процент)
		ДобавитьПотомка(discountlist, "currencycode","currency_"+ФСокрКОд(МТ_Валюта));
		ДобавитьПотомка(discountlist, "priority",1);
		ДобавитьНоду(discountlists, discountlist);
	КонецЦикла;
	ДобавитьНоду(group, discountlists);
КонецФункции

функция ВыгрузитьРегЗадолженности(group)
	debts = ДокXML.CreateElement("debts");	 	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("МТ_ТТСписок" , МТ_ТТСписок);
	Запрос.УстановитьПараметр("ДатаКон"        , ТекущаяДата());
	Запрос.УстановитьПараметр("ВидДоговораПокупатель"        , Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	Запрос.УстановитьПараметр("ТекущийПользовательФизЛизо"        , Справочники.ФизическиеЛица.ПустаяСсылка());
	Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Взаиморасчеты.Контрагент КАК Контрагент,
		|	Взаиморасчеты.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	Взаиморасчеты.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК Валюта,
		|	Взаиморасчеты.ДокументРасчетовСКонтрагентом КАК КредДокумент,
		|	Взаиморасчеты.Контрагент.ОсновнойМенеджерПокупателя КАК Менеджер,
		|	Взаиморасчеты.СуммаВзаиморасчетовОстаток КАК ДолгВалюта,
		|	Взаиморасчеты.СуммаВзаиморасчетовОстаток * КурсыВалютСрезПоследних.Курс / КурсыВалютСрезПоследних.Кратность КАК Долг,
		|	Взаиморасчеты.ДокументРасчетовСКонтрагентом.Номер КАК НомерДокумента,
		|	Взаиморасчеты.ДокументРасчетовСКонтрагентом.Дата КАК ДатаДокумента
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.Остатки(&ДатаКон, ДоговорКонтрагента.ВидДоговора = &ВидДоговораПокупатель) КАК Взаиморасчеты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаКон, ) КАК КурсыВалютСрезПоследних
		|		ПО Взаиморасчеты.ДоговорКонтрагента.ВалютаВзаиморасчетов = КурсыВалютСрезПоследних.Валюта
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки КАК ВзаиморасчетыСКонтрагентамиОстатки
		|		ПО Взаиморасчеты.ДоговорКонтрагента.Ссылка = ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Ссылка
		|{ГДЕ   
		|	Взаиморасчеты.Контрагент.* КАК Контрагент,
		|	Взаиморасчеты.ДоговорКонтрагента.ВалютаВзаиморасчетов.* КАК Валюта,
		|	Взаиморасчеты.Контрагент.ОсновнойМенеджерПокупателя.* КАК Менеджер,
		|	ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток КАК Долг}
		|Где 
		|	Взаиморасчеты.Контрагент В (&МТ_ТТСписок)
		|УПОРЯДОЧИТЬ ПО
		|	Контрагент,
		|	Валюта,
		|	ДоговорКонтрагента,
		|	Взаиморасчеты.ДокументРасчетовСКонтрагентом.Дата";
	Запрос.Текст           = Текст;	
	МТ_Долги = Запрос.Выполнить().Выгрузить();
	мСписокВалютОтчета = Новый СписокЗначений();
	мСписокВалютОтчета.Добавить(Константы.ВалютаРегламентированногоУчета.Получить());
	Для Каждого элДолг Из МТ_Долги Цикл;
		Если НЕ(элДолг.Долг > 0) Тогда
			Продолжить;
		КонецЕсли;
		debt = ДобавитьОбъект(ДокXML, "debt");
		ДобавитьПотомка(debt, "firmcode", "firm_" + ФСокрКод(МТ_Фирма));
		ДобавитьПотомка(debt, "currencycode", "currency_"+ФСокрКод(МТ_Валюта));
		ДобавитьПотомка(debt, "buyercode", "buyer_" + ФСокрКод(элДолг.Контрагент));
		//ДобавитьПотомка(debt, "buypointcode", "buypoint_" + ФСокрКод(элДолг.Контрагент));
		ДобавитьПотомка(debt, "counteragentcode", "counteragent_" + ФСокрКод(элДолг.Контрагент));
		ДобавитьПотомка(debt, "agreementcode", "agreement_" + ФСокрКод(элДолг.ДоговорКонтрагента) + "_" + ФСокрКод(элДолг.Контрагент));
		КредДокумент = элДолг.КредДокумент;
		ДобавитьПотомка(debt, "amount", элДолг.Долг);
		Если ЗначениеЗаполнено(КредДокумент) Тогда 
			Если ТипЗнч(КредДокумент) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
				префикс = "РТУ_";
			ИначеЕсли ТипЗнч(КредДокумент) = Тип("ДокументСсылка.КорректировкаДолга") Тогда
				префикс = "КД_";
			ИначеЕсли ТипЗнч(КредДокумент) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
				префикс = "ПКО_";
			КонецЕсли;
			номерДок = префикс + СокрЛП(КредДокумент.Номер) + "_"+СтрЗаменить(КредДокумент.Дата," ","-");
			ДобавитьПотомка(debt, "docinfo", номерДок);
			ДобавитьПотомка(debt, "doccode", номерДок);
			ДобавитьПотомка(debt, "period", НачалоДня(КредДокумент.Дата));
		КонецЕсли;
		ДобавитьНоду(debts, debt);
	КонецЦикла;
	ДобавитьНоду(group, debts);
КонецФункции
Функция ВыгрузитьДокОтгрузкиТовара(group)
	invoices = ДокXML.CreateElement("invoices");
	//Запрос=Новый Запрос;
	//Запрос.Текст="ВЫБРАТЬ
	//|	РеализацияТоваровУслуг.Контрагент,
	//|	РеализацияТоваровУслуг.Дата,
	//|	РеализацияТоваровУслуг.ПометкаУдаления,
	//|	РеализацияТоваровУслуг.ССылка
	//|ИЗ
	//|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	//|ГДЕ
	//|	РеализацияТоваровУслуг.Дата МЕЖДУ &Дата1 И &Дата2
	//|	И РеализацияТоваровУслуг.Контрагент В (&МТ_ТТСписок)
	//|	И РеализацияТоваровУслуг.ПометкаУдаления = ЛОЖЬ";
	//Запрос.УстановитьПараметр("Дата1",ТекущаяДата()-90*86400);
	//Запрос.УстановитьПараметр("Дата2",ТекущаяДата()+4*86400);
	//Запрос.УстановитьПараметр("МТ_ТТСписок", МТ_Контрагенты);
	//Результат=Запрос.Выполнить();  
	//Выборка=Результат.Выбрать();
	//Отбор = Новый Структура;
	//Отбор.Вставить("Проведен",Ложь);
	док_РеализацияТУ = Документы.РеализацияТоваровУслуг.Выбрать(ТекущаяДата()-30*86400,ТекущаяДата()+4*86400);
	Пока док_РеализацияТУ.Следующий() Цикл
		Если не док_РеализацияТУ.ПометкаУдаления и док_РеализацияТУ.Проведен = Истина Тогда 
			Док = док_РеализацияТУ.ССылка;
			invoice = ДобавитьОбъект(ДокXML, "invoice");
			ДобавитьПотомка(invoice, "code","invoice_" + СокрЛП(Док.Номер));
			ДобавитьПотомка(invoice, "deleted", 0);
			ДобавитьПотомка(invoice, "date", Док.Дата);
			ДобавитьПотомка(invoice, "num", Док.Номер);
			ДобавитьПотомка(invoice, "firmcode", "firm_" + ФСокрКод(МТ_Фирма));
			ДобавитьПотомка(invoice, "buypointcode", "buypoint_" + ФСокрКод(Док.Контрагент));
			ДобавитьПотомка(invoice, "buyercode", "buyer_" + ФСокрКод(Док.Контрагент));
			ДобавитьПотомка(invoice, "counteragentcode", "counteragent_" + ФСокрКод(Док.Контрагент));
			//ДобавитьПотомка(invoice, "agreementcode", "agreement_" + ФСокрКод(Док.Соглашение));
			ДобавитьПотомка(invoice, "currencycode", "currency_"+ФСокрКод(МТ_Валюта));
			ДобавитьПотомка(invoice, "amount", СтрЗаменить(Формат(Док.СуммаДокумента,"ЧГ="),".",","));
			body = ДокXML.CreateElement("body");
			Для каждого Товар Из  Док.Товары Цикл
				item = ДокXML.CreateElement("item");
				ДобавитьПотомка(item, "SKUcode", "sku_" + ФСокрКод(Товар.Номенклатура));
				спрЕдиницыИзмерения = Справочники.ЕдиницыИзмерения.Выбрать(,Товар.Номенклатура.Ссылка);
				Пока спрЕдиницыИзмерения.Следующий() Цикл
					ДобавитьПотомка(item, "unitcode", "unit_"+ ФСокрКод(спрЕдиницыИзмерения.ЕдиницаПоКлассификатору));
				КонецЦикла;
				//ДобавитьПотомка(item, "unitcode", "unit_"+ФСокрКод(Товар.ЕдиницаИзмерения));
				//ДобавитьПотомка(item, "discountRate", СтрЗаменить(Формат(-1*(Товар.ПроцентРучнойСкидки+Товар.ПроцентАвтоматическойСкидки),"ЧГ="),".",","));
				ДобавитьПотомка(item, "quantity", СтрЗаменить(Формат(Товар.Количество,"ЧГ="),".",","));
				//ДобавитьПотомка(item, "unitfactor", ?(ЗначениеЗаполнено(Товар.Упаковка),Товар.Упаковка.Коэффициент,1));
				ДобавитьПотомка(item, "price", СтрЗаменить(Формат(Товар.Цена,"ЧГ="),".",","));
				ДобавитьПотомка(item, "VATRate", СтрЗаменить(Формат(Товар.Количество,"ЧГ="),".",","));
				ДобавитьНоду(body, item);    
			КонецЦикла;
			ДобавитьНоду(invoice, body);
			ДобавитьНоду(invoices, invoice);
			Сообщить(Док.Номер);
		КонецЕсли;
	КонецЦикла;
	ДобавитьНоду(group, invoices);
КонецФункции
Функция ВыгрузитьДокЗаказыТовара(group)
	preorders = ДокXML.CreateElement("preorders");
	ГлубинаВыгрузки = НачалоДня(ТекущаяДата() - ?(МТ_флагОбмена = 0,МТ_ГлубинаОтгрузок*86400,0));
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ЗаказКлиента.ССылка
	|ИЗ
	|	Документ.ЗаказКлиента КАК ЗаказКлиента
	|ГДЕ
	|	ЗаказКлиента.Дата МЕЖДУ &Дата1 И &Дата2
	|	И ЗаказКлиента.МТ_Агент В (&МТ_Маршруты)
	|	И ЗаказКлиента.ПометкаУдаления = ЛОЖЬ";
	Запрос.УстановитьПараметр("Дата1",НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("Дата2",КонецДня(ТекущаяДата()+86400));
	Запрос.УстановитьПараметр("МТ_Маршруты", МТ_Маршруты.ВыгрузитьКолонку("Маршрут"));
	Результат=Запрос.Выполнить();  
	Выборка=Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Док = Выборка.ССылка;
		preorder = ДокXML.CreateElement("preorder");
		ДобавитьПотомка(preorder, "code", СокрЛП(Док.Номер));
		ДобавитьПотомка(preorder, "innercode", СокрЛП(Док.МТ_КодВнешний));
		ДобавитьПотомка(preorder, "statecode", ?(Док.Проведен,4,3));
		ДобавитьПотомка(preorder, "deleted", 0);
		//ДобавитьПотомка(preorder, "date", Док.Дата);
		ДобавитьПотомка(preorder, "num", СокрЛП(Док.Номер));
		//ДобавитьПотомка(preorder, "firmcode", "firm_" + ФСокрКод(МТ_Фирма));
		//КодАгента = ФСокрКод(Док.МТ_Агент);
		//ДобавитьПотомка(preorder, "employeecode", "employee_" + КодАгента);
		//ДобавитьПотомка(preorder, "creatorcode", "employee_" + КодАгента);
		//ДобавитьПотомка(preorder, "routecode", КодАгента);
		//ДобавитьПотомка(preorder, "storecode", "store_"+ФСокрКод(Док.Склад));             
		//ДобавитьПотомка(preorder, "agreementcode", "agreement_" + ФСокрКод(Док.Соглашение));
		//ДобавитьПотомка(preorder, "buypointcode", "buypoint_" + ФСокрКод(Док.Контрагент));
		//ДобавитьПотомка(preorder, "buyercode", "buyer_" + ФСокрКод(Док.Партнер));
		//ДобавитьПотомка(preorder, "counteragentcode", "counteragent_" + ФСокрКод(Док.Партнер));
		//ДобавитьПотомка(preorder, "currencycode", "currency_"+ФСокрКод(МТ_Валюта));
		//ДобавитьПотомка(preorder, "amount", СтрЗаменить(Формат(Док.СуммаДокумента,"ЧГ="),".",","));
		//body = ДокXML.CreateElement("body");
		//Для каждого Товар Из  Док.Товары Цикл
		//	item = ДобавитьОбъект(ДокXML, "item");
		//	ДобавитьПотомка(item, "SKUcode", "sku_" + ФСокрКод(Товар.Номенклатура));
		//	ДобавитьПотомка(item, "unitcode", "unit_"+ФСокрКод(Товар.Упаковка.ЕдиницаИзмерения));
		//	ДобавитьПотомка(item, "unitfactor", 1.0);
		//	ДобавитьПотомка(item, "discountRate", -1*(Товар.ПроцентАвтоматическойСкидки+Товар.ПроцентРучнойСкидки));
		//	ДобавитьПотомка(item, "quantity", СтрЗаменить(Формат(Товар.Количество,"ЧГ="),".",","));
		//	ДобавитьПотомка(item, "price", СтрЗаменить(Формат(Товар.Цена,"ЧГ="),".",","));
		//	ДобавитьНоду(body, item);    
		//КонецЦикла;
		//ДобавитьНоду(preorder, body);
		ДобавитьНоду(preorders, preorder);
	КонецЦикла;
	ДобавитьНоду(group, preorders);
КонецФункции
Функция ВыгрузитьДокЗадачи(group)
	workingdayofagents = ДокXML.CreateElement("workingdayofagents");
	Если МТ_флагОбмена = 0 Тогда
		ВыгрузкаЗадач = НачалоДня(ТекущаяДата()-30*24*3600);
	ИначеЕсли МТ_флагОбмена = 1 И МТ_ТипАгента Тогда
		ВыгрузкаЗадач = НачалоДня(ТекущаяДата());
	КонецЕсли;
	Для Каждого текМаршрут Из МТ_Маршруты Цикл
		текДата = Дата('19990101');
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
					|	МТ_Задачи.Задача,
					|	МТ_Задачи.Контрагент,
					|	МТ_Задачи.ВремяНачалаВыполенияЗадачи,
					|	МТ_Задачи.ВремяЗавершенияВыполенияЗадачи,
					|	МТ_Задачи.ВремяДобавленияИзображения,
					|	МТ_Задачи.ИсходЗадачи,
					|	МТ_Задачи.Комментарий,
					|	МТ_Задачи.Маршрут
					|ИЗ
					|	РегистрСведений.МТ_Задачи КАК МТ_Задачи
					|ГДЕ
					|	МТ_Задачи.Маршрут = &текМаршрут
					|	И МТ_Задачи.ВремяЗавершенияВыполенияЗадачи > &ДатаКонец
					|УПОРЯДОЧИТЬ ПО
					|	ВремяЗавершенияВыполенияЗадачи УБЫВ";
		Запрос.УстановитьПараметр("текМаршрут", текМаршрут.Маршрут);
		Запрос.УстановитьПараметр("ДатаКонец",ВыгрузкаЗадач);
		Результат=Запрос.Выполнить();
		текЗадача=Результат.Выбрать();
		Пока текЗадача.Следующий() Цикл
			ДатаЗадачи = НачалоДня(текЗадача.ВремяЗавершенияВыполенияЗадачи);
			Если ДатаЗадачи <> текДата Тогда
				workingdayofagent = ДокXML.CreateElement("workingdayofagent");
				ДобавитьПотомка(workingdayofagent, "code", "workDay_"+ФСокрКод(текМаршрут.Маршрут)+"_" + СокрЛП(Формат(ДатаЗадачи, "ДФ=""ггггММдд""")));
				ДобавитьПотомка(workingdayofagent, "date", ДатаЗадачи);
				ДобавитьПотомка(workingdayofagent, "routecode", ФСокрКод(текМаршрут.Маршрут));
				ДобавитьПотомка(workingdayofagent, "employeecode", "employee_" +ФСокрКод(текМаршрут.Маршрут));
				ДобавитьПотомка(workingdayofagent, "statecode", 4);
				ДобавитьПотомка(workingdayofagent, "num", ФСокрКод(текМаршрут.Маршрут) + "_" +СокрЛП(Формат(ДатаЗадачи, "ДФ=""ггггММдд""")));
				ДобавитьПотомка(workingdayofagent, "creatorcode", "employee_" +ФСокрКод(текМаршрут.Маршрут));
				body = ДокXML.CreateElement("body");
			КонецЕсли;
			item = ДокXML.CreateElement("item");
			//Если ТекАгент <> МТ_Задача.Задача.Создатель ИЛИ МТ_ТипОбмена = 0 Тогда
				ДобавитьПотомка(item, "taskcode", "task_"+ФСокрКод(текЗадача.Задача));
			//Иначе
			//	ДобавитьПотомка(item, "innercode", СокрЛП(МТ_Задача.Задача.МТ_КодВнешний));
			Если НЕ текЗадача.Контрагент.Пустая() Тогда
				ДобавитьПотомка(item, "buypointcode", "buypoint_" + ФСокрКод(текЗадача.Контрагент));
			КонецЕсли;
			ДобавитьПотомка(item, "startdate", текЗадача.ВремяНачалаВыполенияЗадачи);
			ДобавитьПотомка(item, "enddate", текЗадача.	ВремяЗавершенияВыполенияЗадачи);
			ДобавитьПотомка(item, "taskoutcometext", СокрЛП(текЗадача.ИсходЗадачи));
			ДобавитьПотомка(item, "comment", СокрЛП(текЗадача.Комментарий));
			ДобавитьНоду(body, item);
			Если ДатаЗадачи <> текДата Тогда
				текДата = ДатаЗадачи;
				ДобавитьНоду(workingdayofagent, body);
				ДобавитьНоду(workingdayofagents, workingdayofagent);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	ДобавитьНоду(group, workingdayofagents);
КонецФункции
Функция ВыгрузитьДокСтатусы(group)
	ДокТип = Новый ТаблицаЗначений;
	ДокТип.Колонки.Добавить("Объект");
	ДокТип.Колонки.Добавить("Документ");
	Док = ДокТип.Добавить();
	Док.Объект = "preorder";
	Док.Документ = "ЗаказПокупателя";
	//Док = ДокТип.Добавить();
	//Док.Объект = "skusReturn";
	//Док.Документ = "ЗаказПокупателя";
	Для каждого Док Из ДокТип Цикл
				док_ДокЗаказПокупателя = Документы.ЗаказПокупателя.Выбрать(НачалоДня(ТекущаяДата()),КонецДня(ТекущаяДата()));
	docs = ДокXML.CreateElement(Док.Объект+"s");
	Пока док_ДокЗаказПокупателя.Следующий() Цикл
		Если док_ДокЗаказПокупателя.к_Менеджер.Физлицо = МТ_Агент Тогда
			doc = ДокXML.CreateElement(Док.Объект);
			ДобавитьПотомка(doc, "code", Док.Объект+"_"+СокрЛП(док_ДокЗаказПокупателя.Номер));
			ДобавитьПотомка(doc, "innercode",СокрЛП(док_ДокЗаказПокупателя.МТ_КодВнешний));
			ДобавитьПотомка(doc, "statecode", 4);
			ДобавитьПотомка(doc, "deleted", 0);
			ДобавитьНоду(docs, doc); 
		КонецЕсли;
	КонецЦикла;
	ДобавитьНоду(group, docs);
	КонецЦикла; 

//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	Документ.Ссылка,
	//	|	Документ.Дата,
	//	|	Документ.МТ_КодВнешний,
	//	|	Документ.к_Менеджер,
	//	|	Документ.Номер
	//	|ИЗ
	//	|	Документ."+Док.Документ+" КАК Документ
	//	|ГДЕ
	//	|	Документ.Дата МЕЖДУ &Дата1 И &Дата2
	//	|	И Документ.к_Менеджер = &к_Менеджер
	//	|	И Документ.ПометкаУдаления = ЛОЖЬ";
	//
	//Запрос.УстановитьПараметр("Дата1", НачалоДня(ТекущаяДата()));
	//Запрос.УстановитьПараметр("Дата2", КонецДня(ТекущаяДата()));
	//Запрос.УстановитьПараметр("к_Менеджер", МТ_Агент);
	//РезультатЗапроса = Запрос.Выполнить();
	//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	//Если ВыборкаДетальныеЗаписи.Количество() = 0 Тогда
	//		Продолжить;
	//КонецЕсли;

//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

		//Запрос=Новый Запрос;
		//Запрос.Текст="ВЫБРАТЬ
		//             |	Документ.Ссылка,
		//			 |	Документ.Дата,
		//			 |	Документ.МТ_КодВнешний,
		//			 |	Документ.МТ_Агент,
		//			 |	Документ.Номер
		//			 |ИЗ
		//			 |	Документ."+Док.Документ+" КАК Документ
		//			 |ГДЕ
		//			 |	Документ.Дата МЕЖДУ &Дата1 И &Дата2
		//			 |	И Документ.МТ_Агент = &МТ_ТА
		//			 |	И Документ.ПометкаУдаления = ЛОЖЬ";                   
		//Запрос.УстановитьПараметр("Дата1",НачалоДня(ТекущаяДата()));
		//Запрос.УстановитьПараметр("Дата2",КонецДня(ТекущаяДата()));
		//Запрос.УстановитьПараметр("МТ_ТА",МТ_Агент);
		//Выборка=Запрос.Выполнить().Выбрать();
		//Если Выборка.Количество() = 0 Тогда
		//	Продолжить;
		//КонецЕсли;
		//docs = ДокXML.CreateElement(Док.Объект+"s");
		//Пока Выборка.Следующий() Цикл
		//	doc = ДокXML.CreateElement(Док.Объект);
		//	ДобавитьПотомка(doc, "code", Док.Объект+"_"+СокрЛП(Выборка.МТ_Кодвнешний));
		//	ДобавитьПотомка(doc, "innercode",СокрЛП(Выборка.МТ_КодВнешний));
		//	ДобавитьПотомка(doc, "statecode", 4);
		//	ДобавитьПотомка(doc, "deleted", 0);
		//	ДобавитьНоду(docs, doc);
		//КонецЦикла;
		//ДобавитьНоду(group, docs);

КонецФункции
Функция ВыгрузитьНастрКлассификаторы(group)
	classifiertypes	= ДокXML.CreateElement("classifiertypes");
	спрМТ_НастройкаКласиф = Справочники.МТ_Класификаторы.Выбрать();
	Пока спрМТ_НастройкаКласиф.Следующий() Цикл
		Если спрМТ_НастройкаКласиф.ПометкаУдаления = Ложь Тогда
			classifiertype	= ДобавитьОбъект(ДокXML, "classifiertype");
			ДобавитьПотомка(classifiertype, "code"	, Строка(спрМТ_НастройкаКласиф.ТипКласификатора) + спрМТ_НастройкаКласиф.НомерКласификатора);
			ДобавитьПотомка(classifiertype, "name"	, спрМТ_НастройкаКласиф.ТипКласификатора+" Группа");
		  //ДобавитьПотомка(classifier, "classifiertype"	, Строка(спрМТ_Классификаторы.ТипКласификатора));
		  //ДобавитьПотомка(classifier, "classifiernum"	, спрМТ_Классификаторы.НомерКласификатора);
			ДобавитьНоду(classifiertypes, classifiertype);	
		КонецЕсли; 			
	КонецЦикла; 
	ДобавитьНоду(group, classifiertypes);
КонецФункции
Функция ВыгрузитьНастрОбщие(group)
	settings	= ДокXML.CreateElement("settings");
	
	//------------------------ Общие установки     
	
	setting	= ДобавитьОбъект(ДокXML, "setting");
	ДобавитьПотомка(setting, "code"		, "UseButtonToStartWorkDay");
	ДобавитьПотомка(setting, "value"	, "0");
	ДобавитьНоду(settings, setting);
	
	setting	= ДобавитьОбъект(ДокXML, "setting");
	ДобавитьПотомка(setting, "code"		, "UseAdditionalAttributes");
	ДобавитьПотомка(setting, "value"	, "1213");
	ДобавитьНоду(settings, setting);       
	
	setting	= ДобавитьОбъект(ДокXML, "setting");
	ДобавитьПотомка(setting, "code"		, "WorkAddAttributes");
	ДобавитьПотомка(setting, "value"	, "1");
	ДобавитьНоду(settings, setting);
	
	setting	= ДобавитьОбъект(ДокXML, "setting");
	ДобавитьПотомка(setting, "code"		, "AllowChangeRoute");
	ДобавитьПотомка(setting, "value"	, "1");
	ДобавитьНоду(settings, setting);
	setting	= ДобавитьОбъект(ДокXML, "setting");
	ДобавитьПотомка(setting, "code"		, "RouteWeekCount");
	ДобавитьПотомка(setting, "value"	, "325");
	ДобавитьНоду(settings, setting); 
	
	setting	= ДобавитьОбъект(ДокXML, "setting");
	ДобавитьПотомка(setting, "code"		, "MainCurrency");
	ДобавитьПотомка(setting, "value"	, "currency_"+Строка(980)+"");
	ДобавитьНоду(settings, setting);
	
	setting	= ДобавитьОбъект(ДокXML, "setting");
	ДобавитьПотомка(setting, "code"		, "UseVisitReasons");
	ДобавитьПотомка(setting, "value"	, "0");
	ДобавитьНоду(settings, setting);
		
	setting	= ДобавитьОбъект(ДокXML, "setting");     
	ДобавитьПотомка(setting, "code"		, "WeightUnitName");
	ДобавитьПотомка(setting, "value"	, "кг");
	ДобавитьНоду(settings, setting);
	
	//------------------- Общие установки
	
	//------------------- Ценообразование
	
	setting	= ДобавитьОбъект(ДокXML, "setting");     
	ДобавитьПотомка(setting, "code"		, "CountFiguresRoundNumberGood");
	ДобавитьПотомка(setting, "value"	, 3);
	ДобавитьНоду(settings, setting);
	setting	= ДобавитьОбъект(ДокXML, "setting");     
	ДобавитьПотомка(setting, "code"		, "CountFiguresRoundInPriceList");
	ДобавитьПотомка(setting, "value"	, 2);
	ДобавитьНоду(settings, setting);
	setting	= ДобавитьОбъект(ДокXML, "setting");     
	ДобавитьПотомка(setting, "code"		, "CountFiguresRoundPDAPrice");
	ДобавитьПотомка(setting, "value"	, 2 );  //  МТ_ГлубинаОтгрузок
	ДобавитьНоду(settings, setting);
	setting	= ДобавитьОбъект(ДокXML, "setting");     
	ДобавитьПотомка(setting, "code"		, "CountFiguresRoundPDASums");
	ДобавитьПотомка(setting, "value"	, 2);   //  МТ_ГлубинаОтгрузок
	ДобавитьНоду(settings, setting);
	setting	= ДобавитьОбъект(ДокXML, "setting");     
	ДобавитьПотомка(setting, "code"		, "PriceEditMode");
	ДобавитьПотомка(setting, "value"	, 0);
	ДобавитьНоду(settings, setting);
	setting	= ДобавитьОбъект(ДокXML, "setting");
	ДобавитьПотомка(setting, "code"		, "AllowUseDiscount");
	ДобавитьПотомка(setting, "value"	, "0");
	ДобавитьНоду(settings, setting);
	setting	= ДобавитьОбъект(ДокXML, "setting");
	ДобавитьПотомка(setting, "code"		, "AllowUseManualDiscount");
	ДобавитьПотомка(setting, "value"	, "1");
	ДобавитьНоду(settings, setting);      
	
		
	setting	= ДобавитьОбъект(ДокXML, "setting");
	ДобавитьПотомка(setting, "code"		, "VATinPrice");
	ДобавитьПотомка(setting, "value"	, "1");
	ДобавитьНоду(settings, setting);
	
	//------------------  Ценообразование
	
	setting	= ДобавитьОбъект(ДокXML, "setting");
	ДобавитьПотомка(setting, "code"		, "GMT");
	ДобавитьПотомка(setting, "value"	, 2);
	ДобавитьНоду(settings, setting);

	//-------------------  Настройки по умолчанию
	Если ЗначениеЗаполнено(МТ_Фирма) Тогда
		setting	= ДобавитьОбъект(ДокXML, "setting");
		ДобавитьПотомка(setting, "code"		, "DefaultFirm");
		ДобавитьПотомка(setting, "value"	, "firm_" + ФСокрКод(МТ_Фирма.Ссылка));
		ДобавитьНоду(settings, setting);
	КонецЕсли;
	Если ЗначениеЗаполнено(МТ_Фирма) Тогда
		setting	= ДобавитьОбъект(ДокXML, "setting");
		ДобавитьПотомка(setting, "code"		, "FullDownloadPeriodicity");
		ДобавитьПотомка(setting, "value"	, 1);
		ДобавитьНоду(settings, setting);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(МТ_ТипЦен) Тогда
		setting	= ДобавитьОбъект(ДокXML, "setting");
		ДобавитьПотомка(setting, "code"		, "DefaultPriceType");
		ДобавитьПотомка(setting, "value"	, "pricetype_"+ФСокрКод(МТ_ТипЦен));
		ДобавитьНоду(settings, setting);
	КонецЕсли;
	//Если ЗначениеЗаполнено(МТ_ТипЦен) Тогда
	//	setting	= ДобавитьОбъект(ДокXML, "setting");
	//	ДобавитьПотомка(setting, "code"		, "DefaultPayType");
	//	ДобавитьПотомка(setting, "value"	, "paytype_"+ФСокрКод(Константы.МТ_));
	//	ДобавитьНоду(settings, setting);
	//КонецЕсли;
	МТ_СкладОсн = Справочники.Склады.Выбрать();
	Пока МТ_СкладОсн.Следующий() Цикл
		Если МТ_СкладОсн.Наименование = "Склад 1" Тогда
			setting	= ДобавитьОбъект(ДокXML, "setting");
			ДобавитьПотомка(setting, "code"		, "DefaultStorage");
			ДобавитьПотомка(setting, "value"	, "store_"+ФСокрКод(МТ_СкладОсн)); // 
			ДобавитьНоду(settings, setting);	
		КонецЕсли;
	КонецЦикла; 
	
	setting	= ДобавитьОбъект(ДокXML, "setting");
	ДобавитьПотомка(setting, "code"		, "DefaultDayDelivery");
	ДобавитьПотомка(setting, "value"	, 1);
	ДобавитьНоду(settings, setting);
	
	setting	= ДобавитьОбъект(ДокXML, "setting");     
	ДобавитьПотомка(setting, "code"		, "UseRecOrder");
	ДобавитьПотомка(setting, "value"	, "0");
	ДобавитьНоду(settings, setting);
	setting	= ДобавитьОбъект(ДокXML, "setting");     
	ДобавитьПотомка(setting, "code"		, "RestsDisplayMode");
	ДобавитьПотомка(setting, "value"	, "340");
	ДобавитьНоду(settings, setting);
	
	//------------------------------ НАстройки фото отчета
	setting	= ДобавитьОбъект(ДокXML, "setting");     
	ДобавитьПотомка(setting, "code"		, "ForbidPrint");
	ДобавитьПотомка(setting, "value"	, "0");
	ДобавитьНоду(settings, setting);
	setting	= ДобавитьОбъект(ДокXML, "setting");     
	ДобавитьПотомка(setting, "code"		, "UsePhoto");
	ДобавитьПотомка(setting, "value"	, "1");
	ДобавитьНоду(settings, setting);
	setting	= ДобавитьОбъект(ДокXML, "setting");     
	ДобавитьПотомка(setting, "code"		, "ActualPhotoPeriod");
	ДобавитьПотомка(setting, "value"	, "1440");
	ДобавитьНоду(settings, setting);
	setting	= ДобавитьОбъект(ДокXML, "setting");     
	ДобавитьПотомка(setting, "code"		, "AdditionsExchangeMode");
	ДобавитьПотомка(setting, "value"	, "3071");
	ДобавитьНоду(settings, setting);
	setting	= ДобавитьОбъект(ДокXML, "setting");     
	ДобавитьПотомка(setting, "code"		, "MaxPhotoSize");
	ДобавитьПотомка(setting, "value"	, "0");
	ДобавитьНоду(settings, setting);
	
	
	//------------------------------ НАстройки фото отчета
	//-------------------  Настройки по умолчанию
	
	setting	= ДобавитьОбъект(ДокXML, "setting");     
	ДобавитьПотомка(setting, "code"		, "BackgroundExchangeEnable");
	ДобавитьПотомка(setting, "value"	, "0");
	ДобавитьНоду(settings, setting);
	setting	= ДобавитьОбъект(ДокXML, "setting");     
	ДобавитьПотомка(setting, "code"		, "ReportSupportEmail");
	ДобавитьПотомка(setting, "value"	, "support@systtech.ru");
	ДобавитьНоду(settings, setting);
	//setting	= ДобавитьОбъект(ДокXML, "setting");     
	//ДобавитьПотомка(setting, "code"		, "UsePhoto");
	//ДобавитьПотомка(setting, "value"	, "0");
	//ДобавитьНоду(settings, setting);
	setting	= ДобавитьОбъект(ДокXML, "setting");     
	ДобавитьПотомка(setting, "code"		, "LastSalesPeriod");
	ДобавитьПотомка(setting, "value"	, МТ_ГлубинаОтгрузок);
	ДобавитьНоду(settings, setting);
	setting	= ДобавитьОбъект(ДокXML, "setting");     
	ДобавитьПотомка(setting, "code"		, "LastSalesPeriod");
	ДобавитьПотомка(setting, "value"	, "2");
	ДобавитьНоду(settings, setting);
	setting	= ДобавитьОбъект(ДокXML, "setting");
	ДобавитьПотомка(setting, "code"		, "AllowSaveLimitOutDoc");
	ДобавитьПотомка(setting, "value"	, "0");
	ДобавитьНоду(settings, setting);
	setting	= ДобавитьОбъект(ДокXML, "setting");
	ДобавитьПотомка(setting, "code"		, "LastSalesDepth");
	ДобавитьПотомка(setting, "value"	, 4);
	ДобавитьНоду(settings, setting);      
		
	setting	= ДобавитьОбъект(ДокXML, "setting");
	ДобавитьПотомка(setting, "code"		, "GPSLogEnable");
	ДобавитьПотомка(setting, "value"	, "0");
	ДобавитьНоду(settings, setting);
	//setting	= ДобавитьОбъект(ДокXML, "setting");
	//ДобавитьПотомка(setting, "code"		, "GPSLogEnableOnBuypointOnly");
	//ДобавитьПотомка(setting, "value"	, 0);
	//ДобавитьНоду(settings, setting);        
	//setting	= ДобавитьОбъект(ДокXML, "setting");
	//ДобавитьПотомка(setting, "code"		, "GPSLogTimeInterval");
	//ДобавитьПотомка(setting, "value"	, 15);
	//ДобавитьНоду(settings, setting);        
	//setting	= ДобавитьОбъект(ДокXML, "setting");
	//ДобавитьПотомка(setting, "code"		, "GPSLogMaxVelocity");
	//ДобавитьПотомка(setting, "value"	, 25);
	//ДобавитьНоду(settings, setting);        
	//setting	= ДобавитьОбъект(ДокXML, "setting");
	//ДобавитьПотомка(setting, "code"		, "GPSLogMaxAcceleration");
	//ДобавитьПотомка(setting, "value"	, 5);
	//ДобавитьНоду(settings, setting);
	
	ДобавитьНоду(group, settings);
КонецФункции
Функция ВыгрузитьСценарииБлокировки(group)
	AgentWorkflows = ДокXML.CreateElement("AgentWorkflows");
	AgentWorkflow = ДобавитьОбъект(ДокXML, "AgentWorkflow");
	ДобавитьПотомка(AgentWorkflow, "code", "awf_1");
	ДобавитьПотомка(AgentWorkflow, "name", "Отключение операций");
	routes = ДобавитьОбъект(ДокXML, "routes");
	route = ДобавитьОбъект(ДокXML, "route");
	ДобавитьПотомка(route, "routecode", МТ_Код);
	ДобавитьНоду(routes, route);
	ДобавитьНоду(AgentWorkflow, routes);
	tasks1 = ДобавитьОбъект(ДокXML, "tasks");
		task = ДобавитьОбъект(ДокXML, "task");
		ДобавитьПотомка(task, "code", "awf_td_91");
		ДобавитьПотомка(task, "name", "preorder");
		ДобавитьПотомка(task, "isLocked", 0);
		ДобавитьПотомка(task, "objecttype", "5264");
		ДобавитьПотомка(task, "objectcode", 91);
		ДобавитьПотомка(task, "priority", 4);
		ДобавитьНоду(tasks1, task);
		task = ДобавитьОбъект(ДокXML, "task");
		ДобавитьПотомка(task, "code", "awf_td_92");
		ДобавитьПотомка(task, "name", "merchandise");
		ДобавитьПотомка(task, "isLocked", 1);
		ДобавитьПотомка(task, "objecttype", "5264");
		ДобавитьПотомка(task, "objectcode", 92);
		ДобавитьПотомка(task, "priority", 2);
		ДобавитьНоду(tasks1, task);
		task = ДобавитьОбъект(ДокXML, "task");
		ДобавитьПотомка(task, "code", "awf_td_90");
		ДобавитьПотомка(task, "name", "invoice");
		ДобавитьПотомка(task, "isLocked", 1);
		ДобавитьПотомка(task, "objecttype", "5264");
		ДобавитьПотомка(task, "objectcode", 90);
		ДобавитьПотомка(task, "priority", 1);
		ДобавитьНоду(tasks1, task);
		task = ДобавитьОбъект(ДокXML, "task");
		ДобавитьПотомка(task, "code", "awf_td_98");
		ДобавитьПотомка(task, "name", "skusReturn");
		ДобавитьПотомка(task, "isLocked", 1);
		ДобавитьПотомка(task, "objecttype", "5264");
		ДобавитьПотомка(task, "objectcode", 98);
		ДобавитьПотомка(task, "priority", 3);
		ДобавитьНоду(tasks1, task);
		task = ДобавитьОбъект(ДокXML, "task");
		ДобавитьПотомка(task, "code", "awf_td_93");
		ДобавитьПотомка(task, "name", "receiptcashorder");
		ДобавитьПотомка(task, "isLocked", 0);
		ДобавитьПотомка(task, "objecttype", "5264");
		ДобавитьПотомка(task, "objectcode", 93);
		ДобавитьПотомка(task, "priority", 2);
		ДобавитьНоду(tasks1, task);
		task = ДобавитьОбъект(ДокXML, "task");
		ДобавитьПотомка(task, "code", "awf_td_94");
		ДобавитьПотомка(task, "name", "expensecashorder");
		ДобавитьПотомка(task, "isLocked", 1);
		ДобавитьПотомка(task, "objecttype", "5264");
		ДобавитьПотомка(task, "objectcode", 94);
		ДобавитьПотомка(task, "priority", 5);
		ДобавитьНоду(tasks1, task);
		task = ДобавитьОбъект(ДокXML, "task");
		ДобавитьПотомка(task, "code", "awf_td_104");
		ДобавитьПотомка(task, "name", "movement");
		ДобавитьПотомка(task, "isLocked", 1);
		ДобавитьПотомка(task, "objecttype", "5264");
		ДобавитьПотомка(task, "objectcode", 104);
		ДобавитьПотомка(task, "priority", 6);
		ДобавитьНоду(tasks1, task);
		task = ДобавитьОбъект(ДокXML, "task");
		ДобавитьПотомка(task, "code", "awf_td_103");
		ДобавитьПотомка(task, "name", "skusRequest");
		ДобавитьПотомка(task, "isLocked", 1);
		ДобавитьПотомка(task, "objecttype", "5264");
		ДобавитьПотомка(task, "objectcode", 103);
		ДобавитьПотомка(task, "priority", 7);
		ДобавитьНоду(tasks1, task);
		task = ДобавитьОбъект(ДокXML, "task");
		ДобавитьПотомка(task, "code", "awf_td_101");
		ДобавитьПотомка(task, "name", "photoreport");
		ДобавитьПотомка(task, "isLocked", 1);
		ДобавитьПотомка(task, "objecttype", "5264");
		ДобавитьПотомка(task, "objectcode", 101);
		ДобавитьПотомка(task, "priority", 8);
		ДобавитьНоду(tasks1, task);
        task = ДобавитьОбъект(ДокXML, "task");
		ДобавитьПотомка(task, "code", "awf_td_97");
		ДобавитьПотомка(task, "name", "moneyRequest");
		ДобавитьПотомка(task, "isLocked", 1);
		ДобавитьПотомка(task, "objecttype", "5264");
		ДобавитьПотомка(task, "objectcode", 97);
		ДобавитьПотомка(task, "priority", 9);
		ДобавитьНоду(tasks1, task);
        task = ДобавитьОбъект(ДокXML, "task");
		ДобавитьПотомка(task, "code", "awf_td_106");
		ДобавитьПотомка(task, "name", "posm");
		ДобавитьПотомка(task, "isLocked", 1);
		ДобавитьПотомка(task, "objecttype", "5264");
		ДобавитьПотомка(task, "objectcode", 106);
		ДобавитьПотомка(task, "priority", 10);
		ДобавитьНоду(tasks1, task);
		task = ДобавитьОбъект(ДокXML, "task");
		ДобавитьПотомка(task, "code", "awf_td_107");
		ДобавитьПотомка(task, "name", "preorder_merchandise");
		ДобавитьПотомка(task, "isLocked", 1);
		ДобавитьПотомка(task, "objecttype", "5264");
		ДобавитьПотомка(task, "objectcode", 107);
		ДобавитьПотомка(task, "priority", 11);
		ДобавитьНоду(tasks1, task);
		ДобавитьНоду(AgentWorkflow, tasks1);
 	ДобавитьНоду(AgentWorkflows, AgentWorkflow);
	ДобавитьНоду(group, AgentWorkflows);
КонецФункции

Функция ПолучитьТипXMLБиблиотеки()
	Типы = Новый СписокЗначений();
	Типы.Добавить("MSXML2.DOMDocument.4.0");
	Типы.Добавить("MSXML2.DOMDocument");
	Для Каждого Тип Из Типы Цикл
		Попытка
			Тест = Новый COMОбъект(Тип);
		Исключение
			Продолжить;
		Конецпопытки;
		Возврат Тип;
	КонецЦикла;
КонецФункции
Процедура ВыгрузитьОбъекты(Признак, лИмяФайлаВыгрузки, Схема, ВидОбъекта)
	ДокXML = Новый COMОбъект("MSXML2.DOMDocument");
	group = xmlВыполнитьОперацию("СоздатьXML", ДокXML, лИмяФайлаВыгрузки, Схема, ВидОбъекта);
	Для н = 0 По ОбъектыВыгрузки.Количество() - 1 Цикл
		Стр = ОбъектыВыгрузки[н];
		Если Стр.ТипОбъектов <> Признак Тогда
			Продолжить;
		КонецЕсли;
		Если Стр.Включен = 0 Тогда
			Продолжить;
		КонецЕсли;
		лНазвание = Стр.Название;
		лXMLСекция = Стр.XMLСекция;
		мКолвоОбъектов = 0;
		СообщитьВЛог(МТ_Агент,"Выгрузка данных " + лНазвание ,лНазвание);
		Сообщить("Выгрузка данных " + лНазвание + "....");
		//Сообщить("Процедура - " +Стр.ПроцедураНазвание); 
		лПроцедура = Стр.ПроцедураНазвание;
		Выполнить(лПроцедура + "(group)");
		СообщитьВЛог(МТ_Агент,"Выгрузка данных " + лНазвание + " завершена. Выгружено " + мКолвоОбъектов + " элементов.",лНазвание);
		Сообщить("Выгрузка данных " + лНазвание + " завершена. Выгружено " + мКолвоОбъектов + " элементов.");
	КонецЦикла;
	xmlВыполнитьОперацию("СохранитьXML", ДокXML, лИмяФайлаВыгрузки, group);
КонецПроцедуры
Процедура ЗаписатьЗначенияОбъектовВыгрузки(XMLСекция, ПроцедураНазвание, Включен, ТипОбъектов, Название)
	Стр = ОбъектыВыгрузки.Добавить();
	Стр.Название = Название;
	Стр.Включен = Включен;
	Стр.ТипОбъектов = ТипОбъектов;
	Стр.XMLСекция = XMLСекция;
	Стр.ПроцедураНазвание = ПроцедураНазвание;
КонецПроцедуры
Процедура ПолучитьОбъектыВыгрузки()
	ОбъектыВыгрузки = Новый ТаблицаЗначений;
	ОбъектыВыгрузки.Колонки.Добавить("Название");
	ОбъектыВыгрузки.Колонки.Добавить("Включен");
	ОбъектыВыгрузки.Колонки.Добавить("ТипОбъектов");
	ОбъектыВыгрузки.Колонки.Добавить("XMLСекция");
	ОбъектыВыгрузки.Колонки.Добавить("ПроцедураНазвание");
	
	ЗаписатьЗначенияОбъектовВыгрузки("routes"			,"ВыгрузитьСпрМаршруты"					,1	,"С"	,"Маршруты");
	
	//ЗаписатьЗначенияОбъектовВыгрузки("messages"		,"ВыгрузитьСпрСообщения"					,1	,"С"	,"Сообщения");
	
	ЗаписатьЗначенияОбъектовВыгрузки("stores"			,"ВыгрузитьСпрСклады"					,1	,"С"	,"Склады");
	ЗаписатьЗначенияОбъектовВыгрузки("rests"			,"ВыгрузитьРегОстатки"					,1	,"Р"	,"Остатки");
	Если МТ_флагОбмена = 0 Тогда
		ЗаписатьЗначенияОбъектовВыгрузки("settings"			,"ВыгрузитьНастрОбщие"					,1	,"Н"	,"Настройки");
		ЗаписатьЗначенияОбъектовВыгрузки("employees"		,"ВыгрузитьСпрСотрудники"				,1	,"С"	,"Сотрудники");
		ЗаписатьЗначенияОбъектовВыгрузки("firms"			,"ВыгрузитьСпрФирмы"					,1	,"С"	,"Фирмы");
		ЗаписатьЗначенияОбъектовВыгрузки("buyers"			,"ВыгрузитьСпрПокупатели"				,1	,"С"	,"Контрагенты (Покупатели)");
		ЗаписатьЗначенияОбъектовВыгрузки("counteragents"	,"ВыгрузитьСпрФормальныеПокупатели"		,1	,"С"	,"Контрагенты (Формальные Покупатели)");
		ЗаписатьЗначенияОбъектовВыгрузки("buypoints"		,"ВыгрузитьСпрТорговыеТочки"			,1	,"С"	,"Торговые Точки");	
		ЗаписатьЗначенияОбъектовВыгрузки("paytypes"			,"ВыгрузитьСпрТипыОплаты"				,1	,"С"	,"Типы Оплат");
		ЗаписатьЗначенияОбъектовВыгрузки("pricetypes"		,"ВыгрузитьСпрТипыЦен"					,1	,"С"	,"Типы цен");
		ЗаписатьЗначенияОбъектовВыгрузки("currencies"		,"ВыгрузитьСпрВалюты"					,1	,"С"	,"Валюты");
		ЗаписатьЗначенияОбъектовВыгрузки("messages"			,"ВыгрузитьСпрСообщения"				,1	,"С"	,"Сообщения");
		ЗаписатьЗначенияОбъектовВыгрузки("units"			,"ВыгрузитьСпрЕдИзм"					,1	,"С"	,"Единицы Измерения");
		ЗаписатьЗначенияОбъектовВыгрузки("SKUgroups"		,"ВыгрузитьСпрГруппыТоваров"			,1	,"С"	,"Группы Товаров");
		ЗаписатьЗначенияОбъектовВыгрузки("SKUs"				,"ВыгрузитьСпрТовары"					,1	,"С"	,"Товары");
		ЗаписатьЗначенияОбъектовВыгрузки("prices"			,"ВыгрузитьРегЦены"						,1	,"Р"	,"Цены");
		ЗаписатьЗначенияОбъектовВыгрузки("invoices"			,"ВыгрузитьДокОтгрузкиТовара"			,1	,"Д"	,"Отгрузка товара");
		ЗаписатьЗначенияОбъектовВыгрузки("agreements"		,"ВыгрузитьСпрДоговора"					,1	,"С"	,"Договора");
		ЗаписатьЗначенияОбъектовВыгрузки("photoobjects"		,"ВыгрузитьСпрФотоОтчет"				,1	,"С"	,"ФотоОтчет");

			//	

	//	ЗаписатьЗначенияОбъектовВыгрузки("AgentWorkflows"	,"ВыгрузитьСценарииБлокировки"			,1	,"С"	,"Сценарии блокировки");
		ЗаписатьЗначенияОбъектовВыгрузки("classifiers"		,"ВыгрузитьКлассификаторы"				,1	,"С"	,"Классификаторы");
		ЗаписатьЗначенияОбъектовВыгрузки("classifiertypes"	,"ВыгрузитьНастрКлассификаторы"			,1	,"Н"	,"Имена классификаторов");
		ЗаписатьЗначенияОбъектовВыгрузки("zones"			,"ВыгрузитьЗоныФильтров"				,1	,"С"	,"Зоны");	
		ЗаписатьЗначенияОбъектовВыгрузки("filters"			,"ВыгрузитьФильтры"						,1	,"С"	,"Фильтры");
		ЗаписатьЗначенияОбъектовВыгрузки("attributes"		,"ВыгрузитьСпрАттрибуты"				,1	,"С"	,"Дополнительные аттрибуты");
		//ЗаписатьЗначенияОбъектовВыгрузки("discountlists"	,"ВыгрузитьРегСкидки"					,1	,"Р"	,"Скидки");
		ЗаписатьЗначенияОбъектовВыгрузки("debts"			,"ВыгрузитьРегЗадолженности"			,1	,"Р"	,"Задолженности");
	//	//
	КонецЕсли;
	Если МТ_флагОбмена = 1 Тогда
		//ЗаписатьЗначенияОбъектовВыгрузки("preorders"			,"ВыгрузитьДокЗаказыТовара"			,1	,"Д"	,"Заказы товара");
		ЗаписатьЗначенияОбъектовВыгрузки("status"		,"ВыгрузитьДокСтатусы"					,1	,"Д"	,"Выгрузка док статусов");
	КонецЕсли;
КонецПроцедуры

Функция СообщитьВЛог(Агент,Меседж,Каталог)Экспорт 
	Запись = Справочники.СообщенияОтладки.СоздатьЭлемент();
	Запись.Период = ТекущаяДата();
	Запись.Агент  = Агент.Ссылка;
	Запись.ПапкаДаты = Каталог;
	Запись.Текст1 = Меседж;
	Запись.Записать();	
КонецФункции


Процедура Выгрузить(МТ_ПутьКФайлам,СписокМаршрутов,МТ_ФлагОбмена) Экспорт 
	Для каждого ТекМаршрут из СписокМаршрутов Цикл
		
		СозданиеСписков();
		Маршрут = ТекМаршрут;
		МТ_Код = Число(Маршрут.Код);
		МТ_Агент = Маршрут.Ссылка;
		ПолучитьСписокАгентов();
		МТ_ТипАгента = 0;
		МТ_ГлубинаОтгрузок = 90;
		Если Прав(МТ_ПутьКФайлам, 1) <> "\" Тогда
			МТ_ПутьКФайлам = МТ_ПутьКФайлам + "\";
		КонецЕсли;
		ПолучитьОбъектыВыгрузки();
		мКаталогАгента = МТ_ПутьКФайлам + МТ_Код + "\";
		мКаталогФотоАгента = мКаталогАгента + "photo\";
		СоздатьНесуществующиеПодкаталоги(мКаталогФотоАгента);
		НазваниеРеплики = "data" + Формат(ТекущаяДата(), "ДФ=yyyyMMddHHmmss");
		НазваниеРеплики = СтрЗаменить(НазваниеРеплики, ".", "");
		НазваниеРеплики = СтрЗаменить(НазваниеРеплики, ":", "");
		мКаталогРепликиАгента = мКаталогАгента + "ToMT\" + НазваниеРеплики + "\";
		СоздатьНесуществующиеПодкаталоги(мКаталогРепликиАгента);
		ВыгрузитьОбъекты("С", "references.xml", "references", "Справочники");
		ВыгрузитьОбъекты("Р", "registers.xml", "registers", "Регистры");
		ВыгрузитьОбъекты("Н", "settings.xml", "settings", "Настройки");
		ВыгрузитьОбъекты("Д", "documents.xml", "documents", "Документы");
		
		xmlВыполнитьОперацию("ЗаписатьLog", ДокXML, НазваниеРеплики, "filelog.xml");
		СообщитьВЛог(МТ_Агент,"Выгрузка данных для агента " + МТ_Агент + "(Код: " + МТ_Код + "), завершена.",мКаталогРепликиАгента);
		Сообщить("Выгрузка данных для агента " + МТ_Агент + "(Код: " + МТ_Код + "), завершена.");
	КонецЦикла;
КонецПроцедуры
Процедура ВыполнитьМодуль(СписокМаршрутов,МТ_Флаг)Экспорт
	//*********************************************************
	СообщитьВЛог(СписокМаршрутов[0],"Початор роботи обробки 'Upload' - " + ТекущаяДата(),"0 -  Флаг");
	ЗаписьЖурналаРегистрации("Початок роботи обробки 'Upload' - " + ТекущаяДата(), УровеньЖурналаРегистрации.Информация);
	Сообщить("Початор роботи обробки 'Upload' - " + ТекущаяДата());
	//*********************************************************
	МТ_ФлагОбмена = МТ_Флаг;
	ДатаФорм=ТекущаяДата();
	МТ_Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
	МТ_ТипЦен = Константы.МТ_ОсновнойТипЦен.Получить();
	МТ_ПутьКФайлам = СокрЛП(Константы.МТ_ПутьКФайлам.Получить());
	МТ_Фирма = Константы.МТ_Фирма.Получить();
	//МТ_ЦветаФильтров = ТаблицаЦветов();
	Если НЕ(ЗначениеЗаполнено(МТ_Валюта)) Тогда
		Сообщить("Не задана константа МТ_Валюта.");
		Возврат;
    КонецЕсли;
	Если ПустаяСтрока(Константы.МТ_ПутьКФайлам.Получить()) Тогда
		Сообщить("Не задана папка для обмена файлами с КПК!
		|Заполните в Константах параметр 'Путь к файлам КПК'
		|Или нажмите на обработке кнопку Изменить путь.");
		Возврат;
	КонецЕсли;
	Выгрузить(МТ_ПутьКФайлам,СписокМаршрутов,МТ_ФлагОбмена);
	//*********************************************************
	ЗаписьЖурналаРегистрации("Кінець роботи обробки 'Upload' - " + ТекущаяДата(), УровеньЖурналаРегистрации.Информация);
	Сообщить("Кінець роботи обробки 'Upload' - " + ТекущаяДата());
	//*********************************************************
КонецПроцедуры
Процедура СозданиеСписков()
	МТ_ТТСписок = Новый СписокЗначений;
	МТ_Контрагенты = Новый СписокЗначений;
	МТ_Договора = Новый СписокЗначений;
	МТ_ТипыЦен = Новый СписокЗначений;
	МТ_Склады = Новый СписокЗначений;
	МТ_Акции = Новый ТаблицаЗначений;
	//МТ_Сообщения = Новый ТаблицаЗначений;
	МТ_СпецТипыЦен = Новый СписокЗначений;
	МТ_СпецТоварыТаб = Новый ТаблицаЗначений;
	МТ_СпецТоварыТаб.Колонки.Добавить("ИД");
	МТ_СпецТоварыТаб.Колонки.Добавить("Товар");
	МТ_СпецТоварыТаб.Колонки.Добавить("ТипЦен");
	МТ_СпецТоварыТаб.Колонки.Добавить("ВидСкидки");
КонецПроцедуры;	
	МТ_ДниНедели = Новый СписокЗначений;
	МТ_ДниНедели.Добавить("Понедельник");
	МТ_ДниНедели.Добавить("Вторник");
	МТ_ДниНедели.Добавить("Среда");
	МТ_ДниНедели.Добавить("Четверг");
	МТ_ДниНедели.Добавить("Пятница");
	МТ_ДниНедели.Добавить("Суббота");
	МТ_ДниНедели.Добавить("Воскресенье");
