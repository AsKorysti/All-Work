Перем МТ_Фирма,МТ_Склад,МТ_СкладВозврат,МТ_СкладАгента,МТ_Валюта,МТ_ЕдиницаИзмеренияБазовая,МТ_ОсновнойТипЦен,МТ_ГлубинаОтгрузок,МТ_ОчередьСообщений,МТ_ПутьКФото Экспорт;
Перем МТ_Маршрут, МТ_Агент, МТ_Код Экспорт;
Перем ДокXML, ОбъектыЗагрузки, мАгент, мСклад, мНаименованиеМаршрута, мКолвоОбъектов, мКаталогДанных, папкаДляФоток, мПутьКФото,лПолноеИмяКаталогаСессии Экспорт;
Перем КолЗаказ, КолПКО,мОснСклад, СуммаПКО, СуммаЗаказов, СуммаДок Экспорт;
Процедура МТСообщить(Сообщение)
	МТ_СистемаКС.Лог(Сообщение, "Загрузка");
КонецПроцедуры
Процедура XMLДобавитьПотомка(pParent, пНазвание, пЗначение)
	
	child		= ДокXML.CreateElement(пНазвание);
	child.text	= пЗначение;
	pParent.AppendChild(child);
	
КонецПроцедуры	//XMLДобавитьПотомка()
Процедура ДобавитьПотомка(pParent, пНазвание, пЗначение)
	
	Попытка
		XMLДобавитьПотомка(pParent, пНазвание, пЗначение);
	Исключение
		Сообщить("ОШИБКА: " + пНазвание + " - " + пЗначение);
	КонецПопытки;
	
КонецПроцедуры	//ДобавитьПотомка()
Процедура ДобавитьНоду(pParent, pChild)
	
	Если pChild.childNodes().length() > 0 Тогда
		pParent.AppendChild(pChild);
	КонецЕсли;
	
КонецПроцедуры	//ДобавитьНоду()
Функция XMLВыполнитьОперацию(пТипОперации, пДокXML, пПараметр1 = "", пПараметр2 = "", пПараметр3 = "")
	
	Если пТипОперации = "СоздатьXML" Тогда
		
		пДокXML	= Новый COMОбъект("MSXML2.DOMDocument");
		node = пДокXML.CreateProcessingInstruction("xml", "version='1.0' encoding='utf-8'");
		пДокXML.preserveWhiteSpace = 1;
		пДокXML.AppendChild(node);
		
		group = пДокXML.CreateElement(пПараметр2);
		
		Возврат group;
		
	ИначеЕсли пТипОперации = "СохранитьXML" Тогда
		
		лПолноеИмяФайлаВыгрузки	= пПараметр1;
		group					= пПараметр2;
		
		Если group.childNodes().length() = 0 Тогда
			Возврат 0;
		КонецЕсли;
		
		пДокXML.AppendChild(group);
		
		Если СоздатьНесуществующиеПодкаталоги(лПолноеИмяФайлаВыгрузки) = 0 Тогда
			Сообщить("Не удалось сохранить файл " + лПолноеИмяФайлаВыгрузки);
			Возврат 0;
		КонецЕсли;
		
		пДокXML.Save(лПолноеИмяФайлаВыгрузки);
		
		Возврат 1;
		
	ИначеЕсли пТипОперации = "ЗаписатьLog" Тогда
		
		лКаталогЛога	= пПараметр1;
		лИмяСессии		= пПараметр2;
		
		лПолноеИмяФайлаЛога	= лКаталогЛога + "filelog.xml";
		лФайл	= Новый Файл(лПолноеИмяФайлаЛога);
		Если лФайл.Существует() Тогда
			пДокXML.Load(лПолноеИмяФайлаЛога);
		Иначе
			пДокXML	= Новый COMОбъект("MSXML2.DOMDocument");
			node = пДокXML.CreateProcessingInstruction("xml", "version='1.0' encoding='utf-8'");
			пДокXML.preserveWhiteSpace = 1;
			пДокXML.AppendChild(node);
		КонецЕсли;
		
		Попытка
			group	= пДокXML.selectSingleNode("fileslog");
			Если group = Неопределено Тогда
				group = пДокXML.CreateElement("fileslog");
				пДокXML.AppendChild(group);
			КонецЕсли;
		Исключение
			group = пДокXML.CreateElement("fileslog");
			пДокXML.AppendChild(group);
		КонецПопытки;
		
		Попытка
			ToMT = group.selectSingleNode("ToMT");
			Если ToMT = Неопределено Тогда
				ToMT = пДокXML.CreateElement("ToMT");
				group.AppendChild(ToMT);
			КонецЕсли;
		Исключение
			ToMT = пДокXML.CreateElement("ToMT");
			group.AppendChild(ToMT);
		КонецПопытки;
		
		Попытка
			FromMT = group.selectSingleNode("FromMT");
			Если FromMT = Неопределено Тогда
				FromMT = пДокXML.CreateElement("FromMT");
				group.AppendChild(FromMT);
			КонецЕсли;
		Исключение
			FromMT = пДокXML.CreateElement("FromMT");
			group.AppendChild(FromMT);
		КонецПопытки;
		
		Node = пДокXML.CreateElement(лИмяСессии);
		Node.SetAttribute("completed", "false");
		Если пПараметр3 = "full_send" Тогда
			Node.SetAttribute("type", "full");
		КонецЕсли;
		ToMT.AppendChild(Node);
		
		Попытка
			пДокXML.Save(лПолноеИмяФайлаЛога);
		Исключение
			Сообщить("Не удалось записать filelog.xml: " + ОписаниеОшибки());
		КонецПопытки;
		Возврат 1;
		
		
		ИначеЕсли пТипОперации = "ПометитьПрочтеннымLog" Тогда
		
		лКаталогЛога	= пПараметр1;
		лИмяСессии		= пПараметр2;
		
		лПолноеИмяФайлаЛога	= лКаталогЛога + "filelog.xml";
		лФайл	= Новый Файл(лПолноеИмяФайлаЛога);
		Если лФайл.Существует() Тогда
			пДокXML.Load(лПолноеИмяФайлаЛога);
		Иначе
			пДокXML	= Новый COMОбъект("MSXML2.DOMDocument");
			node = пДокXML.CreateProcessingInstruction("xml", "version='1.0' encoding='utf-8'");
			пДокXML.preserveWhiteSpace = 1;
			пДокXML.AppendChild(node);
		КонецЕсли;
		
		Попытка
			//group	= пДокXML.selectSingleNode("filelog");
			group	= пДокXML.selectSingleNode("fileslog");
			
			Если group = Неопределено Тогда
				group = пДокXML.CreateElement("fileslog");
				пДокXML.AppendChild(group);
			КонецЕсли;
		Исключение
			group = пДокXML.CreateElement("fileslog");
			пДокXML.AppendChild(group);
		КонецПопытки;
		
		Попытка
			ToMT = group.selectSingleNode("ToMT");
			Если ToMT = Неопределено Тогда
				ToMT = пДокXML.CreateElement("ToMT");
				group.AppendChild(ToMT);
			КонецЕсли;
		Исключение
			ToMT = пДокXML.CreateElement("ToMT");
			group.AppendChild(ToMT);
		КонецПопытки;
		
		Попытка
			FromMT = group.selectSingleNode("FromMT");
			Если FromMT = Неопределено Тогда
				FromMT = пДокXML.CreateElement("FromMT");
				group.AppendChild(FromMT);
			КонецЕсли;
		Исключение
			FromMT = пДокXML.CreateElement("FromMT");
			group.AppendChild(FromMT);
		КонецПопытки;
		
		лЧислоПрочтений	= 0;
		Попытка
			NotComletedSessions	= ToMT.selectNodes("*[@completed='false']");
			лЧислоПрочтений		= NotComletedSessions.Length();
		Исключение
		КонецПопытки;
		
		Для р = 0 По лЧислоПрочтений - 1 Цикл
			NotCompletedSession	= NotComletedSessions.Item(р);
			NotCompletedSession.SetAttribute("completed","true");
		КонецЦикла;
		
		пДокXML.Save(лПолноеИмяФайлаЛога);
		Возврат 1;
	КонецЕсли;
	
КонецФункции	//XMLВыполнитьОперацию()
Функция XMLВернутьДату(пДата = "", пОбратныйФормат = 0) Экспорт
	
	Если пДата = "" Тогда
		пДата	= ТекущаяДата();
	КонецЕсли;
	
	Если пОбратныйФормат = 1 Тогда
		лДата	= Формат(пДата, "ДФ=""гггг.ММ.дд""");
	Иначе
		лДата	= Формат(пДата, "ДФ=""дд.ММ.гггг""");
	КонецЕсли;
	
	Возврат лДата;
	
КонецФункции	//XMLВернутьДату()
Функция XMLВернутьВремя(пДата = "") Экспорт
	
	Если пДата = "" Тогда
		пДата	= ТекущаяДата();
	КонецЕсли;
	
	лЧас	= Строка(Час(пДата));
	лМин	= Строка(Минута(пДата));
	лСек	= Строка(Секунда(пДата));
	
	лЧас	= ?(СтрДлина(лЧас) = 2, лЧас, "0" + лЧас);
	лМин	= ?(СтрДлина(лМин) = 2, лМин, "0" + лМин);
	лСек	= ?(СтрДлина(лСек) = 2, лСек, "0" + лСек);
	
	лВремя	= лЧас + ":" + лМин + ":" + лСек;
	
	Возврат лВремя;
	
КонецФункции	//XMLВернутьВремя()
Функция XMLПолучитьДату(лВходнойПараметр) Экспорт
	
	лСтрДата	= "";
	лПозиция	= Найти(лВходнойПараметр, ".");
	Пока лПозиция > 0 Цикл
		лСтрДата	= Лев(лВходнойПараметр, лПозиция - 1) + ?(лСтрДата = "", "", "-") + лСтрДата;
		лВходнойПараметр	= Сред(лВходнойПараметр, лПозиция + 1);
		лПозиция	= Найти(лВходнойПараметр, ".");
	КонецЦикла;
	лСтрДата	= лВходнойПараметр + ?(лСтрДата = "", "", "-") + лСтрДата;
	
	Возврат лСтрДата;
	
КонецФункции	//XMLПолучитьДату()
Функция ПолучитьСтруктуруВГрадусах(пЗначение)
	лСтруктура	= Новый Структура();
	лСтруктура.Вставить("Градусы"	, Цел(пЗначение / 100));
	лСтруктура.Вставить("Минуты"	, Цел(пЗначение % 100));
	лСтруктура.Вставить("Секунды"	,(пЗначение - Цел(пЗначение))*60);
	Возврат лСтруктура;
КонецФункции
Функция ПривестиКФорматуКоординат(пЗначение)
	лСтруктура	= ПолучитьСтруктуруВГрадусах(пЗначение);
	лЗначение	= лСтруктура.Градусы + лСтруктура.Минуты/60 + лСтруктура.Секунды/3600;
	Возврат Формат(лЗначение, "ЧДЦ=12; ЧРД=.; ЧГ=0");
КонецФункции
Функция ПолучитьДатуИзСтроки(пВходнойПараметр, пБезВремени = Ложь) Экспорт
	
	лДата	= "";
	
	лНачалоВремени	= Найти(пВходнойПараметр, ":") - 2;
	лСтрГод	= Сред(пВходнойПараметр, 1, 4); Если СтрДлина(лСтрГод) = 2 Тогда лСтрГод	= "20" + лСтрГод; КонецЕсли;
	лСтрМес	= Сред(пВходнойПараметр, 6, 2); Если СтрДлина(лСтрМес) = 1 Тогда лСтрМес	= "0" + лСтрМес; КонецЕсли;
	лСтрДен	= Сред(пВходнойПараметр, 9, 2); Если СтрДлина(лСтрДен) = 1 Тогда лСтрДен	= "0" + лСтрДен; КонецЕсли;
	
	Если пБезВремени Тогда
		лНачалоВремени	= 0;
	КонецЕсли;
	
	лСтрЧас	= Сред(пВходнойПараметр, 12, 2); Если СтрДлина(лСтрЧас) = 1 Тогда лСтрЧас	= "0" + лСтрЧас; КонецЕсли;
	лСтрМин	= Сред(пВходнойПараметр, 15, 2); Если СтрДлина(лСтрМин) = 1 Тогда лСтрМин	= "0" + лСтрМин; КонецЕсли;
	лСтрСек	= Сред(пВходнойПараметр, 18, 2); Если СтрДлина(лСтрСек) = 1 Тогда лСтрСек	= "0" + лСтрСек; КонецЕсли;
	
	лСтрЧас	= "0";	лСтрМин	= "0";	лСтрСек	= "0";
	Если лНачалоВремени > 10 Тогда
		лСтрЧас	= СокрЛП(Сред(пВходнойПараметр, лНачалоВремени, 2));
		Если СтрДлина(лСтрЧас) = 1 Тогда лСтрЧас	= "0" + лСтрЧас; КонецЕсли;
		
		лСтрМин	= СокрЛП(Сред(пВходнойПараметр, лНачалоВремени + 3, 2));
		Если СтрДлина(лСтрМин) = 1 Тогда лСтрМин	= "0" + лСтрМин; КонецЕсли;
		
		лСтрСек	= СокрЛП(Сред(пВходнойПараметр, лНачалоВремени + 6, 2));
		Если СтрДлина(лСтрСек) = 1 Тогда лСтрСек	= "0" + лСтрСек; КонецЕсли;
	КонецЕсли;
	Попытка
		лДата	= Дата(лСтрГод, лСтрМес, лСтрДен, лСтрЧас, лСтрМин, лСтрСек);
	Исключение
		Сообщить("Дата из строки """ + пВходнойПараметр + """ не определилась, была установлена текущая дата!");
		лДата	= ТекущаяДата();
	КонецПопытки;
	
	Возврат лДата;
	
КонецФункции
Функция ПолучитьРеквизит(section, пИмяРеквизита) Экспорт
	
	Попытка
		лРезультат	= section.SelectSingleNode(пИмяРеквизита).text;
		Если СокрЛП(Нрег(лРезультат)) = "true" Тогда
			лРезультат	= Истина;
		ИначеЕсли СокрЛП(Нрег(лРезультат)) = "false" Тогда
			лРезультат	= Ложь;
		КонецЕсли;
	Исключение
		лРезультат	= "";
	КонецПопытки;
	
	Возврат лРезультат;
	
КонецФункции	//ПолучитьРеквизит()
Функция ПолучитьРеквизитЧислом(section, пИмяРеквизита) Экспорт
	
	лЧисло	= ПолучитьРеквизит(section, пИмяРеквизита);
	лРезультат	= Число(СтрЗаменить(лЧисло, ",", "."));
	
	Возврат лРезультат;
	
КонецФункции	//ПолучитьРеквизитЧислом()
Функция ПолучитьРеквизитБулевый(section, пИмяРеквизита)
	
	лЗначение	= ПолучитьРеквизит(section, пИмяРеквизита);
	лРезультат	= ?(лЗначение = 1, Истина, Ложь);
	лРезультат	= ?(НРег(лЗначение) = "true", Истина, ?(НРег(лЗначение) = "false", Ложь, лРезультат));
	
	Возврат лРезультат;
	
КонецФункции	//ПолучитьРеквизитБулевый()
Функция СоздатьНесуществующиеПодкаталоги(пПутьКФайлу)
	лПутьКФайлу = пПутьКФайлу;
	лСЗПодкаталоги = Новый СписокЗначений;
	лЭтоФайл = 1;
	лФайл = Новый Файл(лПутьКФайлу);
	Пока лФайл.Существует() = 0 Цикл
		Если лЭтоФайл = 1 Тогда
			лЭтоФайл = 0;
		Иначе
			лСЗПодкаталоги.Добавить(лПутьКФайлу);
		КонецЕсли;
		р = СтрДлина(лПутьКФайлу);
		Пока р > 1 Цикл
			Если Сред(лПутьКФайлу, р, 1) <> "\" Тогда
				р = р - 1;
				Продолжить;
			КонецЕсли;
			лПутьКФайлу = Лев(лПутьКФайлу, р - 1);
			Прервать;			
		КонецЦикла;
		Если СтрДлина(лПутьКФайлу) <= 1 Тогда
			Прервать;
		КонецЕсли;
		лФайл = Новый Файл(лПутьКФайлу);		
	КонецЦикла;
	р = лСЗПодкаталоги.Количество();
	Пока р > 0 Цикл
		Попытка
			СоздатьКаталог(лСЗПодкаталоги.Получить(р - 1));
		Исключение
			Возврат 1;
		КонецПопытки;
		р = р - 1;		
	КонецЦикла;
	Возврат 1;
КонецФункции
Функция ПереводКоординат(Координата)Экспорт
	
	лГрад = Цел(Число(Координата)/ 100);
	лВрем = Число(Координата) - лГрад * 100;
	лМин = Цел(лВрем); 
	лСек = (лВрем-лМин)*60;
	
	Градусы=лГрад;
	Минуты=лМин/60;
	Сек=лСек/3600;
	Итог=Градусы+Минуты+Сек;
	Возврат СтрЗаменить(Лев(СокрЛП(Итог),9),",",".");
КонецФункции
Функция ПолучитьДанныеАгента(ТорговыйАгент)Экспорт
	ЗначенияПоУмолчанию = Новый Соответствие;
	НастройкиАгента = Новый ТаблицаЗначений;
	Запрос = Новый Запрос;
	Запрос.Текст="	ВЫБРАТЬ
					|	Настройки.Родитель,
					|	Настройки.Ссылка,
					|	Настройки.Наименование КАК Наименование,
					|	Настройки.ЭтоГруппа КАК ЭтоГруппа,
					|	ЗначениеНастроек.Значение
					|ИЗ
					|	ПланВидовХарактеристик.НастройкиОбменаДляТорговыхАгентовМаршрутов КАК Настройки
					|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОбменаДляТорговыхАгентовМаршрутов КАК ЗначениеНастроек
					|		ПО (ЗначениеНастроек.Настройка = Настройки.Ссылка)
					|			И (ЗначениеНастроек.ТорговыйАгентМаршрут = &ТорговыйАгентМаршрут)
					|ГДЕ
					|	(НЕ Настройки.ПометкаУдаления)
					|	И (НЕ Настройки.Этогруппа)
					|УПОРЯДОЧИТЬ ПО
					|	ЭтоГруппа ИЕРАРХИЯ,
					|	Наименование";
	Запрос.УстановитьПараметр("ТорговыйАгентМаршрут",	ТорговыйАгент);
	Выборка = Запрос.Выполнить();
	Возврат Выборка.Выгрузить();
КонецФункции
Процедура ДобавитьВОчередь(кодАгента)
	МТ_Агент = Справочники.МТ_Маршруты.НайтиПоКоду(кодАгента);
	НоваяСтрока = ТаблицаМаршрутов.Добавить();
	НоваяСтрока.Агент = МТ_Агент.Ссылка;
	НоваяСтрока.ФизЛицо = МТ_Агент.Агент.Ссылка;
	НоваяСтрока.КПККод = кодАгента;
КонецПроцедуры
Функция ПроверкаДокумента(лИдентДок,лИдентДокПервый, лДатаСоздания, тТипДок,тРеквизит)
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	            |	Документ.Дата,
	            |	Документ.Ссылка
	            |ИЗ
	            |	Документ."+ тТипДок + " КАК Документ
	            |ГДЕ
	            |	Документ."+тРеквизит+ " МЕЖДУ &Дата1 И &Дата2
				|	И Документ.ПометкаУдаления 	= ЛОЖЬ
				|	И Документ.МТ_Агент 		= &МТ_Агент
				|	И Документ.МТ_КодВнешнийПервый = &МТ_КодВнешнийПервый";
	Запрос.УстановитьПараметр("Дата1",НачалоДня(лДатаСоздания)-2*86400);
	Запрос.УстановитьПараметр("Дата2",КонецДня(лДатаСоздания)+2*86400);
	Запрос.УстановитьПараметр("МТ_КодВнешнийПервый",лИдентДокПервый);
	Запрос.УстановитьПараметр("МТ_Агент",МТ_Агент.Ссылка);
    Результат=Запрос.Выполнить().Выбрать();  
	Если Результат.Следующий() Тогда
		Если СокрЛП(Результат.Ссылка.МТ_КодВнешний) = СокрЛП(лИдентДок) Тогда
			Сообщить("Документ " + тТипДок + " за " + лДатаСоздания + " существует и актуален: " + Результат.Ссылка.Номер);
			//Возврат Результат.Ссылка;
			Возврат 1;
		Иначе
			Сообщить("Документ " + тТипДок + " за " + лДатаСоздания + " требует изменений: " + Результат.Ссылка.Номер);			
			Возврат Результат.Ссылка;
		КонецЕсли;
	Иначе
		
		Возврат 0;
	КонецЕсли;
КонецФункции
Функция ПолучитьСкидкиТТ(Соглашение)
	Запрос =Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДействиеСкидокНаценокСрезПоследних.Источник КАК Соглашение,
	|	ДействиеСкидокНаценокСрезПоследних.СкидкаНаценка,
	|	ДействиеСкидокНаценокСрезПоследних.СкидкаНаценка.СпособПредоставления,
	|	ДействиеСкидокНаценокСрезПоследних.СкидкаНаценка.ЗначениеСкидкиНаценки КАК ЗначениеСкидки
	|ИЗ
	|	РегистрСведений.ДействиеСкидокНаценок.СрезПоследних КАК ДействиеСкидокНаценокСрезПоследних
	|ГДЕ 
	|	ДействиеСкидокНаценокСрезПоследних.Источник = &МТ_Соглашения
	|	И ДействиеСкидокНаценокСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДействияСкидок.Действует)";
	Запрос.УстановитьПараметр("МТ_Соглашения", Соглашение);
	Возврат Запрос.Выполнить().Выгрузить(); 
КонецФункции
Функция ПолучитьОбъектПоКоду(КодОбъекта,ТипОбъекта)
	Возврат ?(Метаданные.Справочники[ТипОбъекта].ДлинаКода = 0,Справочники[ТипОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(КодОбъекта)),Справочники[ТипОбъекта].НайтиПоКоду(КодОбъекта));
КонецФункции
Функция ПолучитьПоследнийДок(лДатаСоздания,тТипДок)
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
	            |	Документ.Дата,
	            |	Документ.Ссылка
	            |ИЗ
	            |	Документ."+ тТипДок + " КАК Документ
	            |ГДЕ
	            |	Документ.Дата МЕЖДУ &Дата1 И &Дата2
				|	И Документ.ПометкаУдаления 	= ЛОЖЬ
				|УПОРЯДОЧИТЬ ПО
				|	Документ.Дата УБЫВ";
	Запрос.УстановитьПараметр("Дата1",НачалоДня(лДатаСоздания));
	Запрос.УстановитьПараметр("Дата2",КонецДня(лДатаСоздания));
	Результат=Запрос.Выполнить().Выбрать();  
	Если Результат.Следующий() Тогда
		Возврат Результат.Дата+1;	
	Иначе
		Возврат НачалоДня(ТекущаяДата()+86400);
	КонецЕсли;	
КонецФункции
Функция ПолучитьМаршрутАгента(Контрагент)
	Запрос=Новый Запрос;
	Запрос.Текст=
		"
		| ВЫБРАТЬ
		|  Маршрут.Ссылка КАК Маршрут
		| ИЗ
		|  Справочник.МТ_Маршруты КАК Маршрут
		| ГДЕ
		|  Маршрут.Контрагенты.Контрагент=&Контрагент
		| И
		|  Маршрут.Владелец = &МТ_Агент 
		|";
		Запрос.УстановитьПараметр("Контрагент",Контрагент.Ссылка);
		Запрос.УстановитьПараметр("МТ_Агент",МТ_Агент.Ссылка);
		РезЗапроса=Запрос.Выполнить();
		ВыборкаЗапроса=РезЗапроса.Выбрать();
		Пока ВыборкаЗапроса.Следующий() Цикл
			МТ_Маршрут=ВыборкаЗапроса.Маршрут;
		КонецЦикла;
	Возврат МТ_Маршрут;	
КонецФункции
Функция ЗагрузитьДокЗаказыПокупателя(group)
	Попытка
		preorders	= group.selectSingleNode("preorders").childNodes();
	Исключение
		Возврат 0;
	КонецПопытки;
	Для р = 0 По preorders.Length() - 1 Цикл
		preorder	= preorders.Item(р);
		лКодВнешний			= СокрЛП(ПолучитьРеквизит(preorder, "innercode"));
		лКодВнешнийПервый	= ПолучитьРеквизит(preorder, "innercodefirstversion");
		лКодВнутренний		= ПолучитьРеквизит(preorder, "outercode");
		Если лКодВнешний = "0" 			Тогда лКодВнешний	= "" КонецЕсли;
		Если лКодВнешнийПервый = "0"	Тогда лКодВнешнийПервый	= "" КонецЕсли;
		лНадоУдалить		= ПолучитьРеквизитБулевый(preorder, "deleted");
		лДатаСоздания 		= ПолучитьДатуИзСтроки(ПолучитьРеквизит(preorder, "date"));
		лДатаДоставки		= ПолучитьДатуИзСтроки(ПолучитьРеквизит(preorder, "deliverydate"));
		лСтатус   			= ПолучитьРеквизит(preorder, "statecode");
		лКоммент   			= ПолучитьРеквизит(preorder, "comment");
		тТипДок = "ЗаказПокупателя";
		Если (лКодВнешний = "") ИЛИ лНадоУдалить = Истина Тогда 
			Продолжить;
		КонецЕсли;
		//тРеквизит = "Дата";
		//лПроверка = ПроверкаДокумента( лКодВнешний, лКодВнешнийПервый, лДатаСоздания, тТипДок, тРеквизит);
		ПолучитьДатуИзСтроки(ПолучитьРеквизит(preorder, "date"));
		лДок = Документы[тТипДок].ПустаяСсылка();
		лПроверка=0;
		Если лПроверка = 1 Тогда
			
			
			Продолжить;
		ИначеЕсли лПроверка = 0 Тогда 
			Сообщить("Документ " + тТипДок + " за " + лДатаСоздания + " будет сформирован");			
			СообщитьВЛог(МТ_Агент,"Документ  " + тТипДок + " за " + лДатаСоздания + " будет сформирован","Download_"+лПолноеИмяКаталогаСессии);
			лДок = Документы[тТипДок].СоздатьДокумент();
		Иначе
			лДок = лПроверка.ПолучитьОбъект();
		КонецЕсли;
		Сообщить("Формируется документ ЗаказПокупателя " + лДок.Номер);
		Отбор = Новый Структура("Агент",мАгент);
		лДок.Дата = лДатаСоздания;
		лДок.ДатаОтгрузки = лДатаДоставки;
		лДок.к_Менеджер = Справочники.СотрудникиОрганизаций.НайтиПоРеквизиту("Физлицо",МТ_Агент.Ссылка);
		лДок.МТ_КодВнешний = лКодВнешний;
		лДок.МТ_КодВнешнийПервый = лКодВнешнийПервый;
		лДок.Организация = Константы.МТ_Фирма.Получить();
		//ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(лДок, глЗначениеПеременной("глТекущийПользователь"), МТ_Валюта, "Продажа");	
		мСтруктураПараметровДляПолученияДоговора = ЗаполнениеДокументов.ПолучитьСтруктуруПараметровДляПолученияДоговораЗаказаПокупателя();
		КодТТ = Сред(СокрЛП(Строка(ПолучитьРеквизит(preorder, "buypointcode"))),10);
		лДок.к_ТТ = ПолучитьОбъектПоКоду(КодТТ,"Контрагенты");
		КодКонтрагента = Сред(СокрЛП(Строка(ПолучитьРеквизит(preorder, "buyercode"))),7);
		лДок.Контрагент = ПолучитьОбъектПоКоду(КодКонтрагента,"Контрагенты");
		//Сред(СокрЛП(ПолучитьРеквизит(preorder, "pricetypecode")),11)
		//лДоговор = Сред(СокрЛП(ПолучитьРеквизит(preorder, "agreementcode")),11);
		справДоговор = Справочники.ДоговорыКонтрагентов.Выбрать(,лДок.Контрагент);
		Если справДоговор.Следующий() Тогда
			лДок.ДоговорКонтрагента = справДоговор.Ссылка;
		КонецЕсли; 
		
		лДок.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.Получить(0);
		лУсловиеПродаж = Сред(СокрЛП(ПолучитьРеквизит(preorder, "paytypecode")),9);
		лДок.УсловиеПродаж = ПолучитьОбъектПоКоду(лУсловиеПродаж,"УсловияПродаж");
		СтруктураРеквизитовДокумента = Ценообразование.ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(лДок);
		ЗаполнениеДокументов.ПриИзмененииЗначенияДоговора(лДок, Константы.ВалютаРегламентированногоУчета.Получить(), Константы.ВалютаРегламентированногоУчета.Получить(), Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры, СтруктураРеквизитовДокумента, "Продажа", "Товары", лДок.ДоговорКонтрагента);
		//ОбщегоНазначения.КомментарийРасчета("Контрагент "+Контрагент);
		лДок.ТипЦен = лДок.ДоговорКонтрагента.ТипЦен;
		лДок.СкладГруппа = Справочники.Склады.НайтиПоКоду(Сред(СокрЛП("00000000" +Строка(ПолучитьРеквизит(preorder, "storecode"))),1));
		лДок.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить();
		лДок.КурсВзаиморасчетов = 1;
		лДок.КратностьВзаиморасчетов = 1;
		лДок.Ответственный = глЗначениеПеременной("глТекущийПользователь");
		лДок.УчитыватьНДС = Истина;
		лДок.СуммаВключаетНДС = Истина;
		лДок.АвторасчетНДС = Истина;
		лДок.СтруктурнаяЕдиница = лДок.Организация.ОсновнойБанковскийСчет;
		лДок.Комментарий = лКоммент;
		Попытка
			items	= preorder.selectSingleNode("body").selectNodes("item");
		Исключение
			Сообщить("ОШИБКА чтения табличной части заказа");
			Продолжить;
		КонецПопытки;
		флОтвет = 1;
		Для м = 0 По items.Length() - 1 Цикл
			item	= items.Item(м);
			НовСтр = лДок.Товары.Добавить();
			КодТовара = Сред(СокрЛП(Строка(ПолучитьРеквизит(item, "SKUcode"))),5);
			ТекТовар = ПолучитьОбъектПоКоду(КодТовара,"Номенклатура");
			ТовКоличество = Число(ПолучитьРеквизит(item, "quantity"));
			ТекЦена=Число(СтрЗаменить(ПолучитьРеквизит(item, "price"),".",","));
			ТекСкидка = -1*Число(ПолучитьРеквизит(item, "discountRate"));
			НовСтр.Номенклатура = ТекТовар;
			НовСтр.ЕдиницаИзмерения = НовСтр.Номенклатура.ЕдиницаХраненияОстатков;
			НовСтр.Коэффициент = 1;
			НовСтр.Количество =ТовКоличество;
			НовСтр.Цена = ТекЦена;
			НовСтр.СтавкаНДС = НовСтр.Номенклатура.СтавкаНДС;
			НовСтр.Сумма = ТекЦена*ТовКоличество;
			НовСтр.ПроцентСкидкиНаценки = ТекСкидка;
		КонецЦикла;
		лДок.СуммаДокумента = лДок.Товары.Итог("Сумма");   //Число(ПолучитьРеквизит(item, "amount"));
		Попытка
			лДок.Записать(РежимЗаписиДокумента.Проведение,РежимпроведенияДокумента.Неоперативный);
		Исключение
			лДок.Записать();
		КонецПопытки;
		Сообщить("Сформирован документ Заказ покупателя "+лДок.Номер);
		СообщитьВЛог(МТ_Агент,"Сформирован документ Заказ покупателя "+лДок.Номер,"Download_"+лПолноеИмяКаталогаСессии);
		Попытка
			лДок.Записать(РежимЗаписиДокумента.Проведение,РежимпроведенияДокумента.Неоперативный);
		Исключение
			лДок.Записать();
		КонецПопытки;
		Сообщить(?(лПроверка = 0,"Сформирован","Изменен") + " документ " +тТипДок+ " "+лДок.Номер+"   НЕОПЕРАТИВНО" );
	КонецЦикла;
КонецФункции
Функция СекундыВремя(Секунды)
	Время = "";
	Минуты = 0;
	Час = 0;
	Минуты = Цел(Секунды/60);
	Секунды = Секунды - минуты*60;
	Если минуты > 60 Тогда
		Час = Цел(Минуты/60);
		Минуты = Минуты - Час*60;
	КонецЕсли;
	Время = СокрЛП(Час)+":"+СокрЛП(Минуты)+":"+СокрЛП(Секунды);
	Возврат Время;
КонецФункции
Функция ЗагрузитьРегПосещения(group)
	Попытка
		section	= group.selectSingleNode("visits").childNodes();
	Исключение
		Возврат 0;
	КонецПопытки;
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	мт_ПлановыеТорговыеТочкиМаршрутаСрезПоследних.Контрагент,
	|	мт_ПлановыеТорговыеТочкиМаршрутаСрезПоследних.Порядок
	|ИЗ
	|	РегистрСведений.мт_ПлановыеТорговыеТочкиМаршрута.СрезПоследних КАК мт_ПлановыеТорговыеТочкиМаршрутаСрезПоследних
	|ГДЕ
	|	мт_ПлановыеТорговыеТочкиМаршрутаСрезПоследних.Маршрут = &Маршрут
	|	И мт_ПлановыеТорговыеТочкиМаршрутаСрезПоследних.Неделя = 1
	|	И мт_ПлановыеТорговыеТочкиМаршрутаСрезПоследних.День = &День";
	Запрос.УстановитьПараметр("Маршрут",МТ_Агент);
	Запрос.УстановитьПараметр("День",Перечисления.ДниНедели.Получить(ДеньНедели(Датаформ)-1));
	ТаблицаДневнойМаршрут = Запрос.Выполнить().Выгрузить();
	лКоличествоОшибок	= 0;
	лКоличествоЗаписей	= section.Length();
	Для р = 0 По section.Length() - 1 Цикл
		header	= section.Item(р);
		лНачалоПосещения	= СокрЛП(ПолучитьДатуИзСтроки(ПолучитьРеквизит(header, "startdate")));
		лКонецПосещения		= СокрЛП(ПолучитьДатуИзСтроки(ПолучитьРеквизит(header, "enddate")));
		лШирота		= ПолучитьРеквизит(header, "latitude");
		лДолгота	= ПолучитьРеквизит(header, "longitude");
		КодТТ = Сред(СокрЛП(Строка(ПолучитьРеквизит(header, "buypointcode"))),10);
		лТорговаяТочка = ПолучитьОбъектПоКоду(КодТТ,"Контрагенты");
		НайденнаяСтрока = ТаблицаДневнойМаршрут.Найти(лТорговаяТочка, "Контрагент");
		Если НайденнаяСтрока = Неопределено Тогда
		    лТТПлан = -1;
		Иначе
		    лТТПлан = НайденнаяСтрока.Порядок;
		КонецЕсли;

		///////////////////////////////////////////////////////////////////////////
		//ЗАПОЛНЕНИЕ И СОХРАНЕНИЕ
		///////////////////////////////////////////////////////////////////////////
		
		лЗапись	= РегистрыСведений.МТ_ФактическиеТорговыеТочкиМаршрута.СоздатьМенеджерЗаписи();
		лЗапись.Маршрут			= МТ_Агент;
		лЗапись.ТорговаяТочка			= лТорговаяТочка;
		лЗапись.Контрагент			= лТорговаяТочка.Владелец;
		лЗапись.Результат		= "Посещена";
		лЗапись.НачалоПосещения	= лНачалоПосещения;
		лЗапись.КонецПосещения	= лКонецПосещения;
		лЗапись.ПорядокФакт		= р + 1;
		лЗапись.ПорядокПлан		= лТТПлан;
		лЗапись.Широта 			= лШирота;
		лЗапись.Долгота			= лДолгота;
		Попытка
			лЗапись.Записать();
		Исключение
			лКоличествоОшибок	= лКоличествоОшибок + 1;
		КонецПопытки;
	КонецЦикла;	
	лЗагруженОбъект	= Истина;
	Если Не лКоличествоОшибок = 0 Тогда
		МТ_СистемаКС.Отладка("Не удалось записать " + лКоличествоОшибок + " посещений торговых точек", "Загрузка");
	КонецЕсли;
	Если лЗагруженОбъект Тогда
		МТ_СистемаКС.Отладка("Записан лог посещений торговых точек.", "Загрузка");
	КонецЕсли;
КонецФункции
Функция ЗагрузитьДокФотоОтчет(group)
	Попытка
		photoreports	= group.selectSingleNode("photoreports").childNodes();
	Исключение
		Возврат 0;
	КонецПопытки;
	Для р = 0 По photoreports.Length()  - 1 Цикл
		photoreport	= photoreports.Item(р);
		лКодВнешний			= СокрЛП(ПолучитьРеквизит(photoreport, "innercode"));
		лКодВнешнийПервый	= ПолучитьРеквизит(photoreport, "innercodefirstversion");
		лКодВнутренний		= ПолучитьРеквизит(photoreport, "outercode");
		Если лКодВнешний = "0" 			Тогда лКодВнешний	= "" КонецЕсли;
		Если лКодВнешнийПервый = "0"	Тогда лКодВнешнийПервый	= "" КонецЕсли;
		лНадоУдалить		= ПолучитьРеквизитБулевый(photoreport, "deleted");
		лДатаСоздания 		= ПолучитьДатуИзСтроки(ПолучитьРеквизит(photoreport, "date"));
		//лДатаДоставки		= ПолучитьДатуИзСтроки(ПолучитьРеквизит(photoreport, "deliverydate"));
		лСтатус   			= ПолучитьРеквизит(photoreport, "statecode");
		Мт_НомерОтображ		= ПолучитьРеквизит(photoreport, "num");
		МТ_КодТТмобильний   = ПолучитьРеквизит(photoreport, "buypointinnercode");
		//Перем МТ_Комент;
		//лКоммент   			= ПолучитьРеквизит(photoreport, "comment");
		тТипДок = "МТ_Фотоотчет";
		Если (лКодВнешний = "") ИЛИ лНадоУдалить = Истина Тогда 
			Продолжить;
		КонецЕсли;
		//тРеквизит = "Дата";
		//лПроверка = ПроверкаДокумента( лКодВнешний, лКодВнешнийПервый, лДатаСоздания, тТипДок, тРеквизит);
		//ПолучитьДатуИзСтроки(ПолучитьРеквизит(photoreport, "date"));
		лДок = Документы[тТипДок].ПустаяСсылка();
		лПроверка=0;
		Если лПроверка = 1 Тогда
			
			
			Продолжить;
		ИначеЕсли лПроверка = 0 Тогда 
			Сообщить("Документ " + тТипДок + " за " + лДатаСоздания + " будет сформирован");			
			СообщитьВЛог(МТ_Агент,"Документ  " + тТипДок + " за " + лДатаСоздания + " будет сформирован","Download_"+лПолноеИмяКаталогаСессии);
			лДок = Документы[тТипДок].СоздатьДокумент();
		Иначе
			лДок = лПроверка.ПолучитьОбъект();
		КонецЕсли;
		Сообщить("Формируется документ Фотоотчет № " + лДок.Номер);
		Отбор = Новый Структура("Агент",мАгент);
		лДок.Дата = лДатаСоздания;
		//лДок.ДатаОтгрузки = лДатаДоставки;
		лДок.Агент = Справочники.ФизическиеЛица.НайтиПоКоду(МТ_Агент.Код);
		Если не лКодВнешний = "" Тогда
			лДок.Комментарий = лКодВнешний + "- код в МТ";
		КонецЕсли; 	
		Если не лКодВнешнийПервый = "" Тогда
			лДок.КодМТПервый = лКодВнешнийПервый;
		КонецЕсли; 		//лДок.МТ_КодВнешнийПервый = лКодВнешнийПервый;
		//лДок.Организация = Константы.МТ_Фирма.Получить();
		//ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(лДок, глЗначениеПеременной("глТекущийПользователь"), МТ_Валюта, "Продажа");	
		//мСтруктураПараметровДляПолученияДоговора = ЗаполнениеДокументов.ПолучитьСтруктуруПараметровДляПолученияДоговораЗаказаПокупателя();
		КодТТ = Сред(СокрЛП(Строка(ПолучитьРеквизит(photoreport, "buypointcode"))),10);
		лДок.Партнер = ПолучитьОбъектПоКоду(КодТТ,"Контрагенты");
		//КодКонтрагента = Сред(СокрЛП(Строка(ПолучитьРеквизит(photoreport, "buyercode"))),7);
		//лДок.Контрагент = ПолучитьОбъектПоКоду(КодКонтрагента,"Контрагенты");
		//Сред(СокрЛП(ПолучитьРеквизит(preorder, "pricetypecode")),11)
		//лДоговор = Сред(СокрЛП(ПолучитьРеквизит(preorder, "agreementcode")),11);
		//справДоговор = Справочники.ДоговорыКонтрагентов.Выбрать(,лДок.Контрагент);
		//Если справДоговор.Следующий() Тогда
		//	лДок.ДоговорКонтрагента = справДоговор.Ссылка;
		//КонецЕсли; 
		
		//лДок.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.Получить(0);
		//лУсловиеПродаж = Сред(СокрЛП(ПолучитьРеквизит(photoreport, "paytypecode")),9);
		//лДок.УсловиеПродаж = ПолучитьОбъектПоКоду(лУсловиеПродаж,"УсловияПродаж");
		//СтруктураРеквизитовДокумента = Ценообразование.ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(лДок);
		//ЗаполнениеДокументов.ПриИзмененииЗначенияДоговора(лДок, Константы.ВалютаРегламентированногоУчета.Получить(), Константы.ВалютаРегламентированногоУчета.Получить(), Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры, СтруктураРеквизитовДокумента, "Продажа", "Товары", лДок.ДоговорКонтрагента);
		//ОбщегоНазначения.КомментарийРасчета("Контрагент "+Контрагент);
		//лДок.ТипЦен = лДок.ДоговорКонтрагента.ТипЦен;
		//лДок.СкладГруппа = Справочники.Склады.НайтиПоКоду(Сред(СокрЛП("00000000" +Строка(ПолучитьРеквизит(photoreport, "storecode"))),1));
		//лДок.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить();
		//лДок.КурсВзаиморасчетов = 1;
		//лДок.КратностьВзаиморасчетов = 1;
		//лДок.Ответственный = глЗначениеПеременной("глТекущийПользователь");
		//лДок.УчитыватьНДС = Истина;
		//лДок.СуммаВключаетНДС = Истина;
		//лДок.АвторасчетНДС = Истина;
		//лДок.СтруктурнаяЕдиница = лДок.Организация.ОсновнойБанковскийСчет;
		//лДок.Комментарий = лКоммент;
		Попытка
			items	= photoreport.selectSingleNode("body").selectNodes("item");
		Исключение
			Сообщить("ОШИБКА чтения табличной части Фото отчета");
			Продолжить;
		КонецПопытки;
		флОтвет = 1;
		Для м = 0 По items.Length() - 1 Цикл
			item	= items.Item(м);
			НовСтр = лДок.Фото.Добавить();
			КодФотоОбэкта = Сред(СокрЛП(Строка(ПолучитьРеквизит(item, "photoobjectcode"))),13);
			ИмяФото = Сред(СокрЛП(Строка(ПолучитьРеквизит(item, "photofilename"))),1);
			//ПолучитьОбъектПоКоду(КодТовара,"Номенклатура");
			ВремяФото = ПолучитьДатуИзСтроки(ПолучитьРеквизит(item, "phototime"));
			//Число(ПолучитьРеквизит(item, "phototime"));
			КоментарийФото = ПолучитьРеквизит(item, "photocomment"); 
			//МТ_Комент = КоментарийФото;
			//Число(СтрЗаменить(ПолучитьРеквизит(item, "price"),".",","));
			НовСтр.ИмяФайла = ИмяФото;
			НовСтр.ВремяФото = ВремяФото;
			НовСтр.КоментарийФото = КоментарийФото;
			НовСтр.Объект =Справочники.МТ_ФотоОтчет.НайтиПоКоду(КодФотоОбэкта);
			НовСтр.ПутьКФото = МТ_ПутьКФото+ИмяФото;
			НовСтр.ХранилищеФото = лПолноеИмяКаталогаСессии + ИмяФото;

			СохранитьФото(НовСтр,ИмяФото);
			//НовСтр.Цена = ТекЦена;
			//НовСтр.СтавкаНДС = НовСтр.Номенклатура.СтавкаНДС;
			//НовСтр.Сумма = ТекЦена*ТовКоличество;
			//НовСтр.ПроцентСкидкиНаценки = ТекСкидка;
		КонецЦикла;
		//лДок.Комментарий = МТ_Комент //лДок.Товары.Итог("Сумма");   //Число(ПолучитьРеквизит(item, "amount"));
		Попытка
			лДок.Записать(РежимЗаписиДокумента.Проведение,РежимпроведенияДокумента.Неоперативный);
		Исключение
			лДок.Записать();
		КонецПопытки;
		Сообщить("Сформирован документ Фото отчет "+лДок.Номер);
		СообщитьВЛог(МТ_Агент,"Сформирован документ Заказ покупателя "+лДок.Номер,"Download_"+лПолноеИмяКаталогаСессии);
		//Попытка
		//	лДок.Записать(РежимЗаписиДокумента.Проведение,РежимпроведенияДокумента.Неоперативный);
		//Исключение
		//	лДок.Записать();
		//КонецПопытки;
		Сообщить(?(лПроверка = 0,"Сформирован","Изменен") + " документ " +тТипДок+ " "+лДок.Номер+"   НЕОПЕРАТИВНО" );
	КонецЦикла;
КонецФункции
Функция СохранитьФото(Обэкт,ИмяФото)
	ПутьФотоОбэкта = МТ_ПутьКФото+ИмяФото;
	Если НАйтиФайлы(ПутьФотоОбэкта).Количество() = 0 Тогда
		//МТ_ДДФайл = ПрисоединенныеФайлы.ПолучитьДанныеФайла(Товар.ОсновноеИзображение).СсылкаНаДвоичныеДанныеФайла;
		//МТ_Изображение = Новый Картинка(ПолучитьИзВременногоХранилища(МТ_ДДФайл));
		МТ_Изображение = Новый Картинка(лПолноеИмяКаталогаСессии + ИмяФото);
		//Товар.ОсновноеИзображение.Хранилище.Получить();
		Если Не(ПустаяСтрока(МТ_Изображение)) Тогда
			МТ_Изображение.Записать(ПутьФотоОбэкта);
			//Обэкт.ПутьКФото = ПутьФотоОбэкта;
			//Обэкт.ХранилищеФото = лПолноеИмяКаталогаСессии + ИмяФото;
		КонецЕсли;
	КонецЕсли;	
КонецФункции


Функция СообщитьВЛог(Агент,Меседж,Каталог)Экспорт 
	Запись = Справочники.СообщенияОтладки.СоздатьЭлемент();
	Запись.Период = ТекущаяДата();
	Запись.Агент  = Агент.Ссылка;
	Запись.ПапкаДаты = Каталог;
	Запись.Текст1 = Меседж;
	Запись.Записать();	
КонецФункции

Функция ЗагрузитьРегГПСЛог(group)
	Попытка
		section	= group.selectSingleNode("gpslog").childNodes();
	Исключение
		Возврат 0;
	КонецПопытки;
	лТЗнКоординаты	= Новый ТаблицаЗначений();
	лТЗнКоординаты.Колонки.Добавить("Период");
	лТЗнКоординаты.Колонки.Добавить("Широта");
	лТЗнКоординаты.Колонки.Добавить("Долгота");
	лКонстантаИнтервалЗаписи	= 5;
	лМинДопустимаяСкорость	= 5;	//	5 м/сек
	лКолвоПроверочныхТочек	= 5;
	лКолвоКорректныхТочек	= 1;
	лДатаПредыдущая	= Дата(1900, 1, 1);
	лКоличествоОшибок = 0;
	Для р = 0 По section.Length() - 1 Цикл
		header	= section.Item(р);
		лДата		= ПолучитьДатуИзСтроки(ПолучитьРеквизит(header, "date"));
		Если р > 0 Тогда
			Если лДатаПредыдущая + лКонстантаИнтервалЗаписи > лДата Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		лДатаПредыдущая	= лДата;
		лШирота		= ПолучитьРеквизит(header, "latitude");
		лДолгота	= ПолучитьРеквизит(header, "longitude");
		Если лШирота = "0" или лШирота = "" Тогда Продолжить; КонецЕсли;
		Если лДолгота = "0"	или лДолгота = "" Тогда Продолжить; КонецЕсли;
		
		лСтрокаНовая	= лТЗнКоординаты.Добавить();
		лСтрокаНовая.Период		= лДата;
		лСтрокаНовая.Широта		= ПривестиКФорматуКоординат(лШирота);
		лСтрокаНовая.Долгота	= ПривестиКФорматуКоординат(лДолгота);
	КонецЦикла;
	Для Каждого лСтрока Из лТЗнКоординаты Цикл
		лЗапись	= РегистрыСведений.МТ_GPSЛог.СоздатьМенеджерЗаписи();
		лЗапись.Период		= лСтрока.Период;
		лЗапись.Маршрут		= МТ_Агент.Ссылка;
		лЗапись.Широта		= лСтрока.Широта;
		лЗапись.Долгота		= лСтрока.Долгота;
		Попытка
			лЗапись.Записать();
		Исключение
			МТ_СистемаКС.Отладка(ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
КонецФункции
Процедура ЗагрузитьДокументы(пКаталогДанных)
	Сообщить("Загрузка документов...");
	ПутьКФотоДляФотоотчет =пКаталогДанных;
	лИмяФайлаЗагрузки	= "documents.xml";
	лФайл = Новый Файл(пКаталогДанных + лИмяФайлаЗагрузки);
	Если Не лФайл.Существует() Тогда
		Возврат;
	КонецЕсли;
	ДокXML	= Новый COMОбъект("MSXML2.DOMDocument");
	ДокXML.Load(пКаталогДанных + лИмяФайлаЗагрузки);
	Попытка
		group	= ДокXML.selectSingleNode("documents");
	Исключение
		Возврат;
	КонецПопытки;
	Для н = 0 По ОбъектыЗагрузки.Количество() - 1 Цикл
		Стр = ОбъектыЗагрузки[н];
		Если Стр.ТипОбъектов <> "Д" Тогда
			Продолжить;
		КонецЕсли;
		Если Стр.Включен = 0 Тогда
			Продолжить;
		КонецЕсли;
		лНазвание		= Стр.Название;
		лXMLСекция		= Стр.XMLСекция;
		мКолвоОбъектов = 0;
		Сообщить("Загрузка данных " + лНазвание + "...");
		СообщитьВЛог(МТ_Агент,"Загрузка данных " + лНазвание,"Download_"+лПолноеИмяКаталогаСессии);
		лПроцедура = Стр.ПроцедураНазвание;
		Выполнить(лПроцедура + "(group)");
		Сообщить("Загрузка документов " + лНазвание + " завершена... загружено " + мКолвоОбъектов + " объектов.");
	КонецЦикла;
КонецПроцедуры
Процедура ЗагрузитьРегистры(пКаталогДанных)
	Сообщить("Загрузка регистров...");
	лИмяФайлаЗагрузки	= "registers.xml";
	лИмяФайлаЗагрузки1	= "references.xml";
	лФайл	= Новый Файл(пКаталогДанных + лИмяФайлаЗагрузки);
	Если НЕ лФайл.Существует() Тогда
		Возврат;
	КонецЕсли;
	ДокXML	= Новый COMОбъект("MSXML2.DOMDocument");
	ДокXML.Load(пКаталогДанных + лИмяФайлаЗагрузки);
	Попытка
		group	= ДокXML.selectSingleNode("registers");
	Исключение
		Возврат;
	КонецПопытки;
	ДокXML1	= Новый COMОбъект("MSXML2.DOMDocument");
	ДокXML1.Load(пКаталогДанных + лИмяФайлаЗагрузки1);
	Попытка
		group1	= ДокXML1.selectSingleNode("references");
	Исключение
	КонецПопытки;
	Для н = 0 По ОбъектыЗагрузки.Количество() - 1 Цикл
		Стр = ОбъектыЗагрузки[н];
		Если Стр.ТипОбъектов <> "Р" Тогда
			Продолжить;
		КонецЕсли;
		Если Стр.Включен = 0 Тогда
			Продолжить;
		КонецЕсли;
		лНазвание		= Стр.Название;
		лXMLСекция		= Стр.XMLСекция;
		мКолвоОбъектов = 0;
		Сообщить("Загрузка данных " + лНазвание + "...");
		лПроцедура = Стр.ПроцедураНазвание;
		Выполнить(лПроцедура + "(group)");
		Сообщить("Загрузка документов " + лНазвание + " завершена... загружено " + мКолвоОбъектов + " объектов.");
	КонецЦикла;
КонецПроцедуры
Процедура ЗагрузитьСправочники(пКаталогДанных)
	Сообщить("Загрузка справочников...");
	лИмяФайлаЗагрузки	= "references.xml";
	лФайл	= Новый Файл(пКаталогДанных + лИмяФайлаЗагрузки);
	Если НЕ лФайл.Существует() Тогда
		Возврат;
	КонецЕсли;
	ДокXML	= Новый COMОбъект("MSXML2.DOMDocument");
	ДокXML.Load(пКаталогДанных + лИмяФайлаЗагрузки);
	Попытка
		group	= ДокXML.selectSingleNode("references");
	Исключение
		Возврат;
	КонецПопытки;
	Для н = 0 По ОбъектыЗагрузки.Количество() - 1 Цикл
		Стр = ОбъектыЗагрузки[н];
		Если Стр.ТипОбъектов <> "С" Тогда
			Продолжить;
		КонецЕсли;
		Если Стр.Включен = 0 Тогда
			Продолжить;
		КонецЕсли;
		лНазвание		= Стр.Название;
		лXMLСекция		= Стр.XMLСекция;
		мКолвоОбъектов = 0;
		Сообщить("Загрузка данных " + лНазвание + "...");
		лПроцедура = Стр.ПроцедураНазвание;
		Выполнить(лПроцедура + "(group)");
		Сообщить("Загрузка справочников " + лНазвание + " завершена... загружено " + мКолвоОбъектов + " объектов.");
	КонецЦикла;
КонецПроцедуры
Процедура ЗаписатьЗначенияОбъектовЗагрузки(XMLСекция, ПроцедураНазвание, Включен, ТипОбъектов, Название)
	Стр = ОбъектыЗагрузки.Добавить();
	Стр.Название = Название;
	Стр.Включен = Включен;
	Стр.ТипОбъектов = ТипОбъектов;
	Стр.XMLСекция = XMLСекция;
	Стр.ПроцедураНазвание = ПроцедураНазвание;
КонецПроцедуры
Процедура ПолучитьОбъектыЗагрузки()
	ОбъектыЗагрузки = Новый ТаблицаЗначений;
	ОбъектыЗагрузки.Колонки.Добавить("Название");
	ОбъектыЗагрузки.Колонки.Добавить("Включен");
	ОбъектыЗагрузки.Колонки.Добавить("ТипОбъектов");
	ОбъектыЗагрузки.Колонки.Добавить("XMLСекция");
	ОбъектыЗагрузки.Колонки.Добавить("ПроцедураНазвание");
	
	ЗаписатьЗначенияОбъектовЗагрузки("preorders"			,"ЗагрузитьДокЗаказыПокупателя"			,1	,"Д"	,"Заказ товара");
	ЗаписатьЗначенияОбъектовЗагрузки("photoreports"			,"ЗагрузитьДокФотоОтчет"				,1	,"Д"	,"Фото отчет");
	
	//ЗаписатьЗначенияОбъектовЗагрузки("visits"				,"ЗагрузитьРегПосещения"				,1	,"Р"	,"Посещения");
	//ЗаписатьЗначенияОбъектовЗагрузки("visits"				,"ЗагрузитьРегГПСЛог"					,1	,"Р"	,"Координаты");
КонецПроцедуры
Процедура Загрузить(СписокМаршрутов) Экспорт
	ПолучитьОбъектыЗагрузки();
	Для каждого ТекМаршрут из СписокМаршрутов Цикл
		Маршрут = ТекМаршрут;
		МТ_Код = Число(Маршрут.Код);
		МТ_Агент = Маршрут.Ссылка;
		ЗаписьЖурналаРегистрации("Выгрузка агента - " + МТ_Агент, УровеньЖурналаРегистрации.Информация);
		Сообщить("Загрузка данных для агента - " + МТ_Агент);
		Если Прав(МТ_ПутьКФайлам, 1) <> "\" Тогда
			МТ_ПутьКФайлам = МТ_ПутьКФайлам + "\";
		КонецЕсли;
		лИмяКаталогаМаршрута = СокрЛП(МТ_Код) + "\";
		МТ_ПутьКФото = МТ_ПутьКФайлам+"photo\"+лИмяКаталогаМаршрута;
		СоздатьНесуществующиеПодкаталоги(МТ_ПутьКФото);
		СоздатьНесуществующиеПодкаталоги(МТ_ПутьКФайлам + лИмяКаталогаМаршрута + "FromMT");
		ДокXML = Новый COMОбъект("MSXML2.DOMDocument");
		лИмяФайлаЛога	= "filelog.xml";
		лПолноеИмяФайлаЛога	= МТ_ПутьКФайлам + лИмяКаталогаМаршрута + лИмяФайлаЛога;
		мКаталогДанных = МТ_ПутьКФайлам;
		лФайл = Новый Файл(лПолноеИмяФайлаЛога);
		
		ЗаписьЖурналаРегистрации("файл - " + лПолноеИмяФайлаЛога, УровеньЖурналаРегистрации.Предупреждение);	
		Если лФайл.Существует() Тогда
			ДокXMLLog	= Новый COMОбъект("MSXML2.DOMDocument");
			ДокXMLLog.Load(лПолноеИмяФайлаЛога);
			лСчетчик		= 0;
			documentsInLog	= ДокXMLLog.DocumentElement.selectSingleNode("FromMT").selectNodes("*[@completed='false']");
			ЗаписьЖурналаРегистрации("documentsInLog.Length() - " + documentsInLog.Length(), УровеньЖурналаРегистрации.Предупреждение);	
			Если documentsInLog <> Неопределено Тогда
				ЗаписьЖурналаРегистрации("documentsInLog.Length() - " + documentsInLog.Length(), УровеньЖурналаРегистрации.Предупреждение);	
				Для p = 0 По documentsInLog.Length() - 1 Цикл
					docInLog	= documentsInLog.Item(p);
					ЗаписьЖурналаРегистрации("Обработка - " + docInLog.NodeName, УровеньЖурналаРегистрации.Предупреждение);	
					Если docInLog <> Неопределено Тогда
						лИмяСессии					= СокрЛП(docInLog.NodeName);
						лИмяКаталогаСессии			= лИмяКаталогаМаршрута + "FromMT\" + лИмяСессии;
						лПолноеИмяКаталогаСессии	= мКаталогДанных + лИмяКаталогаСессии + "\";
						Сообщить("Загрузка данных сессии " + лИмяСессии + "...");
						СообщитьВЛог(МТ_Агент,"Щас будет загрузка!","Download_"+лИмяСессии);
						//ЗагрузитьСправочники(лПолноеИмяКаталогаСессии);
						ЗагрузитьДокументы(лПолноеИмяКаталогаСессии);
						//ЗагрузитьРегистры(лПолноеИмяКаталогаСессии);
						docInLog.SetAttribute("completed", "true");
					КонецЕсли;
				КонецЦикла;				
			КонецЕсли;
			ДокXMLLog.Save(лПолноеИмяФайлаЛога);
		Иначе 
			ЗаписьЖурналаРегистрации("Файл обмена не обнаружен - " + МТ_Агент, УровеньЖурналаРегистрации.Предупреждение);	
		КонецЕсли;
		Сообщить("Полная загрузка данных для " + СокрЛП(МТ_агент.Наименование) + " завершена.");
	КонецЦикла;
	МТСообщить("Конец");
КонецПроцедуры
Процедура ВыполнитьМодуль(СписокМаршрутов,МТ_ФлагОбмена)Экспорт
	//*********************************************************
	ЗаписьЖурналаРегистрации("Початор роботи обробки 'Download' - " + ТекущаяДата(), УровеньЖурналаРегистрации.Информация);
	Сообщить("Початор роботи обробки 'Download' - " + ТекущаяДата());
	//*********************************************************
	МТ_ПутьКФайлам = СокрЛП(Константы.МТ_ПутьКФайлам.Получить());
	МТ_Фирма = Константы.МТ_Фирма.ПОлучить();
	МТ_Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
	Если ПустаяСтрока(Константы.МТ_ПутьКФайлам.Получить()) Тогда
		Сообщить("Не задана папка для обмена файлами с КПК!
		|Заполните в Константах параметр 'Путь к файлам КПК'
		|Или нажмите на обработке кнопку Изменить путь.");
		Возврат;
	КонецЕсли;
	Загрузить(СписокМаршрутов);
	//*********************************************************
	ЗаписьЖурналаРегистрации("Кінець роботи обробки 'Download' - " + ТекущаяДата(), УровеньЖурналаРегистрации.Информация);
	Сообщить("Кінець роботи обробки 'Download' - " + ТекущаяДата());
	//*********************************************************
КонецПроцедуры